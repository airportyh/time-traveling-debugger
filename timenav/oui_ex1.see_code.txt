1       <unavailable>
2       <unavailable>
3       <unavailable>
4       from oui import *
5        ┣━ <unavailable>
6        ┃   ┣━ <unavailable>
7        ┃   ┣━ <unavailable>
8        ┃   ┗━ <unavailable>
9        ┣━ <unavailable>
10       ┃   ┣━ <unavailable>
11       ┃   ┃   ┣━ <unavailable>
12       ┃   ┃   ┣━ <unavailable>
13       ┃   ┃   ┣━ <unavailable>
14       ┃   ┃   ┣━ <unavailable>
15       ┃   ┃   ┣━ <unavailable>
16       ┃   ┃   ┣━ <unavailable>
17       ┃   ┃   ┣━ <unavailable>
18       ┃   ┃   ┣━ <unavailable>
19       ┃   ┃   ┣━ <unavailable>
20       ┃   ┃   ┃   ┣━ <unavailable>
21       ┃   ┃   ┃   ┣━ <unavailable>
22       ┃   ┃   ┃   ┣━ <unavailable>
23       ┃   ┃   ┃   ┣━ <unavailable>
24       ┃   ┃   ┃   ┣━ <unavailable>
25       ┃   ┃   ┃   ┣━ <unavailable>
26       ┃   ┃   ┃   ┗━ <unavailable>
27       ┃   ┃   ┣━ <unavailable>
28       ┃   ┃   ┣━ <unavailable>
29       ┃   ┃   ┣━ <unavailable>
30       ┃   ┃   ┣━ <unavailable>
31       ┃   ┃   ┣━ <unavailable>
32       ┃   ┃   ┗━ <unavailable>
33       ┃   ┣━ <unavailable>
34       ┃   ┣━ <unavailable>
35       ┃   ┃   ┣━ <unavailable>
36       ┃   ┃   ┣━ <unavailable>
37       ┃   ┃   ┣━ <unavailable>
38       ┃   ┃   ┣━ <unavailable>
39       ┃   ┃   ┣━ <unavailable>
40       ┃   ┃   ┣━ <unavailable>
41       ┃   ┃   ┣━ <unavailable>
42       ┃   ┃   ┣━ <unavailable>
43       ┃   ┃   ┣━ <unavailable>
44       ┃   ┃   ┣━ <unavailable>
45       ┃   ┃   ┗━ <unavailable>
46       ┃   ┣━ <unavailable>
47       ┃   ┗━ <unavailable>
48       ┣━ <unavailable>
49       ┣━ <unavailable>
50       ┣━ <unavailable>
51       ┣━ <unavailable>
52       ┃   ┣━ <unavailable>
53       ┃   ┣━ <unavailable>
54       ┃   ┣━ <unavailable>
55       ┃   ┣━ <unavailable>
56       ┃   ┃   ┣━ <unavailable>
57       ┃   ┃   ┣━ <unavailable>
58       ┃   ┃   ┣━ <unavailable>
59       ┃   ┃   ┣━ <unavailable>
60       ┃   ┃   ┣━ <unavailable>
61       ┃   ┃   ┣━ <unavailable>
62       ┃   ┃   ┃   ┣━ <unavailable>
63       ┃   ┃   ┃   ┗━ <unavailable>
64       ┃   ┃   ┣━ <unavailable>
65       ┃   ┃   ┣━ <unavailable>
66       ┃   ┃   ┣━ <unavailable>
67       ┃   ┃   ┣━ <unavailable>
68       ┃   ┃   ┃   ┣━ <unavailable>
69       ┃   ┃   ┃   ┣━ <unavailable>
70       ┃   ┃   ┃   ┣━ <unavailable>
71       ┃   ┃   ┃   ┗━ <unavailable>
72       ┃   ┃   ┣━ <unavailable>
73       ┃   ┃   ┃   ┣━ <unavailable>
74       ┃   ┃   ┃   ┗━ <unavailable>
75       ┃   ┃   ┣━ <unavailable>
76       ┃   ┃   ┣━ <unavailable>
77       ┃   ┃   ┣━ <unavailable>
78       ┃   ┃   ┣━ <unavailable>
79       ┃   ┃   ┃   ┣━ <unavailable>
80       ┃   ┃   ┃   ┗━ <unavailable>
81       ┃   ┃   ┣━ <unavailable>
82       ┃   ┃   ┣━ <unavailable>
83       ┃   ┃   ┣━ <unavailable>
84       ┃   ┃   ┣━ <unavailable>
85       ┃   ┃   ┃   ┣━ <unavailable>
86       ┃   ┃   ┃   ┣━ <unavailable>
87       ┃   ┃   ┃   ┗━ <unavailable>
88       ┃   ┃   ┣━ <unavailable>
89       ┃   ┃   ┃   ┣━ <unavailable>
90       ┃   ┃   ┃   ┗━ <unavailable>
91       ┃   ┃   ┣━ <unavailable>
92       ┃   ┃   ┣━ <unavailable>
93       ┃   ┃   ┣━ <unavailable>
94       ┃   ┃   ┣━ <unavailable>
95       ┃   ┃   ┃   ┣━ <unavailable>
96       ┃   ┃   ┃   ┗━ <unavailable>
97       ┃   ┃   ┣━ <unavailable>
98       ┃   ┃   ┣━ <unavailable>
99       ┃   ┃   ┣━ <unavailable>
100      ┃   ┃   ┣━ <unavailable>
101      ┃   ┃   ┃   ┣━ <unavailable>
102      ┃   ┃   ┃   ┣━ <unavailable>
103      ┃   ┃   ┃   ┣━ <unavailable>
104      ┃   ┃   ┃   ┃   ┣━ <unavailable>
105      ┃   ┃   ┃   ┃   ┣━ <unavailable>
106      ┃   ┃   ┃   ┃   ┣━ <unavailable>
107      ┃   ┃   ┃   ┃   ┣━ <unavailable>
108      ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
109      ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
110      ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
111      ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
112      ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
113      ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
114      ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
115      ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
116      ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
117      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
118      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
119      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
120      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
121      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
122      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
123      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
124      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ <unavailable>
125      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
126      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
127      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ <unavailable>
128      ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
129      ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
130      ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
131      ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
132      ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
133      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
134      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
135      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
136      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
137      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
138      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
139      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ <unavailable>
140      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
141      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
142      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ <unavailable>
143      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
144      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ <unavailable>
145      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
146      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
147      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
148      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
149      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
150      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
151      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
152      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
153      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
154      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
155      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
156      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
157      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ <unavailable>
158      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
159      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
160      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
161      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
162      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
163      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ <unavailable>
164      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
165      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
166      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
167      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
168      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
169      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ <unavailable>
170      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
171      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
172      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
173      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
174      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
175      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
176      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ <unavailable>
177      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
178      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ <unavailable>
179      ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
180      ┃   ┃   ┃   ┃   ┃   ┃   ┗━ <unavailable>
181      ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
182      ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
183      ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
184      ┃   ┃   ┃   ┃   ┃   ┗━ <unavailable>
185      ┃   ┃   ┃   ┃   ┣━ <unavailable>
186      ┃   ┃   ┃   ┃   ┣━ <unavailable>
187      ┃   ┃   ┃   ┃   ┣━ <unavailable>
188      ┃   ┃   ┃   ┃   ┣━ <unavailable>
189      ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
190      ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
191      ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
192      ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
193      ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
194      ┃   ┃   ┃   ┃   ┃   ┃   ┗━ <unavailable>
195      ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
196      ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
197      ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
198      ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
199      ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
200      ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
201      ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
202      ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
203      ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
204      ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
205      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
206      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ <unavailable>
207      ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
208      ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
209      ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
210      ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
211      ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
212      ┃   ┃   ┃   ┃   ┃   ┃   ┗━ <unavailable>
213      ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
214      ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
215      ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
216      ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
217      ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
218      ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
219      ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
220      ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
221      ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
222      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
223      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
224      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
225      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
226      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
227      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ <unavailable>
228      ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
229      ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
230      ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
231      ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
232      ┃   ┃   ┃   ┃   ┃   ┃   ┗━ <unavailable>
233      ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
234      ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
235      ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
236      ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
237      ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
238      ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
239      ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
240      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
241      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
242      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
243      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
244      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
245      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ <unavailable>
246      ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
247      ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
248      ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
249      ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
250      ┃   ┃   ┃   ┃   ┃   ┃   ┗━ <unavailable>
251      ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
252      ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
253      ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
254      ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
255      ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
256      ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
257      ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
258      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
259      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
260      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
261      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
262      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
263      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ <unavailable>
264      ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
265      ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
266      ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
267      ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
268      ┃   ┃   ┃   ┃   ┃   ┃   ┗━ <unavailable>
269      ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
270      ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
271      ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
272      ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
273      ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
274      ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
275      ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
276      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
277      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
278      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
279      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
280      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
281      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ <unavailable>
282      ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
283      ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
284      ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
285      ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
286      ┃   ┃   ┃   ┃   ┃   ┃   ┗━ <unavailable>
287      ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
288      ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
289      ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
290      ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
291      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
292      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
293      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
294      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ <unavailable>
295      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
296      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
297      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ <unavailable>
298      ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
299      ┃   ┃   ┃   ┃   ┃   ┃   ┗━ <unavailable>
300      ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
301      ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
302      ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
303      ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
304      ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
305      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
306      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
307      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ <unavailable>
308      ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
309      ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
310      ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
311      ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
312      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
313      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
314      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
315      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
316      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
317      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
318      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
319      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
320      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
321      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
322      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ <unavailable>
323      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
324      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
325      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
326      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
327      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
328      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
329      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
330      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ <unavailable>
331      ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
332      ┃   ┃   ┃   ┃   ┃   ┃   ┗━ <unavailable>
333      ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
334      ┃   ┃   ┃   ┃   ┃   ┗━ <unavailable>
335      ┃   ┃   ┃   ┃   ┣━ <unavailable>
336      ┃   ┃   ┃   ┃   ┣━ <unavailable>
337      ┃   ┃   ┃   ┃   ┣━ <unavailable>
338      ┃   ┃   ┃   ┃   ┣━ <unavailable>
339      ┃   ┃   ┃   ┃   ┗━ <unavailable>
340      ┃   ┃   ┃   ┣━ <unavailable>
341      ┃   ┃   ┃   ┣━ <unavailable>
342      ┃   ┃   ┃   ┣━ <unavailable>
343      ┃   ┃   ┃   ┣━ <unavailable>
344      ┃   ┃   ┃   ┗━ <unavailable>
345      ┃   ┃   ┣━ <unavailable>
346      ┃   ┃   ┃   ┣━ <unavailable>
347      ┃   ┃   ┃   ┗━ <unavailable>
348      ┃   ┃   ┣━ <unavailable>
349      ┃   ┃   ┣━ <unavailable>
350      ┃   ┃   ┣━ <unavailable>
351      ┃   ┃   ┣━ <unavailable>
352      ┃   ┃   ┗━ <unavailable>
353      ┃   ┣━ <unavailable>
354      ┃   ┣━ <unavailable>
355      ┃   ┣━ <unavailable>
356      ┃   ┃   ┣━ <unavailable>
357      ┃   ┃   ┣━ <unavailable>
358      ┃   ┃   ┣━ <unavailable>
359      ┃   ┃   ┃   ┣━ <unavailable>
360      ┃   ┃   ┃   ┣━ <unavailable>
361      ┃   ┃   ┃   ┣━ <unavailable>
362      ┃   ┃   ┃   ┃   ┣━ <unavailable>
363      ┃   ┃   ┃   ┃   ┗━ <unavailable>
364      ┃   ┃   ┃   ┣━ <unavailable>
365      ┃   ┃   ┃   ┣━ <unavailable>
366      ┃   ┃   ┃   ┣━ <unavailable>
367      ┃   ┃   ┃   ┃   ┣━ <unavailable>
368      ┃   ┃   ┃   ┃   ┗━ <unavailable>
369      ┃   ┃   ┃   ┣━ <unavailable>
370      ┃   ┃   ┃   ┣━ <unavailable>
371      ┃   ┃   ┃   ┃   ┣━ <unavailable>
372      ┃   ┃   ┃   ┃   ┣━ <unavailable>
373      ┃   ┃   ┃   ┃   ┣━ <unavailable>
374      ┃   ┃   ┃   ┃   ┣━ <unavailable>
375      ┃   ┃   ┃   ┃   ┣━ <unavailable>
376      ┃   ┃   ┃   ┃   ┣━ <unavailable>
377      ┃   ┃   ┃   ┃   ┣━ <unavailable>
378      ┃   ┃   ┃   ┃   ┣━ <unavailable>
379      ┃   ┃   ┃   ┃   ┣━ <unavailable>
380      ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
381      ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
382      ┃   ┃   ┃   ┃   ┃   ┗━ <unavailable>
383      ┃   ┃   ┃   ┃   ┣━ <unavailable>
384      ┃   ┃   ┃   ┃   ┣━ <unavailable>
385      ┃   ┃   ┃   ┃   ┣━ <unavailable>
386      ┃   ┃   ┃   ┃   ┣━ <unavailable>
387      ┃   ┃   ┃   ┃   ┣━ <unavailable>
388      ┃   ┃   ┃   ┃   ┣━ <unavailable>
389      ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
390      ┃   ┃   ┃   ┃   ┃   ┗━ <unavailable>
391      ┃   ┃   ┃   ┃   ┣━ <unavailable>
392      ┃   ┃   ┃   ┃   ┣━ <unavailable>
393      ┃   ┃   ┃   ┃   ┣━ <unavailable>
394      ┃   ┃   ┃   ┃   ┣━ <unavailable>
395      ┃   ┃   ┃   ┃   ┣━ <unavailable>
396      ┃   ┃   ┃   ┃   ┣━ <unavailable>
397      ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
398      ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
399      ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
400      ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
401      ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
402      ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
403      ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
404      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
405      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
406      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
407      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
408      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
409      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
410      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ <unavailable>
411      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
412      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
413      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
414      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
415      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
416      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
417      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
418      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
419      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
420      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
421      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
422      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
423      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
424      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
425      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
426      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
427      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
428      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
429      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
430      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
431      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
432      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
433      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
434      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ <unavailable>
435      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
436      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
437      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ <unavailable>
438      ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
439      ┃   ┃   ┃   ┃   ┃   ┃   ┗━ <unavailable>
440      ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
441      ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
442      ┃   ┃   ┃   ┃   ┃   ┗━ <unavailable>
443      ┃   ┃   ┃   ┃   ┣━ <unavailable>
444      ┃   ┃   ┃   ┃   ┣━ <unavailable>
445      ┃   ┃   ┃   ┃   ┣━ <unavailable>
446      ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
447      ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
448      ┃   ┃   ┃   ┃   ┃   ┗━ <unavailable>
449      ┃   ┃   ┃   ┃   ┣━ <unavailable>
450      ┃   ┃   ┃   ┃   ┣━ <unavailable>
451      ┃   ┃   ┃   ┃   ┗━ <unavailable>
452      ┃   ┃   ┃   ┣━ <unavailable>
453      ┃   ┃   ┃   ┣━ <unavailable>
454      ┃   ┃   ┃   ┗━ <unavailable>
455      ┃   ┃   ┣━ <unavailable>
456      ┃   ┃   ┣━ <unavailable>
457      ┃   ┃   ┣━ <unavailable>
458      ┃   ┃   ┣━ <unavailable>
459      ┃   ┃   ┣━ <unavailable>
460      ┃   ┃   ┣━ <unavailable>
461      ┃   ┃   ┣━ <unavailable>
462      ┃   ┃   ┃   ┣━ <unavailable>
463      ┃   ┃   ┃   ┃   ┣━ <unavailable>
464      ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
465      ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
466      ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
467      ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
468      ┃   ┃   ┃   ┃   ┃   ┃   ┗━ <unavailable>
469      ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
470      ┃   ┃   ┃   ┃   ┃   ┗━ <unavailable>
471      ┃   ┃   ┃   ┃   ┣━ <unavailable>
472      ┃   ┃   ┃   ┃   ┣━ <unavailable>
473      ┃   ┃   ┃   ┃   ┣━ <unavailable>
474      ┃   ┃   ┃   ┃   ┣━ <unavailable>
475      ┃   ┃   ┃   ┃   ┣━ <unavailable>
476      ┃   ┃   ┃   ┃   ┣━ <unavailable>
477      ┃   ┃   ┃   ┃   ┣━ <unavailable>
478      ┃   ┃   ┃   ┃   ┣━ <unavailable>
479      ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
480      ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
481      ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
482      ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
483      ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
484      ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
485      ┃   ┃   ┃   ┃   ┃   ┃   ┗━ <unavailable>
486      ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
487      ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
488      ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
489      ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
490      ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
491      ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
492      ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
493      ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
494      ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
495      ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
496      ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
497      ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
498      ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
499      ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
500      ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
501      ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
502      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
503      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
504      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
505      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
506      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
507      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
508      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
509      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ <unavailable>
510      ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
511      ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
512      ┃   ┃   ┃   ┃   ┃   ┗━ <unavailable>
513      ┃   ┃   ┃   ┃   ┣━ <unavailable>
514      ┃   ┃   ┃   ┃   ┣━ <unavailable>
515      ┃   ┃   ┃   ┃   ┣━ <unavailable>
516      ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
517      ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
518      ┃   ┃   ┃   ┃   ┃   ┃   ┗━ <unavailable>
519      ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
520      ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
521      ┃   ┃   ┃   ┃   ┃   ┗━ <unavailable>
522      ┃   ┃   ┃   ┃   ┣━ <unavailable>
523      ┃   ┃   ┃   ┃   ┣━ <unavailable>
524      ┃   ┃   ┃   ┃   ┣━ <unavailable>
525      ┃   ┃   ┃   ┃   ┣━ <unavailable>
526      ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
527      ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
528      ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
529      ┃   ┃   ┃   ┃   ┃   ┗━ <unavailable>
530      ┃   ┃   ┃   ┃   ┣━ <unavailable>
531      ┃   ┃   ┃   ┃   ┣━ <unavailable>
532      ┃   ┃   ┃   ┃   ┣━ <unavailable>
533      ┃   ┃   ┃   ┃   ┣━ <unavailable>
534      ┃   ┃   ┃   ┃   ┣━ <unavailable>
535      ┃   ┃   ┃   ┃   ┣━ <unavailable>
536      ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
537      ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
538      ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
539      ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
540      ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
541      ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
542      ┃   ┃   ┃   ┃   ┃   ┃   ┗━ <unavailable>
543      ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
544      ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
545      ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
546      ┃   ┃   ┃   ┃   ┃   ┗━ <unavailable>
547      ┃   ┃   ┃   ┃   ┣━ <unavailable>
548      ┃   ┃   ┃   ┃   ┣━ <unavailable>
549      ┃   ┃   ┃   ┃   ┣━ <unavailable>
550      ┃   ┃   ┃   ┃   ┣━ <unavailable>
551      ┃   ┃   ┃   ┃   ┣━ <unavailable>
552      ┃   ┃   ┃   ┃   ┣━ <unavailable>
553      ┃   ┃   ┃   ┃   ┣━ <unavailable>
554      ┃   ┃   ┃   ┃   ┣━ <unavailable>
555      ┃   ┃   ┃   ┃   ┣━ <unavailable>
556      ┃   ┃   ┃   ┃   ┣━ <unavailable>
557      ┃   ┃   ┃   ┃   ┣━ <unavailable>
558      ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
559      ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
560      ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
561      ┃   ┃   ┃   ┃   ┃   ┃   ┗━ <unavailable>
562      ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
563      ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
564      ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
565      ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
566      ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
567      ┃   ┃   ┃   ┃   ┃   ┃   ┗━ <unavailable>
568      ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
569      ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
570      ┃   ┃   ┃   ┃   ┃   ┗━ <unavailable>
571      ┃   ┃   ┃   ┃   ┣━ <unavailable>
572      ┃   ┃   ┃   ┃   ┣━ <unavailable>
573      ┃   ┃   ┃   ┃   ┣━ <unavailable>
574      ┃   ┃   ┃   ┃   ┣━ <unavailable>
575      ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
576      ┃   ┃   ┃   ┃   ┃   ┗━ <unavailable>
577      ┃   ┃   ┃   ┃   ┣━ <unavailable>
578      ┃   ┃   ┃   ┃   ┣━ <unavailable>
579      ┃   ┃   ┃   ┃   ┣━ <unavailable>
580      ┃   ┃   ┃   ┃   ┣━ <unavailable>
581      ┃   ┃   ┃   ┃   ┣━ <unavailable>
582      ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
583      ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
584      ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
585      ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
586      ┃   ┃   ┃   ┃   ┃   ┃   ┗━ <unavailable>
587      ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
588      ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
589      ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
590      ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
591      ┃   ┃   ┃   ┃   ┃   ┗━ <unavailable>
592      ┃   ┃   ┃   ┃   ┣━ <unavailable>
593      ┃   ┃   ┃   ┃   ┗━ <unavailable>
594      ┃   ┃   ┃   ┣━ <unavailable>
595      ┃   ┃   ┃   ┣━ <unavailable>
596      ┃   ┃   ┃   ┣━ <unavailable>
597      ┃   ┃   ┃   ┃   ┣━ <unavailable>
598      ┃   ┃   ┃   ┃   ┃   ┣━ import termios
599      ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
600      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
601      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
602      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ <unavailable>
603      ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
604      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
605      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
606      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
607      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
608      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
609      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
610      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
611      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
612      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
613      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
614      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
615      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
616      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
617      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
618      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
619      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
620      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ <unavailable>
621      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
622      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
623      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
624      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
625      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
626      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ <unavailable>
627      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
628      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
629      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
630      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
631      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
632      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
633      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
634      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
635      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
636      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
637      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
638      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
639      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ <unavailable>
640      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
641      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ <unavailable>
642      ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
643      ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
644      ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
645      ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
646      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
647      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
648      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
649      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
650      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
651      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
652      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
653      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
654      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
655      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
656      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
657      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ <unavailable>
658      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
659      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
660      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
661      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
662      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
663      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
664      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
665      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ <unavailable>
666      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
667      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
668      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ <unavailable>
669      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
670      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
671      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
672      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
673      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
674      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ <unavailable>
675      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
676      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
677      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
678      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
679      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
680      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
681      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ <unavailable>
682      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
683      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
684      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ <unavailable>
685      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
686      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
687      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
688      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
689      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
690      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ <unavailable>
691      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
692      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
693      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
694      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
695      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
696      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
697      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
698      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
699      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
700      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
701      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
702      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
703      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
704      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
705      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
706      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ <unavailable>
707      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
708      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
709      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
710      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
711      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
712      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
713      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
714      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
715      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
716      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ <unavailable>
717      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
718      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
719      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
720      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
721      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ <unavailable>
722      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
723      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
724      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
725      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
726      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
727      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
728      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
729      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
730      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
731      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
732      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
733      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
734      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
735      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
736      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ <unavailable>
737      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
738      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
739      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
740      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
741      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ <unavailable>
742      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
743      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
744      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
745      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
746      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
747      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
748      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
749      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
750      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
751      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
752      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
753      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
754      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ <unavailable>
755      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
756      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
757      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
758      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
759      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ <unavailable>
760      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
761      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
762      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
763      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
764      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
765      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
766      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
767      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
768      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
769      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
770      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
771      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
772      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ <unavailable>
773      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
774      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
775      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
776      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
777      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ <unavailable>
778      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
779      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
780      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
781      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
782      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
783      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
784      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
785      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
786      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
787      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
788      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
789      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
790      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ <unavailable>
791      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
792      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
793      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
794      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
795      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ <unavailable>
796      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
797      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
798      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
799      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
800      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
801      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
802      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
803      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
804      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
805      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
806      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
807      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
808      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ <unavailable>
809      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
810      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
811      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
812      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
813      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ <unavailable>
814      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
815      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
816      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
817      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
818      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
819      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ <unavailable>
820      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
821      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
822      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
823      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
824      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
825      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
826      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
827      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
828      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
829      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
830      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ <unavailable>
831      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
832      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
833      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
834      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
835      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
836      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
837      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
838      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
839      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
840      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ <unavailable>
841      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
842      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
843      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
844      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
845      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
846      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
847      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
848      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
849      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
850      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ <unavailable>
851      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
852      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
853      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
854      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
855      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ <unavailable>
856      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
857      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
858      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
859      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
860      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
861      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
862      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
863      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
864      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
865      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
866      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
867      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
868      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
869      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
870      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ <unavailable>
871      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
872      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
873      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
874      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
875      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ <unavailable>
876      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
877      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
878      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
879      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
880      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
881      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
882      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
883      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
884      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
885      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
886      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
887      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
888      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ <unavailable>
889      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
890      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
891      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
892      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
893      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ <unavailable>
894      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
895      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
896      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
897      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
898      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
899      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
900      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
901      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
902      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
903      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
904      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
905      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
906      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ <unavailable>
907      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
908      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
909      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
910      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
911      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ <unavailable>
912      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
913      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
914      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
915      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
916      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
917      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
918      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
919      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
920      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
921      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
922      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
923      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
924      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ <unavailable>
925      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
926      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
927      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
928      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
929      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ <unavailable>
930      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
931      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
932      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
933      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
934      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
935      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
936      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
937      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
938      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
939      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
940      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
941      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
942      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ <unavailable>
943      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
944      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
945      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
946      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
947      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ <unavailable>
948      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
949      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
950      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
951      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
952      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
953      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ <unavailable>
954      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
955      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
956      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
957      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
958      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
959      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
960      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
961      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
962      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
963      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
964      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ <unavailable>
965      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
966      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
967      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
968      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
969      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
970      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
971      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
972      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
973      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
974      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ <unavailable>
975      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
976      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
977      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
978      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
979      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ <unavailable>
980      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
981      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
982      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
983      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
984      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
985      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
986      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
987      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
988      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
989      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
990      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
991      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
992      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
993      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
994      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ <unavailable>
995      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
996      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
997      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
998      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
999      ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ <unavailable>
1000     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1001     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1002     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1003     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1004     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1005     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1006     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1007     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ <unavailable>
1008     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1009     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1010     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ <unavailable>
1011     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1012     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ <unavailable>
1013     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1014     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1015     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1016     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1017     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1018     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1019     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1020     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ <unavailable>
1021     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1022     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1023     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1024     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1025     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1026     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1027     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1028     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1029     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1030     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1031     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1032     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1033     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1034     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1035     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ <unavailable>
1036     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1037     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1038     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1039     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1040     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1041     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1042     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1043     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ <unavailable>
1044     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1045     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ <unavailable>
1046     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1047     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ <unavailable>
1048     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1049     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1050     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1051     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1052     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ <unavailable>
1053     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1054     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1055     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1056     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1057     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ <unavailable>
1058     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1059     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1060     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ <unavailable>
1061     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1062     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1063     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1064     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1065     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ <unavailable>
1066     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1067     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1068     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1069     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1070     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1071     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1072     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1073     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1074     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1075     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1076     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1077     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1078     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1079     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ <unavailable>
1080     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1081     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1082     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1083     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1084     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1085     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ <unavailable>
1086     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1087     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1088     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ <unavailable>
1089     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1090     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1091     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1092     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1093     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1094     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1095     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1096     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1097     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1098     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1099     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1100     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1101     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1102     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1103     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ <unavailable>
1104     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1105     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1106     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1107     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1108     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1109     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1110     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1111     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ <unavailable>
1112     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1113     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1114     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1115     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1116     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1117     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1118     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1119     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1120     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1121     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1122     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1123     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1124     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1125     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ <unavailable>
1126     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1127     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1128     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ <unavailable>
1129     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1130     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1131     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ <unavailable>
1132     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1133     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1134     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ <unavailable>
1135     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1136     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1137     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1138     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1139     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1140     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1141     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1142     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1143     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1144     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ <unavailable>
1145     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1146     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1147     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1148     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1149     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1150     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ <unavailable>
1151     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1152     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ <unavailable>
1153     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1154     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1155     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1156     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1157     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1158     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ <unavailable>
1159     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1160     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1161     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1162     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ <unavailable>
1163     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1164     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1165     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1166     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ <unavailable>
1167     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1168     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1169     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1170     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1171     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1172     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1173     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1174     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1175     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1176     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1177     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1178     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ <unavailable>
1179     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1180     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1181     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1182     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1183     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1184     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1185     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1186     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ <unavailable>
1187     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1188     ┃   ┃   ┃   ┃   ┃   ┃   ┗━ <unavailable>
1189     ┃   ┃   ┃   ┃   ┃   ┣━ import termios
1190     ┃   ┃   ┃   ┃   ┃   ┣━ import tty
1191     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1192     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1193     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1194     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ <unavailable>
1195     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1196     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1197     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1198     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1199     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1200     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1201     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1202     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1203     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1204     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1205     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1206     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1207     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1208     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1209     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1210     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1211     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1212     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ <unavailable>
1213     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1214     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1215     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1216     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1217     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1218     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ <unavailable>
1219     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1220     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1221     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1222     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1223     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1224     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1225     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1226     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1227     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1228     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1229     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1230     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1231     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ <unavailable>
1232     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1233     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ <unavailable>
1234     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1235     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1236     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1237     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1238     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1239     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1240     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1241     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1242     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1243     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1244     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1245     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1246     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1247     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1248     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1249     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ <unavailable>
1250     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1251     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1252     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1253     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1254     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1255     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1256     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1257     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ <unavailable>
1258     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1259     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1260     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ <unavailable>
1261     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1262     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1263     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1264     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1265     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1266     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ <unavailable>
1267     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1268     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1269     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1270     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1271     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1272     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1273     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ <unavailable>
1274     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1275     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1276     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ <unavailable>
1277     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1278     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1279     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1280     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1281     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1282     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ <unavailable>
1283     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1284     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1285     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1286     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1287     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1288     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1289     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1290     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1291     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1292     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1293     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1294     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1295     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1296     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1297     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1298     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ <unavailable>
1299     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1300     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1301     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1302     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1303     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1304     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1305     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1306     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1307     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1308     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ <unavailable>
1309     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1310     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1311     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1312     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1313     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ <unavailable>
1314     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1315     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1316     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1317     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1318     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1319     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1320     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1321     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1322     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1323     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1324     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1325     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1326     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1327     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1328     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ <unavailable>
1329     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1330     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1331     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1332     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1333     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ <unavailable>
1334     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1335     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1336     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1337     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1338     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1339     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1340     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1341     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1342     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1343     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1344     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1345     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1346     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ <unavailable>
1347     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1348     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1349     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1350     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1351     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ <unavailable>
1352     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1353     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1354     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1355     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1356     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1357     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1358     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1359     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1360     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1361     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1362     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1363     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1364     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ <unavailable>
1365     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1366     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1367     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1368     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1369     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ <unavailable>
1370     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1371     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1372     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1373     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1374     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1375     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1376     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1377     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1378     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1379     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1380     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1381     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1382     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ <unavailable>
1383     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1384     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1385     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1386     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1387     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ <unavailable>
1388     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1389     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1390     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1391     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1392     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1393     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1394     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1395     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1396     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1397     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1398     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1399     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1400     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ <unavailable>
1401     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1402     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1403     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1404     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1405     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ <unavailable>
1406     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1407     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1408     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1409     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1410     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1411     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ <unavailable>
1412     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1413     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1414     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1415     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1416     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1417     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1418     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1419     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1420     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1421     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1422     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ <unavailable>
1423     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1424     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1425     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1426     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1427     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1428     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1429     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1430     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1431     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1432     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ <unavailable>
1433     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1434     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1435     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1436     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1437     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1438     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1439     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1440     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1441     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1442     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ <unavailable>
1443     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1444     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1445     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1446     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1447     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ <unavailable>
1448     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1449     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1450     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1451     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1452     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1453     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1454     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1455     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1456     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1457     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1458     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1459     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1460     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1461     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1462     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ <unavailable>
1463     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1464     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1465     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1466     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1467     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ <unavailable>
1468     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1469     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1470     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1471     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1472     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1473     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1474     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1475     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1476     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1477     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1478     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1479     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1480     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ <unavailable>
1481     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1482     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1483     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1484     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1485     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ <unavailable>
1486     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1487     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1488     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1489     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1490     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1491     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1492     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1493     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1494     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1495     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1496     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1497     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1498     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ <unavailable>
1499     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1500     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1501     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1502     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1503     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ <unavailable>
1504     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1505     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1506     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1507     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1508     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1509     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1510     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1511     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1512     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1513     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1514     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1515     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1516     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ <unavailable>
1517     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1518     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1519     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1520     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1521     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ <unavailable>
1522     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1523     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1524     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1525     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1526     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1527     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1528     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1529     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ <unavailable>
1530     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1531     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1532     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ <unavailable>
1533     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1534     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ <unavailable>
1535     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1536     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1537     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1538     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1539     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1540     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1541     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1542     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ <unavailable>
1543     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1544     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1545     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1546     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1547     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1548     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1549     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1550     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1551     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1552     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1553     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1554     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1555     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1556     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1557     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ <unavailable>
1558     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1559     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1560     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1561     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1562     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1563     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1564     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1565     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ <unavailable>
1566     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1567     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ <unavailable>
1568     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1569     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ <unavailable>
1570     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1571     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1572     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1573     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1574     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ <unavailable>
1575     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1576     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1577     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1578     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1579     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ <unavailable>
1580     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1581     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1582     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ <unavailable>
1583     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1584     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1585     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1586     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1587     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ <unavailable>
1588     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1589     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1590     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1591     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1592     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1593     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1594     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1595     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1596     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1597     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1598     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ <unavailable>
1599     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1600     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1601     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1602     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1603     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ <unavailable>
1604     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1605     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1606     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1607     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1608     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1609     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1610     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1611     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1612     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1613     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1614     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1615     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1616     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1617     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ <unavailable>
1618     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1619     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1620     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1621     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1622     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1623     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1624     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1625     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ <unavailable>
1626     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1627     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1628     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1629     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1630     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1631     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1632     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1633     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1634     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1635     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1636     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1637     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1638     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1639     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1640     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1641     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1642     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1643     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1644     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1645     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ <unavailable>
1646     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1647     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1648     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1649     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1650     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1651     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1652     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1653     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1654     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1655     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1656     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1657     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1658     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1659     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1660     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1661     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1662     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1663     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1664     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1665     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1666     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1667     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1668     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1669     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ <unavailable>
1670     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1671     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1672     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ <unavailable>
1673     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1674     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ <unavailable>
1675     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1676     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1677     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ <unavailable>
1678     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1679     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1680     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1681     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1682     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1683     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ <unavailable>
1684     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1685     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1686     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ <unavailable>
1687     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1688     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1689     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ <unavailable>
1690     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1691     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1692     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1693     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1694     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1695     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1696     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1697     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1698     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1699     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1700     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1701     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1702     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1703     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ <unavailable>
1704     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1705     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ <unavailable>
1706     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1707     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1708     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1709     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1710     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1711     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1712     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1713     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1714     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1715     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1716     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1717     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1718     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1719     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1720     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ <unavailable>
1721     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1722     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1723     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1724     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1725     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1726     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1727     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1728     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1729     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1730     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1731     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1732     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1733     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1734     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1735     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1736     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1737     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1738     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1739     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1740     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1741     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1742     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1743     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1744     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ <unavailable>
1745     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1746     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1747     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ <unavailable>
1748     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1749     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1750     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1751     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1752     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1753     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ <unavailable>
1754     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1755     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1756     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ <unavailable>
1757     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1758     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1759     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1760     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1761     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1762     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1763     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1764     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ <unavailable>
1765     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1766     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1767     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1768     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1769     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1770     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1771     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1772     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1773     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1774     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1775     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1776     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1777     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ <unavailable>
1778     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1779     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1780     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1781     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ <unavailable>
1782     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1783     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1784     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1785     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1786     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1787     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1788     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1789     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1790     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1791     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1792     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1793     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1794     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1795     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1796     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ <unavailable>
1797     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1798     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1799     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1800     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1801     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1802     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ <unavailable>
1803     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1804     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1805     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ <unavailable>
1806     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1807     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1808     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1809     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1810     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1811     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ <unavailable>
1812     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1813     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1814     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1815     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1816     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1817     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1818     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1819     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1820     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1821     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ <unavailable>
1822     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1823     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1824     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1825     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1826     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ <unavailable>
1827     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1828     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ <unavailable>
1829     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1830     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1831     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1832     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1833     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ """Terminal utilities."""
1834     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ from termios import *
1835     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ __all__ = ["setraw", "setcbreak"]
1836     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ IFLAG = 0
1837     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ OFLAG = 1
1838     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ CFLAG = 2
1839     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ LFLAG = 3
1840     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ ISPEED = 4
1841     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ OSPEED = 5
1842     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ CC = 6
1843     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ def setraw(fd, when=TCSAFLUSH):
1844     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ def setcbreak(fd, when=TCSAFLUSH):
1845     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ def setcbreak(fd, when=TCSAFLUSH):
1846     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1847     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ <unavailable>
1848     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1849     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ <unavailable>
1850     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1851     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1852     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1853     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1854     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1855     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ <unavailable>
1856     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1857     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1858     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1859     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ <unavailable>
1860     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1861     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1862     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1863     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ <unavailable>
1864     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1865     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1866     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1867     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1868     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1869     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1870     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1871     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1872     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1873     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1874     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1875     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ <unavailable>
1876     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1877     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1878     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1879     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1880     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1881     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1882     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1883     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ <unavailable>
1884     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1885     ┃   ┃   ┃   ┃   ┃   ┃   ┗━ <unavailable>
1886     ┃   ┃   ┃   ┃   ┃   ┣━ import tty
1887     ┃   ┃   ┃   ┃   ┃   ┣━ import os
1888     ┃   ┃   ┃   ┃   ┃   ┣━ from events import decode_input
1889     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1890     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1891     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1892     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ <unavailable>
1893     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1894     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1895     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1896     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1897     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1898     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1899     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1900     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1901     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1902     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1903     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1904     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1905     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1906     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1907     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1908     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1909     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1910     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ <unavailable>
1911     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1912     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1913     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1914     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1915     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1916     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ <unavailable>
1917     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1918     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1919     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1920     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1921     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1922     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1923     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1924     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1925     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1926     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1927     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1928     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1929     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ <unavailable>
1930     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1931     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ <unavailable>
1932     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1933     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1934     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1935     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1936     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1937     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1938     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1939     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1940     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1941     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1942     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1943     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1944     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1945     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1946     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1947     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ <unavailable>
1948     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1949     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1950     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1951     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1952     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1953     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1954     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1955     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ <unavailable>
1956     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1957     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1958     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ <unavailable>
1959     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1960     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1961     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1962     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1963     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1964     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ <unavailable>
1965     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1966     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1967     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1968     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1969     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1970     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1971     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ <unavailable>
1972     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1973     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1974     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ <unavailable>
1975     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1976     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1977     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1978     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1979     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1980     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ <unavailable>
1981     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1982     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1983     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1984     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1985     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1986     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1987     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1988     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1989     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1990     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1991     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1992     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1993     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1994     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1995     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1996     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ <unavailable>
1997     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1998     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
1999     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2000     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2001     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2002     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2003     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2004     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2005     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2006     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ <unavailable>
2007     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2008     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2009     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2010     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2011     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ <unavailable>
2012     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2013     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2014     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2015     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2016     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2017     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2018     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2019     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2020     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2021     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2022     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2023     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2024     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2025     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2026     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ <unavailable>
2027     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2028     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2029     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2030     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2031     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ <unavailable>
2032     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2033     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2034     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2035     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2036     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2037     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2038     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2039     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2040     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2041     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2042     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2043     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2044     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ <unavailable>
2045     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2046     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2047     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2048     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2049     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ <unavailable>
2050     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2051     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2052     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2053     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2054     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2055     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2056     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2057     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2058     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2059     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2060     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2061     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2062     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ <unavailable>
2063     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2064     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2065     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2066     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2067     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ <unavailable>
2068     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2069     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2070     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2071     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2072     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2073     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2074     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2075     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2076     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2077     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2078     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2079     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2080     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ <unavailable>
2081     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2082     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2083     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2084     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2085     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ <unavailable>
2086     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2087     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2088     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2089     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2090     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2091     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2092     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2093     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ <unavailable>
2094     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2095     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2096     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ <unavailable>
2097     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2098     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ <unavailable>
2099     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2100     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2101     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2102     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2103     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2104     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2105     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2106     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ <unavailable>
2107     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2108     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2109     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2110     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2111     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2112     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2113     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2114     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2115     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2116     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2117     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2118     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2119     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2120     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2121     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ <unavailable>
2122     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2123     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2124     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2125     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2126     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2127     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2128     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2129     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ <unavailable>
2130     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2131     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ <unavailable>
2132     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2133     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ <unavailable>
2134     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2135     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2136     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2137     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2138     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ <unavailable>
2139     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2140     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2141     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2142     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2143     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ <unavailable>
2144     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2145     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2146     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ <unavailable>
2147     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2148     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2149     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2150     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2151     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ <unavailable>
2152     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2153     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2154     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2155     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2156     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2157     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2158     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2159     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2160     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2161     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2162     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ <unavailable>
2163     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2164     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2165     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2166     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2167     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ <unavailable>
2168     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2169     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2170     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2171     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2172     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2173     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2174     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2175     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2176     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2177     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2178     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2179     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2180     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2181     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ <unavailable>
2182     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2183     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2184     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2185     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2186     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2187     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2188     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2189     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ <unavailable>
2190     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2191     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2192     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2193     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2194     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2195     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2196     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2197     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2198     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2199     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2200     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2201     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2202     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2203     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2204     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2205     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2206     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2207     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2208     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2209     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ <unavailable>
2210     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2211     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2212     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2213     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2214     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2215     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2216     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2217     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2218     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2219     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2220     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2221     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2222     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2223     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2224     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2225     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2226     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2227     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2228     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2229     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2230     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2231     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2232     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2233     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ <unavailable>
2234     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2235     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2236     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ <unavailable>
2237     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2238     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ <unavailable>
2239     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2240     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2241     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ <unavailable>
2242     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2243     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2244     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2245     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2246     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2247     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ <unavailable>
2248     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2249     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2250     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ <unavailable>
2251     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2252     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2253     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ <unavailable>
2254     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2255     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2256     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2257     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2258     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2259     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2260     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2261     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2262     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2263     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2264     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2265     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2266     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2267     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ <unavailable>
2268     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2269     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ <unavailable>
2270     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2271     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2272     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2273     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2274     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2275     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2276     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2277     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2278     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2279     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2280     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2281     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2282     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2283     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2284     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ <unavailable>
2285     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2286     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2287     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2288     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2289     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2290     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2291     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2292     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2293     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2294     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2295     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2296     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2297     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2298     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2299     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2300     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2301     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2302     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2303     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2304     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2305     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2306     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2307     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2308     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ <unavailable>
2309     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2310     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2311     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ <unavailable>
2312     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2313     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2314     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2315     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2316     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2317     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ <unavailable>
2318     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2319     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2320     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ <unavailable>
2321     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2322     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2323     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2324     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2325     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2326     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2327     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2328     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ <unavailable>
2329     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2330     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2331     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2332     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2333     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2334     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2335     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2336     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2337     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2338     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2339     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2340     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2341     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ <unavailable>
2342     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2343     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2344     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2345     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ <unavailable>
2346     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2347     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2348     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2349     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2350     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2351     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2352     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2353     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2354     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2355     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2356     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2357     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2358     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2359     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2360     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ <unavailable>
2361     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2362     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2363     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2364     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2365     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2366     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ <unavailable>
2367     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2368     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2369     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ <unavailable>
2370     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2371     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2372     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2373     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2374     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2375     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ <unavailable>
2376     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2377     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2378     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2379     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2380     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2381     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2382     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2383     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2384     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2385     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ <unavailable>
2386     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2387     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2388     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2389     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2390     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ <unavailable>
2391     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2392     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ <unavailable>
2393     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2394     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2395     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2396     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2397     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ class Event(object):
2398     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ class Event(object):
2399     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ def __init__(self, etype, **kwargs):
2400     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ def __repr__(self):
2401     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ def __repr__(self):
2402     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ class Event(object):
2403     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ def decode_input(an_input):
2404     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ def decode_input(an_input):
2405     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2406     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ <unavailable>
2407     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2408     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ <unavailable>
2409     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2410     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2411     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2412     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2413     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2414     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ <unavailable>
2415     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2416     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2417     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2418     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ <unavailable>
2419     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2420     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2421     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2422     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ <unavailable>
2423     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2424     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2425     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2426     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2427     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2428     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2429     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2430     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2431     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2432     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2433     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2434     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ <unavailable>
2435     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2436     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2437     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2438     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2439     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2440     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2441     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2442     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ <unavailable>
2443     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2444     ┃   ┃   ┃   ┃   ┃   ┃   ┗━ <unavailable>
2445     ┃   ┃   ┃   ┃   ┃   ┣━ from events import decode_input
2446     ┃   ┃   ┃   ┃   ┃   ┣━ from term_util import *
2447     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2448     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2449     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2450     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ <unavailable>
2451     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2452     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2453     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2454     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2455     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2456     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2457     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2458     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2459     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2460     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2461     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2462     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2463     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2464     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2465     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2466     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2467     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2468     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ <unavailable>
2469     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2470     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2471     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2472     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2473     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2474     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ <unavailable>
2475     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2476     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2477     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2478     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2479     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2480     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2481     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2482     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2483     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2484     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2485     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2486     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2487     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ <unavailable>
2488     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2489     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ <unavailable>
2490     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2491     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2492     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2493     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2494     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2495     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2496     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2497     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2498     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2499     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2500     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2501     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2502     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2503     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2504     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2505     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ <unavailable>
2506     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2507     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2508     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2509     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2510     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2511     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2512     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2513     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ <unavailable>
2514     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2515     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2516     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ <unavailable>
2517     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2518     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2519     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2520     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2521     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2522     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ <unavailable>
2523     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2524     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2525     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2526     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2527     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2528     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2529     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ <unavailable>
2530     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2531     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2532     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ <unavailable>
2533     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2534     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2535     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2536     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2537     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2538     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ <unavailable>
2539     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2540     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2541     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2542     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2543     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2544     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2545     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2546     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2547     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2548     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2549     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2550     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2551     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2552     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2553     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2554     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ <unavailable>
2555     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2556     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2557     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2558     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2559     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2560     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2561     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2562     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2563     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2564     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ <unavailable>
2565     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2566     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2567     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2568     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2569     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ <unavailable>
2570     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2571     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2572     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2573     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2574     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2575     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2576     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2577     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2578     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2579     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2580     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2581     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2582     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2583     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2584     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ <unavailable>
2585     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2586     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2587     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2588     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2589     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ <unavailable>
2590     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2591     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2592     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2593     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2594     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2595     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2596     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2597     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2598     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2599     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2600     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2601     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2602     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ <unavailable>
2603     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2604     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2605     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2606     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2607     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ <unavailable>
2608     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2609     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2610     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2611     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2612     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2613     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2614     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2615     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2616     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2617     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2618     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2619     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2620     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ <unavailable>
2621     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2622     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2623     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2624     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2625     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ <unavailable>
2626     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2627     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2628     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2629     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2630     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2631     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2632     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2633     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2634     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2635     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2636     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2637     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2638     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ <unavailable>
2639     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2640     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2641     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2642     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2643     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ <unavailable>
2644     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2645     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2646     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2647     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2648     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2649     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2650     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2651     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ <unavailable>
2652     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2653     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2654     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ <unavailable>
2655     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2656     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ <unavailable>
2657     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2658     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2659     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2660     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2661     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2662     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2663     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2664     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ <unavailable>
2665     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2666     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2667     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2668     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2669     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2670     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2671     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2672     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2673     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2674     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2675     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2676     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2677     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2678     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2679     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ <unavailable>
2680     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2681     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2682     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2683     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2684     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2685     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2686     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2687     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ <unavailable>
2688     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2689     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ <unavailable>
2690     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2691     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ <unavailable>
2692     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2693     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2694     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2695     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2696     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ <unavailable>
2697     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2698     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2699     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2700     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2701     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ <unavailable>
2702     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2703     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2704     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ <unavailable>
2705     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2706     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2707     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2708     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2709     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ <unavailable>
2710     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2711     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2712     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2713     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2714     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2715     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2716     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2717     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2718     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2719     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2720     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ <unavailable>
2721     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2722     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2723     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2724     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2725     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ <unavailable>
2726     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2727     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2728     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2729     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2730     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2731     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2732     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2733     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2734     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2735     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2736     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2737     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2738     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2739     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ <unavailable>
2740     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2741     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2742     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2743     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2744     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2745     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2746     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2747     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ <unavailable>
2748     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2749     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2750     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2751     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2752     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2753     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2754     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2755     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2756     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2757     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2758     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2759     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2760     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2761     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2762     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2763     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2764     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2765     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2766     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2767     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ <unavailable>
2768     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2769     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2770     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2771     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2772     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2773     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2774     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2775     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2776     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2777     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2778     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2779     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2780     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2781     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2782     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2783     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2784     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2785     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2786     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2787     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2788     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2789     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2790     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2791     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ <unavailable>
2792     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2793     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2794     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ <unavailable>
2795     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2796     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ <unavailable>
2797     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2798     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2799     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ <unavailable>
2800     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2801     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2802     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2803     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2804     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2805     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ <unavailable>
2806     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2807     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2808     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ <unavailable>
2809     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2810     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2811     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ <unavailable>
2812     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2813     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2814     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2815     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2816     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2817     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2818     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2819     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2820     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2821     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2822     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2823     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2824     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2825     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ <unavailable>
2826     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2827     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ <unavailable>
2828     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2829     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2830     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2831     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2832     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2833     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2834     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2835     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2836     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2837     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2838     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2839     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2840     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2841     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2842     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ <unavailable>
2843     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2844     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2845     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2846     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2847     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2848     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2849     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2850     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2851     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2852     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2853     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2854     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2855     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2856     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2857     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2858     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2859     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2860     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2861     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2862     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2863     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2864     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2865     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2866     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ <unavailable>
2867     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2868     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2869     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ <unavailable>
2870     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2871     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2872     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2873     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2874     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2875     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ <unavailable>
2876     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2877     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2878     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ <unavailable>
2879     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2880     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2881     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2882     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2883     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2884     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2885     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2886     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ <unavailable>
2887     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2888     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2889     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2890     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2891     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2892     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2893     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2894     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2895     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2896     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2897     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2898     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2899     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ <unavailable>
2900     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2901     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2902     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2903     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ <unavailable>
2904     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2905     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2906     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2907     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2908     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2909     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2910     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2911     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2912     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2913     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2914     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2915     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2916     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2917     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2918     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ <unavailable>
2919     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2920     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2921     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2922     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2923     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2924     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ <unavailable>
2925     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2926     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2927     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ <unavailable>
2928     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2929     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2930     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2931     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2932     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2933     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ <unavailable>
2934     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2935     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2936     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2937     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2938     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2939     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2940     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2941     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2942     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2943     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ <unavailable>
2944     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2945     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2946     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2947     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2948     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ <unavailable>
2949     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2950     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ <unavailable>
2951     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2952     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2953     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2954     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2955     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ import sys
2956     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ import fcntl
2957     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2958     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2959     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2960     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ <unavailable>
2961     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2962     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2963     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2964     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2965     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2966     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2967     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2968     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2969     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2970     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2971     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2972     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2973     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2974     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2975     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2976     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2977     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2978     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ <unavailable>
2979     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2980     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2981     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2982     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2983     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2984     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ <unavailable>
2985     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2986     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2987     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2988     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2989     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2990     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2991     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2992     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2993     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2994     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2995     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2996     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2997     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ <unavailable>
2998     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
2999     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ <unavailable>
3000     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
3001     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
3002     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
3003     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
3004     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
3005     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
3006     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
3007     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
3008     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
3009     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
3010     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
3011     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
3012     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
3013     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
3014     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
3015     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ <unavailable>
3016     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
3017     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
3018     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
3019     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
3020     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
3021     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
3022     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
3023     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ <unavailable>
3024     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
3025     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
3026     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ <unavailable>
3027     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
3028     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
3029     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
3030     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
3031     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
3032     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ <unavailable>
3033     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
3034     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
3035     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
3036     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
3037     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
3038     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
3039     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ <unavailable>
3040     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
3041     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
3042     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ <unavailable>
3043     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
3044     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
3045     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
3046     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
3047     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
3048     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ <unavailable>
3049     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
3050     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
3051     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
3052     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
3053     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
3054     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
3055     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
3056     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
3057     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
3058     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
3059     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
3060     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
3061     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
3062     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
3063     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
3064     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ <unavailable>
3065     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
3066     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
3067     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
3068     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
3069     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
3070     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
3071     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
3072     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
3073     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
3074     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ <unavailable>
3075     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
3076     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
3077     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
3078     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
3079     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ <unavailable>
3080     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
3081     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
3082     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
3083     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
3084     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
3085     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
3086     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
3087     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
3088     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
3089     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
3090     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
3091     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
3092     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
3093     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
3094     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ <unavailable>
3095     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
3096     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
3097     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
3098     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
3099     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ <unavailable>
3100     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
3101     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
3102     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
3103     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
3104     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
3105     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
3106     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
3107     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
3108     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
3109     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
3110     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
3111     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
3112     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ <unavailable>
3113     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
3114     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
3115     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
3116     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
3117     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ <unavailable>
3118     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
3119     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
3120     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
3121     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
3122     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
3123     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
3124     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
3125     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
3126     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
3127     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
3128     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
3129     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
3130     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ <unavailable>
3131     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
3132     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
3133     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
3134     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
3135     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ <unavailable>
3136     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
3137     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
3138     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
3139     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
3140     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
3141     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
3142     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
3143     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
3144     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
3145     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
3146     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
3147     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
3148     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ <unavailable>
3149     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
3150     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
3151     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
3152     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
3153     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ <unavailable>
3154     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
3155     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
3156     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
3157     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
3158     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
3159     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
3160     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
3161     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
3162     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
3163     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
3164     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
3165     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
3166     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ <unavailable>
3167     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
3168     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
3169     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
3170     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
3171     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ <unavailable>
3172     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
3173     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
3174     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
3175     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
3176     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
3177     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ <unavailable>
3178     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
3179     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
3180     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
3181     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
3182     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
3183     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
3184     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
3185     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
3186     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
3187     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
3188     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ <unavailable>
3189     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
3190     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
3191     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
3192     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
3193     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
3194     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
3195     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
3196     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
3197     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
3198     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ <unavailable>
3199     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
3200     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
3201     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
3202     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
3203     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
3204     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
3205     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
3206     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
3207     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
3208     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ <unavailable>
3209     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
3210     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
3211     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
3212     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
3213     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ <unavailable>
3214     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
3215     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
3216     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
3217     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
3218     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
3219     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
3220     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
3221     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
3222     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
3223     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
3224     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
3225     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
3226     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
3227     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
3228     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ <unavailable>
3229     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
3230     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
3231     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
3232     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
3233     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ <unavailable>
3234     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
3235     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
3236     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
3237     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
3238     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
3239     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
3240     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
3241     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
3242     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
3243     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
3244     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
3245     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
3246     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ <unavailable>
3247     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
3248     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
3249     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
3250     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
3251     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ <unavailable>
3252     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
3253     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
3254     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
3255     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
3256     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
3257     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
3258     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
3259     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
3260     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
3261     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
3262     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
3263     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
3264     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ <unavailable>
3265     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
3266     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
3267     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
3268     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
3269     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ <unavailable>
3270     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
3271     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
3272     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
3273     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
3274     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
3275     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
3276     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
3277     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
3278     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
3279     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
3280     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
3281     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
3282     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ <unavailable>
3283     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
3284     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
3285     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
3286     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
3287     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ <unavailable>
3288     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
3289     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
3290     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
3291     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
3292     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
3293     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
3294     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
3295     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
3296     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
3297     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
3298     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
3299     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
3300     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ <unavailable>
3301     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
3302     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
3303     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
3304     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
3305     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ <unavailable>
3306     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
3307     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
3308     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
3309     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
3310     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
3311     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ <unavailable>
3312     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
3313     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
3314     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
3315     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
3316     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
3317     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
3318     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
3319     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
3320     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
3321     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
3322     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ <unavailable>
3323     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
3324     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
3325     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
3326     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
3327     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
3328     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
3329     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
3330     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
3331     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
3332     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ <unavailable>
3333     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
3334     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
3335     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
3336     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
3337     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ <unavailable>
3338     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
3339     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
3340     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
3341     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
3342     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
3343     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
3344     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
3345     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
3346     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
3347     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
3348     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
3349     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
3350     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
3351     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
3352     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ <unavailable>
3353     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
3354     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
3355     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
3356     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
3357     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ <unavailable>
3358     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
3359     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
3360     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
3361     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
3362     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
3363     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
3364     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
3365     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ <unavailable>
3366     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
3367     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
3368     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ <unavailable>
3369     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
3370     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ <unavailable>
3371     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
3372     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
3373     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
3374     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
3375     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
3376     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
3377     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
3378     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ <unavailable>
3379     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
3380     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
3381     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
3382     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
3383     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
3384     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
3385     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
3386     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
3387     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
3388     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
3389     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
3390     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
3391     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
3392     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
3393     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ <unavailable>
3394     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
3395     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
3396     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
3397     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
3398     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
3399     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
3400     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
3401     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ <unavailable>
3402     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
3403     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ <unavailable>
3404     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
3405     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ <unavailable>
3406     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
3407     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
3408     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
3409     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
3410     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ <unavailable>
3411     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
3412     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
3413     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
3414     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
3415     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ <unavailable>
3416     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
3417     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
3418     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ <unavailable>
3419     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
3420     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
3421     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
3422     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
3423     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ <unavailable>
3424     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
3425     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
3426     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
3427     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
3428     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
3429     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
3430     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
3431     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
3432     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
3433     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
3434     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
3435     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
3436     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
3437     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ <unavailable>
3438     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
3439     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
3440     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
3441     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
3442     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
3443     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ <unavailable>
3444     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
3445     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
3446     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ <unavailable>
3447     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
3448     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
3449     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
3450     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
3451     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
3452     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
3453     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
3454     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
3455     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
3456     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
3457     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
3458     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
3459     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
3460     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
3461     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ <unavailable>
3462     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
3463     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
3464     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
3465     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
3466     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
3467     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
3468     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
3469     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ <unavailable>
3470     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
3471     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
3472     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
3473     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
3474     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
3475     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
3476     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
3477     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
3478     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
3479     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
3480     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
3481     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
3482     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
3483     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ <unavailable>
3484     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
3485     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
3486     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ <unavailable>
3487     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
3488     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
3489     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ <unavailable>
3490     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
3491     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
3492     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ <unavailable>
3493     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
3494     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
3495     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
3496     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
3497     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
3498     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
3499     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
3500     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
3501     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
3502     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ <unavailable>
3503     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
3504     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
3505     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
3506     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
3507     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
3508     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ <unavailable>
3509     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
3510     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ <unavailable>
3511     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
3512     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
3513     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
3514     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
3515     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
3516     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ <unavailable>
3517     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
3518     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
3519     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
3520     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ <unavailable>
3521     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
3522     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
3523     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
3524     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ <unavailable>
3525     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
3526     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
3527     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
3528     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
3529     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
3530     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
3531     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
3532     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
3533     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
3534     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
3535     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
3536     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ <unavailable>
3537     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
3538     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
3539     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
3540     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
3541     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
3542     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
3543     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
3544     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ <unavailable>
3545     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
3546     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ <unavailable>
3547     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ import fcntl
3548     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ import os
3549     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ termsize = os.get_terminal_size()
3550     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ DOWN_ARROW = [27, 91, 66]
3551     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ UP_ARROW = [27, 91, 65]
3552     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ RIGHT_ARROW = [27, 91, 67]
3553     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ LEFT_ARROW = [27, 91, 68]
3554     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ def write(value):
3555     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ def clear_screen():
3556     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ def reset():
3557     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ def goto(x, y):
3558     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ def print_at(x, y, text):
3559     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ def clear_rect(x, y, width, height):
3560     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ def get_input():
3561     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ def mouse_motion_on():
3562     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ def mouse_motion_off():
3563     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ def mouse_on():
3564     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ def mouse_off():
3565     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ def cursor_on():
3566     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ def cursor_off():
3567     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ def cursor_off():
3568     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
3569     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ <unavailable>
3570     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
3571     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ <unavailable>
3572     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
3573     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
3574     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
3575     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
3576     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
3577     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ <unavailable>
3578     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
3579     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
3580     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
3581     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ <unavailable>
3582     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
3583     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
3584     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
3585     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ <unavailable>
3586     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
3587     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
3588     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
3589     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
3590     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
3591     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
3592     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
3593     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
3594     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
3595     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
3596     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
3597     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ <unavailable>
3598     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
3599     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
3600     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
3601     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
3602     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
3603     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
3604     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
3605     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ <unavailable>
3606     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ <unavailable>
3607     ┃   ┃   ┃   ┃   ┃   ┃   ┗━ <unavailable>
3608     ┃   ┃   ┃   ┃   ┃   ┣━ from term_util import *
3609     ┃   ┃   ┃   ┃   ┃   ┣━ import sys
3610     ┃   ┃   ┃   ┃   ┃   ┣━ logfile = open("ui.log", "a")
3611     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ self.errors = errors
3612     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ self.buffer = ""
3613     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ self.buffer = ""
3614     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ def setstate(self, state):
3615     ┃   ┃   ┃   ┃   ┃   ┃   ┗━ def setstate(self, state):
3616     ┃   ┃   ┃   ┃   ┃   ┣━ logfile = open("ui.log", "a")
3617     ┃   ┃   ┃   ┃   ┃   ┣━ def log(text):
3618     ┃   ┃   ┃   ┃   ┃   ┣━ class Label:
3619     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ class Label:
3620     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ def __init__(self, text):
3621     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ def place(self, x, y, max_width, max_height, stretch, level):
3622     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ def draw(self):
3623     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ def __repr__(self):
3624     ┃   ┃   ┃   ┃   ┃   ┃   ┗━ def __repr__(self):
3625     ┃   ┃   ┃   ┃   ┃   ┣━ class Label:
3626     ┃   ┃   ┃   ┃   ┃   ┣━ class Border:
3627     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ class Border:
3628     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ def __init__(self, content, color=None):
3629     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ def place(self, x, y, max_width, max_height, stretch, level):
3630     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ def draw(self):
3631     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ def __repr__(self):
3632     ┃   ┃   ┃   ┃   ┃   ┃   ┗━ def __repr__(self):
3633     ┃   ┃   ┃   ┃   ┃   ┣━ class Border:
3634     ┃   ┃   ┃   ┃   ┃   ┣━ class Button:
3635     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ class Button:
3636     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ def __init__(self, label, **kwargs):
3637     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ def place(self, x, y, max_width, max_height, stretch, level):
3638     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ def __repr__(self):
3639     ┃   ┃   ┃   ┃   ┃   ┃   ┗━ def __repr__(self):
3640     ┃   ┃   ┃   ┃   ┃   ┣━ class Button:
3641     ┃   ┃   ┃   ┃   ┃   ┣━ class VerticalPanel:
3642     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ class VerticalPanel:
3643     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ def place(self, x, y, max_width, max_height, stretch, level):
3644     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ def child_update(self, child):
3645     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ def draw(self):
3646     ┃   ┃   ┃   ┃   ┃   ┃   ┗━ def draw(self):
3647     ┃   ┃   ┃   ┃   ┃   ┣━ class VerticalPanel:
3648     ┃   ┃   ┃   ┃   ┃   ┣━ class HorizontalPanel:
3649     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ class HorizontalPanel:
3650     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ def place(self, x, y, max_width, max_height, stretch, level):
3651     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ def child_update(self, child):
3652     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ def draw(self):
3653     ┃   ┃   ┃   ┃   ┃   ┃   ┗━ def draw(self):
3654     ┃   ┃   ┃   ┃   ┃   ┣━ class HorizontalPanel:
3655     ┃   ┃   ┃   ┃   ┃   ┣━ class Tree:
3656     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ class Tree:
3657     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ def __init__(self, label):
3658     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ def place(self, x, y, max_width, max_height, stretch, level):
3659     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ def mouseup(self, event):
3660     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ @property
3661     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ def child_nodes(self):
3662     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ def is_root(self):
3663     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ def draw(self):
3664     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ def __repr__(self):
3665     ┃   ┃   ┃   ┃   ┃   ┃   ┗━ def __repr__(self):
3666     ┃   ┃   ┃   ┃   ┃   ┣━ class Tree:
3667     ┃   ┃   ┃   ┃   ┃   ┣━ def add_child(parent, child, stretch=None):
3668     ┃   ┃   ┃   ┃   ┃   ┣━ def remove_child(parent, child):
3669     ┃   ┃   ┃   ┃   ┃   ┣━ def num_children(element):
3670     ┃   ┃   ┃   ┃   ┃   ┣━ def restore(settings):
3671     ┃   ┃   ┃   ┃   ┃   ┣━ def draw(element, level=0):
3672     ┃   ┃   ┃   ┃   ┃   ┣━ def has_stretch_x(element):
3673     ┃   ┃   ┃   ┃   ┃   ┣━ def has_stretch_y(element):
3674     ┃   ┃   ┃   ┃   ┃   ┣━ def get_stretch(element):
3675     ┃   ┃   ┃   ┃   ┃   ┣━ def is_placed(element):
3676     ┃   ┃   ┃   ┃   ┃   ┣━ def unplace(element):
3677     ┃   ┃   ┃   ┃   ┃   ┣━ def contains(element, x, y):
3678     ┃   ┃   ┃   ┃   ┃   ┣━ def fire(element, event, level=0):
3679     ┃   ┃   ┃   ┃   ┃   ┣━ def run(root_element, handler = None):
3680     ┃   ┃   ┃   ┃   ┃   ┗━ def run(root_element, handler = None):
3681     ┃   ┃   ┃   ┃   ┣━ <unavailable>
3682     ┃   ┃   ┃   ┃   ┗━ <unavailable>
3683     ┃   ┃   ┃   ┣━ <unavailable>
3684     ┃   ┃   ┃   ┗━ <unavailable>
3685     ┃   ┃   ┣━ <unavailable>
3686     ┃   ┃   ┣━ <unavailable>
3687     ┃   ┃   ┣━ <unavailable>
3688     ┃   ┃   ┣━ <unavailable>
3689     ┃   ┃   ┃   ┣━ <unavailable>
3690     ┃   ┃   ┃   ┗━ <unavailable>
3691     ┃   ┃   ┣━ <unavailable>
3692     ┃   ┃   ┣━ <unavailable>
3693     ┃   ┃   ┣━ <unavailable>
3694     ┃   ┃   ┗━ <unavailable>
3695     ┃   ┣━ <unavailable>
3696     ┃   ┣━ <unavailable>
3697     ┃   ┣━ <unavailable>
3698     ┃   ┗━ <unavailable>
3699     ┣━ <unavailable>
3700     ┃   ┣━ <unavailable>
3701     ┃   ┃   ┣━ <unavailable>
3702     ┃   ┃   ┣━ <unavailable>
3703     ┃   ┃   ┣━ <unavailable>
3704     ┃   ┃   ┣━ <unavailable>
3705     ┃   ┃   ┣━ <unavailable>
3706     ┃   ┃   ┣━ <unavailable>
3707     ┃   ┃   ┣━ <unavailable>
3708     ┃   ┃   ┣━ <unavailable>
3709     ┃   ┃   ┣━ <unavailable>
3710     ┃   ┃   ┗━ <unavailable>
3711     ┃   ┣━ <unavailable>
3712     ┃   ┣━ <unavailable>
3713     ┃   ┣━ <unavailable>
3714     ┃   ┣━ <unavailable>
3715     ┃   ┣━ <unavailable>
3716     ┃   ┣━ <unavailable>
3717     ┃   ┣━ <unavailable>
3718     ┃   ┗━ <unavailable>
3719     ┣━ <unavailable>
3720     ┗━ <unavailable>
3721    from oui import *
3722    def main():
3723    if __name__ == "__main__":
3724    main()
3725     ┣━ def click1(evt):
3726     ┣━ def click2(evt):
3727     ┣━ def remove_f(evt):
3728     ┣━ panel = VerticalPanel()
3729     ┣━ label = Label("What would you like to do?")
3730     ┃   ┣━ self.text = text
3731     ┃   ┗━ self.text = text
3732     ┣━ label = Label("What would you like to do?")
3733     ┣━ button_panel = HorizontalPanel()
3734     ┣━ click_button = Button(Label("Click here!"), mouseup=click1)
3735     ┃   ┣━ self.text = text
3736     ┃   ┗━ self.text = text
3737     ┣━ click_button = Button(Label("Click here!"), mouseup=click1)
3738     ┃   ┣━ self.label = label
3739     ┃   ┣━ self.border = Border(label)
3740     ┃   ┃   ┣━ self.content = content
3741     ┃   ┃   ┣━ self.color = color
3742     ┃   ┃   ┣━ add_child(self, content)
3743     ┃   ┃   ┃   ┣━ if stretch:
3744     ┃   ┃   ┃   ┣━ child.parent = parent
3745     ┃   ┃   ┃   ┣━ if not hasattr(parent, "children"):
3746     ┃   ┃   ┃   ┣━ parent.children = []
3747     ┃   ┃   ┃   ┣━ parent.children.append(child)
3748     ┃   ┃   ┃   ┗━ parent.children.append(child)
3749     ┃   ┃   ┣━ add_child(self, content)
3750     ┃   ┃   ┗━ add_child(self, content)
3751     ┃   ┣━ self.border = Border(label)
3752     ┃   ┣━ add_child(self, self.border)
3753     ┃   ┃   ┣━ if stretch:
3754     ┃   ┃   ┣━ child.parent = parent
3755     ┃   ┃   ┣━ if not hasattr(parent, "children"):
3756     ┃   ┃   ┣━ parent.children = []
3757     ┃   ┃   ┣━ parent.children.append(child)
3758     ┃   ┃   ┗━ parent.children.append(child)
3759     ┃   ┣━ add_child(self, self.border)
3760     ┃   ┣━ self.__dict__.update(kwargs)
3761     ┃   ┗━ self.__dict__.update(kwargs)
3762     ┣━ click_button = Button(Label("Click here!"), mouseup=click1)
3763     ┣━ dont_click_button = Button(Label("Don't click"), mouseup=remove_f)
3764     ┃   ┣━ self.text = text
3765     ┃   ┗━ self.text = text
3766     ┣━ dont_click_button = Button(Label("Don't click"), mouseup=remove_f)
3767     ┃   ┣━ self.label = label
3768     ┃   ┣━ self.border = Border(label)
3769     ┃   ┃   ┣━ self.content = content
3770     ┃   ┃   ┣━ self.color = color
3771     ┃   ┃   ┣━ add_child(self, content)
3772     ┃   ┃   ┃   ┣━ if stretch:
3773     ┃   ┃   ┃   ┣━ child.parent = parent
3774     ┃   ┃   ┃   ┣━ if not hasattr(parent, "children"):
3775     ┃   ┃   ┃   ┣━ parent.children = []
3776     ┃   ┃   ┃   ┣━ parent.children.append(child)
3777     ┃   ┃   ┃   ┗━ parent.children.append(child)
3778     ┃   ┃   ┣━ add_child(self, content)
3779     ┃   ┃   ┗━ add_child(self, content)
3780     ┃   ┣━ self.border = Border(label)
3781     ┃   ┣━ add_child(self, self.border)
3782     ┃   ┃   ┣━ if stretch:
3783     ┃   ┃   ┣━ child.parent = parent
3784     ┃   ┃   ┣━ if not hasattr(parent, "children"):
3785     ┃   ┃   ┣━ parent.children = []
3786     ┃   ┃   ┣━ parent.children.append(child)
3787     ┃   ┃   ┗━ parent.children.append(child)
3788     ┃   ┣━ add_child(self, self.border)
3789     ┃   ┣━ self.__dict__.update(kwargs)
3790     ┃   ┗━ self.__dict__.update(kwargs)
3791     ┣━ dont_click_button = Button(Label("Don't click"), mouseup=remove_f)
3792     ┣━ add_child(button_panel, click_button)
3793     ┃   ┣━ if stretch:
3794     ┃   ┣━ child.parent = parent
3795     ┃   ┣━ if not hasattr(parent, "children"):
3796     ┃   ┣━ parent.children = []
3797     ┃   ┣━ parent.children.append(child)
3798     ┃   ┗━ parent.children.append(child)
3799     ┣━ add_child(button_panel, click_button)
3800     ┣━ add_child(button_panel, dont_click_button)
3801     ┃   ┣━ if stretch:
3802     ┃   ┣━ child.parent = parent
3803     ┃   ┣━ if not hasattr(parent, "children"):
3804     ┃   ┣━ parent.children.append(child)
3805     ┃   ┗━ parent.children.append(child)
3806     ┣━ add_child(button_panel, dont_click_button)
3807     ┣━ add_child(panel, label)
3808     ┃   ┣━ if stretch:
3809     ┃   ┣━ child.parent = parent
3810     ┃   ┣━ if not hasattr(parent, "children"):
3811     ┃   ┣━ parent.children = []
3812     ┃   ┣━ parent.children.append(child)
3813     ┃   ┗━ parent.children.append(child)
3814     ┣━ add_child(panel, label)
3815     ┣━ add_child(panel, button_panel)
3816     ┃   ┣━ if stretch:
3817     ┃   ┣━ child.parent = parent
3818     ┃   ┣━ if not hasattr(parent, "children"):
3819     ┃   ┣━ parent.children.append(child)
3820     ┃   ┗━ parent.children.append(child)
3821     ┣━ add_child(panel, button_panel)
3822     ┣━ tree_root = Tree(Label("a"))
3823     ┃   ┣━ self.text = text
3824     ┃   ┗━ self.text = text
3825     ┣━ tree_root = Tree(Label("a"))
3826     ┃   ┣━ self.label = label
3827     ┃   ┣━ add_child(self, label)
3828     ┃   ┃   ┣━ if stretch:
3829     ┃   ┃   ┣━ child.parent = parent
3830     ┃   ┃   ┣━ if not hasattr(parent, "children"):
3831     ┃   ┃   ┣━ parent.children = []
3832     ┃   ┃   ┣━ parent.children.append(child)
3833     ┃   ┃   ┗━ parent.children.append(child)
3834     ┃   ┣━ add_child(self, label)
3835     ┃   ┣━ self.expanded = False
3836     ┃   ┗━ self.expanded = False
3837     ┣━ tree_root = Tree(Label("a"))
3838     ┣━ b = Tree(Label("b"))
3839     ┃   ┣━ self.text = text
3840     ┃   ┗━ self.text = text
3841     ┣━ b = Tree(Label("b"))
3842     ┃   ┣━ self.label = label
3843     ┃   ┣━ add_child(self, label)
3844     ┃   ┃   ┣━ if stretch:
3845     ┃   ┃   ┣━ child.parent = parent
3846     ┃   ┃   ┣━ if not hasattr(parent, "children"):
3847     ┃   ┃   ┣━ parent.children = []
3848     ┃   ┃   ┣━ parent.children.append(child)
3849     ┃   ┃   ┗━ parent.children.append(child)
3850     ┃   ┣━ add_child(self, label)
3851     ┃   ┣━ self.expanded = False
3852     ┃   ┗━ self.expanded = False
3853     ┣━ b = Tree(Label("b"))
3854     ┣━ c = Tree(Label("c"))
3855     ┃   ┣━ self.text = text
3856     ┃   ┗━ self.text = text
3857     ┣━ c = Tree(Label("c"))
3858     ┃   ┣━ self.label = label
3859     ┃   ┣━ add_child(self, label)
3860     ┃   ┃   ┣━ if stretch:
3861     ┃   ┃   ┣━ child.parent = parent
3862     ┃   ┃   ┣━ if not hasattr(parent, "children"):
3863     ┃   ┃   ┣━ parent.children = []
3864     ┃   ┃   ┣━ parent.children.append(child)
3865     ┃   ┃   ┗━ parent.children.append(child)
3866     ┃   ┣━ add_child(self, label)
3867     ┃   ┣━ self.expanded = False
3868     ┃   ┗━ self.expanded = False
3869     ┣━ c = Tree(Label("c"))
3870     ┣━ d = Tree(Label("d"))
3871     ┃   ┣━ self.text = text
3872     ┃   ┗━ self.text = text
3873     ┣━ d = Tree(Label("d"))
3874     ┃   ┣━ self.label = label
3875     ┃   ┣━ add_child(self, label)
3876     ┃   ┃   ┣━ if stretch:
3877     ┃   ┃   ┣━ child.parent = parent
3878     ┃   ┃   ┣━ if not hasattr(parent, "children"):
3879     ┃   ┃   ┣━ parent.children = []
3880     ┃   ┃   ┣━ parent.children.append(child)
3881     ┃   ┃   ┗━ parent.children.append(child)
3882     ┃   ┣━ add_child(self, label)
3883     ┃   ┣━ self.expanded = False
3884     ┃   ┗━ self.expanded = False
3885     ┣━ d = Tree(Label("d"))
3886     ┣━ e = Tree(Label("e"))
3887     ┃   ┣━ self.text = text
3888     ┃   ┗━ self.text = text
3889     ┣━ e = Tree(Label("e"))
3890     ┃   ┣━ self.label = label
3891     ┃   ┣━ add_child(self, label)
3892     ┃   ┃   ┣━ if stretch:
3893     ┃   ┃   ┣━ child.parent = parent
3894     ┃   ┃   ┣━ if not hasattr(parent, "children"):
3895     ┃   ┃   ┣━ parent.children = []
3896     ┃   ┃   ┣━ parent.children.append(child)
3897     ┃   ┃   ┗━ parent.children.append(child)
3898     ┃   ┣━ add_child(self, label)
3899     ┃   ┣━ self.expanded = False
3900     ┃   ┗━ self.expanded = False
3901     ┣━ e = Tree(Label("e"))
3902     ┣━ f = Tree(Label("f"))
3903     ┃   ┣━ self.text = text
3904     ┃   ┗━ self.text = text
3905     ┣━ f = Tree(Label("f"))
3906     ┃   ┣━ self.label = label
3907     ┃   ┣━ add_child(self, label)
3908     ┃   ┃   ┣━ if stretch:
3909     ┃   ┃   ┣━ child.parent = parent
3910     ┃   ┃   ┣━ if not hasattr(parent, "children"):
3911     ┃   ┃   ┣━ parent.children = []
3912     ┃   ┃   ┣━ parent.children.append(child)
3913     ┃   ┃   ┗━ parent.children.append(child)
3914     ┃   ┣━ add_child(self, label)
3915     ┃   ┣━ self.expanded = False
3916     ┃   ┗━ self.expanded = False
3917     ┣━ f = Tree(Label("f"))
3918     ┣━ add_child(d, e)
3919     ┃   ┣━ if stretch:
3920     ┃   ┣━ child.parent = parent
3921     ┃   ┣━ if not hasattr(parent, "children"):
3922     ┃   ┣━ parent.children.append(child)
3923     ┃   ┗━ parent.children.append(child)
3924     ┣━ add_child(d, e)
3925     ┣━ add_child(d, f)
3926     ┃   ┣━ if stretch:
3927     ┃   ┣━ child.parent = parent
3928     ┃   ┣━ if not hasattr(parent, "children"):
3929     ┃   ┣━ parent.children.append(child)
3930     ┃   ┗━ parent.children.append(child)
3931     ┣━ add_child(d, f)
3932     ┣━ add_child(tree_root, b)
3933     ┃   ┣━ if stretch:
3934     ┃   ┣━ child.parent = parent
3935     ┃   ┣━ if not hasattr(parent, "children"):
3936     ┃   ┣━ parent.children.append(child)
3937     ┃   ┗━ parent.children.append(child)
3938     ┣━ add_child(tree_root, b)
3939     ┣━ add_child(tree_root, c)
3940     ┃   ┣━ if stretch:
3941     ┃   ┣━ child.parent = parent
3942     ┃   ┣━ if not hasattr(parent, "children"):
3943     ┃   ┣━ parent.children.append(child)
3944     ┃   ┗━ parent.children.append(child)
3945     ┣━ add_child(tree_root, c)
3946     ┣━ add_child(tree_root, d)
3947     ┃   ┣━ if stretch:
3948     ┃   ┣━ child.parent = parent
3949     ┃   ┣━ if not hasattr(parent, "children"):
3950     ┃   ┣━ parent.children.append(child)
3951     ┃   ┗━ parent.children.append(child)
3952     ┣━ add_child(tree_root, d)
3953     ┣━ add_child(panel, tree_root)
3954     ┃   ┣━ if stretch:
3955     ┃   ┣━ child.parent = parent
3956     ┃   ┣━ if not hasattr(parent, "children"):
3957     ┃   ┣━ parent.children.append(child)
3958     ┃   ┗━ parent.children.append(child)
3959     ┣━ add_child(panel, tree_root)
3960     ┣━ quit_label = Label("Press 'q' to quit")
3961     ┃   ┣━ self.text = text
3962     ┃   ┗━ self.text = text
3963     ┣━ quit_label = Label("Press 'q' to quit")
3964     ┣━ add_child(panel, quit_label)
3965     ┃   ┣━ if stretch:
3966     ┃   ┣━ child.parent = parent
3967     ┃   ┣━ if not hasattr(parent, "children"):
3968     ┃   ┣━ parent.children.append(child)
3969     ┃   ┗━ parent.children.append(child)
3970     ┣━ add_child(panel, quit_label)
3971     ┣━ run(panel)
3972     ┃   ┣━ def clean_up():
3973     ┃   ┣━ original_settings = termios.tcgetattr(sys.stdin)
3974     ┃   ┣━ try:
3975     ┃   ┣━ tty.setraw(sys.stdin)
3976     ┃   ┃   ┣━ mode = tcgetattr(fd)
3977     ┃   ┃   ┣━ mode[IFLAG] = mode[IFLAG] & ~(BRKINT | ICRNL | INPCK | ISTRIP | IXON)
3978     ┃   ┃   ┣━ mode[OFLAG] = mode[OFLAG] & ~(OPOST)
3979     ┃   ┃   ┣━ mode[CFLAG] = mode[CFLAG] & ~(CSIZE | PARENB)
3980     ┃   ┃   ┣━ mode[CFLAG] = mode[CFLAG] | CS8
3981     ┃   ┃   ┣━ mode[LFLAG] = mode[LFLAG] & ~(ECHO | ICANON | IEXTEN | ISIG)
3982     ┃   ┃   ┣━ mode[CC][VMIN] = 1
3983     ┃   ┃   ┣━ mode[CC][VTIME] = 0
3984     ┃   ┃   ┣━ tcsetattr(fd, when, mode)
3985     ┃   ┃   ┗━ tcsetattr(fd, when, mode)
3986     ┃   ┣━ tty.setraw(sys.stdin)
3987     ┃   ┣━ clear_screen()
3988     ┃   ┃   ┣━ write('\x1B[0m')
3989     ┃   ┃   ┃   ┣━ print(value, end = '')
3990     ┃   ┃   ┃   ┣━ sys.stdout.flush()
3991     ┃   ┃   ┃   ┗━ sys.stdout.flush()
3992     ┃   ┃   ┣━ write('\x1B[0m')
3993     ┃   ┃   ┣━ write('\x1B[2J')
3994     ┃   ┃   ┃   ┣━ print(value, end = '')
3995     ┃   ┃   ┃   ┣━ sys.stdout.flush()
3996     ┃   ┃   ┃   ┗━ sys.stdout.flush()
3997     ┃   ┃   ┣━ write('\x1B[2J')
3998     ┃   ┃   ┣━ write('\x1Bc')
3999     ┃   ┃   ┃   ┣━ print(value, end = '')
4000     ┃   ┃   ┃   ┣━ sys.stdout.flush()
4001     ┃   ┃   ┃   ┗━ sys.stdout.flush()
4002     ┃   ┃   ┣━ write('\x1Bc')
4003     ┃   ┃   ┗━ write('\x1Bc')
4004     ┃   ┣━ clear_screen()
4005     ┃   ┣━ mouse_on()
4006     ┃   ┃   ┣━ write('\x1B[?1000h')
4007     ┃   ┃   ┃   ┣━ print(value, end = '')
4008     ┃   ┃   ┃   ┣━ sys.stdout.flush()
4009     ┃   ┃   ┃   ┗━ sys.stdout.flush()
4010     ┃   ┃   ┣━ write('\x1B[?1000h')
4011     ┃   ┃   ┗━ write('\x1B[?1000h')
4012     ┃   ┣━ mouse_on()
4013     ┃   ┣━ cursor_off()
4014     ┃   ┃   ┣━ write('\x1B[?25l')
4015     ┃   ┃   ┃   ┣━ print(value, end = '')
4016     ┃   ┃   ┃   ┣━ sys.stdout.flush()
4017     ┃   ┃   ┃   ┗━ sys.stdout.flush()
4018     ┃   ┃   ┣━ write('\x1B[?25l')
4019     ┃   ┃   ┗━ write('\x1B[?25l')
4020     ┃   ┣━ cursor_off()
4021     ┃   ┣━ termsize = os.get_terminal_size()
4022     ┃   ┣━ screen_width = termsize.columns
4023     ┃   ┣━ screen_height = termsize.lines
4024     ┃   ┣━ log("screen_width = %d, screen_height = %d" % (screen_width, screen_height))
4025     ┃   ┃   ┣━ logfile.write(text + "\n")
4026     ┃   ┃   ┣━ logfile.flush()
4027     ┃   ┃   ┗━ logfile.flush()
4028     ┃   ┣━ log("screen_width = %d, screen_height = %d" % (screen_width, screen_height))
4029     ┃   ┣━ root_element.place(1, 1, screen_width, screen_height, get_stretch(root_element), 0)
4030     ┃   ┃   ┣━ return getattr(element, "stretch", None)
4031     ┃   ┃   ┗━ return getattr(element, "stretch", None)
4032     ┃   ┣━ root_element.place(1, 1, screen_width, screen_height, get_stretch(root_element), 0)
4033     ┃   ┃   ┣━ indent = level * "  "
4034     ┃   ┃   ┣━ self.x = x
4035     ┃   ┃   ┣━ self.y = y
4036     ┃   ┃   ┣━ non_stretched = filter(lambda c: not has_stretch_y(c), self.children)
4037     ┃   ┃   ┣━ stretched = filter(has_stretch_y, self.children)
4038     ┃   ┃   ┣━ num_stretched = len(list(stretched))
4039     ┃   ┃   ┃   ┣━ return get_stretch(element) in ["y", "both"]
4040     ┃   ┃   ┃   ┃   ┣━ return getattr(element, "stretch", None)
4041     ┃   ┃   ┃   ┃   ┗━ return getattr(element, "stretch", None)
4042     ┃   ┃   ┃   ┣━ return get_stretch(element) in ["y", "both"]
4043     ┃   ┃   ┃   ┣━ return get_stretch(element) in ["y", "both"]
4044     ┃   ┃   ┃   ┣━ return get_stretch(element) in ["y", "both"]
4045     ┃   ┃   ┃   ┃   ┣━ return getattr(element, "stretch", None)
4046     ┃   ┃   ┃   ┃   ┗━ return getattr(element, "stretch", None)
4047     ┃   ┃   ┃   ┣━ return get_stretch(element) in ["y", "both"]
4048     ┃   ┃   ┃   ┣━ return get_stretch(element) in ["y", "both"]
4049     ┃   ┃   ┃   ┣━ return get_stretch(element) in ["y", "both"]
4050     ┃   ┃   ┃   ┃   ┣━ return getattr(element, "stretch", None)
4051     ┃   ┃   ┃   ┃   ┗━ return getattr(element, "stretch", None)
4052     ┃   ┃   ┃   ┣━ return get_stretch(element) in ["y", "both"]
4053     ┃   ┃   ┃   ┣━ return get_stretch(element) in ["y", "both"]
4054     ┃   ┃   ┃   ┣━ return get_stretch(element) in ["y", "both"]
4055     ┃   ┃   ┃   ┃   ┣━ return getattr(element, "stretch", None)
4056     ┃   ┃   ┃   ┃   ┗━ return getattr(element, "stretch", None)
4057     ┃   ┃   ┃   ┣━ return get_stretch(element) in ["y", "both"]
4058     ┃   ┃   ┃   ┗━ return get_stretch(element) in ["y", "both"]
4059     ┃   ┃   ┣━ num_stretched = len(list(stretched))
4060     ┃   ┃   ┣━ non_stretched_height = 0
4061     ┃   ┃   ┣━ for child in non_stretched:
4062     ┃   ┃   ┃   ┣━ non_stretched = filter(lambda c: not has_stretch_y(c), self.children)
4063     ┃   ┃   ┃   ┃   ┣━ return get_stretch(element) in ["y", "both"]
4064     ┃   ┃   ┃   ┃   ┃   ┣━ return getattr(element, "stretch", None)
4065     ┃   ┃   ┃   ┃   ┃   ┗━ return getattr(element, "stretch", None)
4066     ┃   ┃   ┃   ┃   ┣━ return get_stretch(element) in ["y", "both"]
4067     ┃   ┃   ┃   ┃   ┗━ return get_stretch(element) in ["y", "both"]
4068     ┃   ┃   ┃   ┣━ non_stretched = filter(lambda c: not has_stretch_y(c), self.children)
4069     ┃   ┃   ┃   ┗━ non_stretched = filter(lambda c: not has_stretch_y(c), self.children)
4070     ┃   ┃   ┣━ for child in non_stretched:
4071     ┃   ┃   ┣━ child.place(self.x, self.y, max_width, max_height, None, level + 1)
4072     ┃   ┃   ┃   ┣━ indent = level * "  "
4073     ┃   ┃   ┃   ┣━ self.x = x
4074     ┃   ┃   ┃   ┣━ self.y = y
4075     ┃   ┃   ┃   ┣━ if stretch in ["x", "both"]:
4076     ┃   ┃   ┃   ┣━ self.width = min(max_width, len(self.text))
4077     ┃   ┃   ┃   ┣━ if stretch in ["y", "both"]:
4078     ┃   ┃   ┃   ┣━ self.height = 1
4079     ┃   ┃   ┃   ┗━ self.height = 1
4080     ┃   ┃   ┣━ child.place(self.x, self.y, max_width, max_height, None, level + 1)
4081     ┃   ┃   ┣━ non_stretched_height += child.height
4082     ┃   ┃   ┣━ for child in non_stretched:
4083     ┃   ┃   ┃   ┣━ non_stretched = filter(lambda c: not has_stretch_y(c), self.children)
4084     ┃   ┃   ┃   ┃   ┣━ return get_stretch(element) in ["y", "both"]
4085     ┃   ┃   ┃   ┃   ┃   ┣━ return getattr(element, "stretch", None)
4086     ┃   ┃   ┃   ┃   ┃   ┗━ return getattr(element, "stretch", None)
4087     ┃   ┃   ┃   ┃   ┣━ return get_stretch(element) in ["y", "both"]
4088     ┃   ┃   ┃   ┃   ┗━ return get_stretch(element) in ["y", "both"]
4089     ┃   ┃   ┃   ┣━ non_stretched = filter(lambda c: not has_stretch_y(c), self.children)
4090     ┃   ┃   ┃   ┗━ non_stretched = filter(lambda c: not has_stretch_y(c), self.children)
4091     ┃   ┃   ┣━ for child in non_stretched:
4092     ┃   ┃   ┣━ child.place(self.x, self.y, max_width, max_height, None, level + 1)
4093     ┃   ┃   ┃   ┣━ indent = level * "  "
4094     ┃   ┃   ┃   ┣━ self.x = x
4095     ┃   ┃   ┃   ┣━ self.y = y
4096     ┃   ┃   ┃   ┣━ non_stretched = filter(lambda c: not has_stretch_x(c), self.children)
4097     ┃   ┃   ┃   ┣━ stretched = filter(has_stretch_x, self.children)
4098     ┃   ┃   ┃   ┣━ num_stretched = len(list(stretched))
4099     ┃   ┃   ┃   ┃   ┣━ return get_stretch(element) in ["x", "both"]
4100     ┃   ┃   ┃   ┃   ┃   ┣━ return getattr(element, "stretch", None)
4101     ┃   ┃   ┃   ┃   ┃   ┗━ return getattr(element, "stretch", None)
4102     ┃   ┃   ┃   ┃   ┣━ return get_stretch(element) in ["x", "both"]
4103     ┃   ┃   ┃   ┃   ┣━ return get_stretch(element) in ["x", "both"]
4104     ┃   ┃   ┃   ┃   ┣━ return get_stretch(element) in ["x", "both"]
4105     ┃   ┃   ┃   ┃   ┃   ┣━ return getattr(element, "stretch", None)
4106     ┃   ┃   ┃   ┃   ┃   ┗━ return getattr(element, "stretch", None)
4107     ┃   ┃   ┃   ┃   ┣━ return get_stretch(element) in ["x", "both"]
4108     ┃   ┃   ┃   ┃   ┗━ return get_stretch(element) in ["x", "both"]
4109     ┃   ┃   ┃   ┣━ num_stretched = len(list(stretched))
4110     ┃   ┃   ┃   ┣━ non_stretch_width = 0
4111     ┃   ┃   ┃   ┣━ for child in non_stretched:
4112     ┃   ┃   ┃   ┃   ┣━ non_stretched = filter(lambda c: not has_stretch_x(c), self.children)
4113     ┃   ┃   ┃   ┃   ┃   ┣━ return get_stretch(element) in ["x", "both"]
4114     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ return getattr(element, "stretch", None)
4115     ┃   ┃   ┃   ┃   ┃   ┃   ┗━ return getattr(element, "stretch", None)
4116     ┃   ┃   ┃   ┃   ┃   ┣━ return get_stretch(element) in ["x", "both"]
4117     ┃   ┃   ┃   ┃   ┃   ┗━ return get_stretch(element) in ["x", "both"]
4118     ┃   ┃   ┃   ┃   ┣━ non_stretched = filter(lambda c: not has_stretch_x(c), self.children)
4119     ┃   ┃   ┃   ┃   ┗━ non_stretched = filter(lambda c: not has_stretch_x(c), self.children)
4120     ┃   ┃   ┃   ┣━ for child in non_stretched:
4121     ┃   ┃   ┃   ┣━ child.place(self.x, self.y, max_width, max_height, None, level + 1)
4122     ┃   ┃   ┃   ┃   ┣━ indent = level * "  "
4123     ┃   ┃   ┃   ┃   ┣━ self.border.place(x, y, max_width, max_height, stretch, level + 1)
4124     ┃   ┃   ┃   ┃   ┃   ┣━ indent = level * "  "
4125     ┃   ┃   ┃   ┃   ┃   ┣━ self.x = x
4126     ┃   ┃   ┃   ┃   ┃   ┣━ self.y = y
4127     ┃   ┃   ┃   ┃   ┃   ┣━ self.content.place(x + 1, y + 1, max_width - 2, max_height - 2, stretch, level + 1)
4128     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ indent = level * "  "
4129     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ self.x = x
4130     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ self.y = y
4131     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ if stretch in ["x", "both"]:
4132     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ self.width = min(max_width, len(self.text))
4133     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ if stretch in ["y", "both"]:
4134     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ self.height = 1
4135     ┃   ┃   ┃   ┃   ┃   ┃   ┗━ self.height = 1
4136     ┃   ┃   ┃   ┃   ┃   ┣━ self.content.place(x + 1, y + 1, max_width - 2, max_height - 2, stretch, level + 1)
4137     ┃   ┃   ┃   ┃   ┃   ┣━ self.width = self.content.width + 2
4138     ┃   ┃   ┃   ┃   ┃   ┣━ self.height = self.content.height + 2
4139     ┃   ┃   ┃   ┃   ┃   ┗━ self.height = self.content.height + 2
4140     ┃   ┃   ┃   ┃   ┣━ self.border.place(x, y, max_width, max_height, stretch, level + 1)
4141     ┃   ┃   ┃   ┃   ┣━ self.x = x
4142     ┃   ┃   ┃   ┃   ┣━ self.y = y
4143     ┃   ┃   ┃   ┃   ┣━ self.width = self.border.width
4144     ┃   ┃   ┃   ┃   ┣━ self.height = self.border.height
4145     ┃   ┃   ┃   ┃   ┗━ self.height = self.border.height
4146     ┃   ┃   ┃   ┣━ child.place(self.x, self.y, max_width, max_height, None, level + 1)
4147     ┃   ┃   ┃   ┣━ non_stretch_width += child.width
4148     ┃   ┃   ┃   ┣━ for child in non_stretched:
4149     ┃   ┃   ┃   ┃   ┣━ non_stretched = filter(lambda c: not has_stretch_x(c), self.children)
4150     ┃   ┃   ┃   ┃   ┃   ┣━ return get_stretch(element) in ["x", "both"]
4151     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ return getattr(element, "stretch", None)
4152     ┃   ┃   ┃   ┃   ┃   ┃   ┗━ return getattr(element, "stretch", None)
4153     ┃   ┃   ┃   ┃   ┃   ┣━ return get_stretch(element) in ["x", "both"]
4154     ┃   ┃   ┃   ┃   ┃   ┗━ return get_stretch(element) in ["x", "both"]
4155     ┃   ┃   ┃   ┃   ┣━ non_stretched = filter(lambda c: not has_stretch_x(c), self.children)
4156     ┃   ┃   ┃   ┃   ┗━ non_stretched = filter(lambda c: not has_stretch_x(c), self.children)
4157     ┃   ┃   ┃   ┣━ for child in non_stretched:
4158     ┃   ┃   ┃   ┣━ child.place(self.x, self.y, max_width, max_height, None, level + 1)
4159     ┃   ┃   ┃   ┃   ┣━ indent = level * "  "
4160     ┃   ┃   ┃   ┃   ┣━ self.border.place(x, y, max_width, max_height, stretch, level + 1)
4161     ┃   ┃   ┃   ┃   ┃   ┣━ indent = level * "  "
4162     ┃   ┃   ┃   ┃   ┃   ┣━ self.x = x
4163     ┃   ┃   ┃   ┃   ┃   ┣━ self.y = y
4164     ┃   ┃   ┃   ┃   ┃   ┣━ self.content.place(x + 1, y + 1, max_width - 2, max_height - 2, stretch, level + 1)
4165     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ indent = level * "  "
4166     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ self.x = x
4167     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ self.y = y
4168     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ if stretch in ["x", "both"]:
4169     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ self.width = min(max_width, len(self.text))
4170     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ if stretch in ["y", "both"]:
4171     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ self.height = 1
4172     ┃   ┃   ┃   ┃   ┃   ┃   ┗━ self.height = 1
4173     ┃   ┃   ┃   ┃   ┃   ┣━ self.content.place(x + 1, y + 1, max_width - 2, max_height - 2, stretch, level + 1)
4174     ┃   ┃   ┃   ┃   ┃   ┣━ self.width = self.content.width + 2
4175     ┃   ┃   ┃   ┃   ┃   ┣━ self.height = self.content.height + 2
4176     ┃   ┃   ┃   ┃   ┃   ┗━ self.height = self.content.height + 2
4177     ┃   ┃   ┃   ┃   ┣━ self.border.place(x, y, max_width, max_height, stretch, level + 1)
4178     ┃   ┃   ┃   ┃   ┣━ self.x = x
4179     ┃   ┃   ┃   ┃   ┣━ self.y = y
4180     ┃   ┃   ┃   ┃   ┣━ self.width = self.border.width
4181     ┃   ┃   ┃   ┃   ┣━ self.height = self.border.height
4182     ┃   ┃   ┃   ┃   ┗━ self.height = self.border.height
4183     ┃   ┃   ┃   ┣━ child.place(self.x, self.y, max_width, max_height, None, level + 1)
4184     ┃   ┃   ┃   ┣━ non_stretch_width += child.width
4185     ┃   ┃   ┃   ┣━ for child in non_stretched:
4186     ┃   ┃   ┃   ┣━ stretch_width = max_width - non_stretch_width
4187     ┃   ┃   ┃   ┣━ stretch_width_per = (stretch_width // num_stretched) if num_stretched > 0 else 0
4188     ┃   ┃   ┃   ┣━ x_offset = 0
4189     ┃   ┃   ┃   ┣━ my_height = 0
4190     ┃   ┃   ┃   ┣━ for child in self.children:
4191     ┃   ┃   ┃   ┣━ if has_stretch_x(child):
4192     ┃   ┃   ┃   ┃   ┣━ return get_stretch(element) in ["x", "both"]
4193     ┃   ┃   ┃   ┃   ┃   ┣━ return getattr(element, "stretch", None)
4194     ┃   ┃   ┃   ┃   ┃   ┗━ return getattr(element, "stretch", None)
4195     ┃   ┃   ┃   ┃   ┣━ return get_stretch(element) in ["x", "both"]
4196     ┃   ┃   ┃   ┃   ┗━ return get_stretch(element) in ["x", "both"]
4197     ┃   ┃   ┃   ┣━ if has_stretch_x(child):
4198     ┃   ┃   ┃   ┣━ log(indent + "(B)")
4199     ┃   ┃   ┃   ┃   ┣━ logfile.write(text + "\n")
4200     ┃   ┃   ┃   ┃   ┣━ logfile.flush()
4201     ┃   ┃   ┃   ┃   ┗━ logfile.flush()
4202     ┃   ┃   ┃   ┣━ log(indent + "(B)")
4203     ┃   ┃   ┃   ┣━ child.place(self.x + x_offset, self.y, 
4204     ┃   ┃   ┃   ┣━ max_width - x_offset, max_height, 
4205     ┃   ┃   ┃   ┣━ get_stretch(child), level + 1)
4206     ┃   ┃   ┃   ┃   ┣━ return getattr(element, "stretch", None)
4207     ┃   ┃   ┃   ┃   ┗━ return getattr(element, "stretch", None)
4208     ┃   ┃   ┃   ┣━ get_stretch(child), level + 1)
4209     ┃   ┃   ┃   ┣━ child.place(self.x + x_offset, self.y, 
4210     ┃   ┃   ┃   ┃   ┣━ indent = level * "  "
4211     ┃   ┃   ┃   ┃   ┣━ self.border.place(x, y, max_width, max_height, stretch, level + 1)
4212     ┃   ┃   ┃   ┃   ┃   ┣━ indent = level * "  "
4213     ┃   ┃   ┃   ┃   ┃   ┣━ self.x = x
4214     ┃   ┃   ┃   ┃   ┃   ┣━ self.y = y
4215     ┃   ┃   ┃   ┃   ┃   ┣━ self.content.place(x + 1, y + 1, max_width - 2, max_height - 2, stretch, level + 1)
4216     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ indent = level * "  "
4217     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ self.x = x
4218     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ self.y = y
4219     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ if stretch in ["x", "both"]:
4220     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ self.width = min(max_width, len(self.text))
4221     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ if stretch in ["y", "both"]:
4222     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ self.height = 1
4223     ┃   ┃   ┃   ┃   ┃   ┃   ┗━ self.height = 1
4224     ┃   ┃   ┃   ┃   ┃   ┣━ self.content.place(x + 1, y + 1, max_width - 2, max_height - 2, stretch, level + 1)
4225     ┃   ┃   ┃   ┃   ┃   ┣━ self.width = self.content.width + 2
4226     ┃   ┃   ┃   ┃   ┃   ┣━ self.height = self.content.height + 2
4227     ┃   ┃   ┃   ┃   ┃   ┗━ self.height = self.content.height + 2
4228     ┃   ┃   ┃   ┃   ┣━ self.border.place(x, y, max_width, max_height, stretch, level + 1)
4229     ┃   ┃   ┃   ┃   ┣━ self.x = x
4230     ┃   ┃   ┃   ┃   ┣━ self.y = y
4231     ┃   ┃   ┃   ┃   ┣━ self.width = self.border.width
4232     ┃   ┃   ┃   ┃   ┣━ self.height = self.border.height
4233     ┃   ┃   ┃   ┃   ┗━ self.height = self.border.height
4234     ┃   ┃   ┃   ┣━ child.place(self.x + x_offset, self.y, 
4235     ┃   ┃   ┃   ┣━ x_offset += child.width
4236     ┃   ┃   ┃   ┣━ if child.height > my_height:
4237     ┃   ┃   ┃   ┣━ my_height = child.height
4238     ┃   ┃   ┃   ┣━ if x_offset >= max_width:
4239     ┃   ┃   ┃   ┣━ for child in self.children:
4240     ┃   ┃   ┃   ┣━ if has_stretch_x(child):
4241     ┃   ┃   ┃   ┃   ┣━ return get_stretch(element) in ["x", "both"]
4242     ┃   ┃   ┃   ┃   ┃   ┣━ return getattr(element, "stretch", None)
4243     ┃   ┃   ┃   ┃   ┃   ┗━ return getattr(element, "stretch", None)
4244     ┃   ┃   ┃   ┃   ┣━ return get_stretch(element) in ["x", "both"]
4245     ┃   ┃   ┃   ┃   ┗━ return get_stretch(element) in ["x", "both"]
4246     ┃   ┃   ┃   ┣━ if has_stretch_x(child):
4247     ┃   ┃   ┃   ┣━ log(indent + "(B)")
4248     ┃   ┃   ┃   ┃   ┣━ logfile.write(text + "\n")
4249     ┃   ┃   ┃   ┃   ┣━ logfile.flush()
4250     ┃   ┃   ┃   ┃   ┗━ logfile.flush()
4251     ┃   ┃   ┃   ┣━ log(indent + "(B)")
4252     ┃   ┃   ┃   ┣━ child.place(self.x + x_offset, self.y, 
4253     ┃   ┃   ┃   ┣━ max_width - x_offset, max_height, 
4254     ┃   ┃   ┃   ┣━ get_stretch(child), level + 1)
4255     ┃   ┃   ┃   ┃   ┣━ return getattr(element, "stretch", None)
4256     ┃   ┃   ┃   ┃   ┗━ return getattr(element, "stretch", None)
4257     ┃   ┃   ┃   ┣━ get_stretch(child), level + 1)
4258     ┃   ┃   ┃   ┣━ child.place(self.x + x_offset, self.y, 
4259     ┃   ┃   ┃   ┃   ┣━ indent = level * "  "
4260     ┃   ┃   ┃   ┃   ┣━ self.border.place(x, y, max_width, max_height, stretch, level + 1)
4261     ┃   ┃   ┃   ┃   ┃   ┣━ indent = level * "  "
4262     ┃   ┃   ┃   ┃   ┃   ┣━ self.x = x
4263     ┃   ┃   ┃   ┃   ┃   ┣━ self.y = y
4264     ┃   ┃   ┃   ┃   ┃   ┣━ self.content.place(x + 1, y + 1, max_width - 2, max_height - 2, stretch, level + 1)
4265     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ indent = level * "  "
4266     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ self.x = x
4267     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ self.y = y
4268     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ if stretch in ["x", "both"]:
4269     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ self.width = min(max_width, len(self.text))
4270     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ if stretch in ["y", "both"]:
4271     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ self.height = 1
4272     ┃   ┃   ┃   ┃   ┃   ┃   ┗━ self.height = 1
4273     ┃   ┃   ┃   ┃   ┃   ┣━ self.content.place(x + 1, y + 1, max_width - 2, max_height - 2, stretch, level + 1)
4274     ┃   ┃   ┃   ┃   ┃   ┣━ self.width = self.content.width + 2
4275     ┃   ┃   ┃   ┃   ┃   ┣━ self.height = self.content.height + 2
4276     ┃   ┃   ┃   ┃   ┃   ┗━ self.height = self.content.height + 2
4277     ┃   ┃   ┃   ┃   ┣━ self.border.place(x, y, max_width, max_height, stretch, level + 1)
4278     ┃   ┃   ┃   ┃   ┣━ self.x = x
4279     ┃   ┃   ┃   ┃   ┣━ self.y = y
4280     ┃   ┃   ┃   ┃   ┣━ self.width = self.border.width
4281     ┃   ┃   ┃   ┃   ┣━ self.height = self.border.height
4282     ┃   ┃   ┃   ┃   ┗━ self.height = self.border.height
4283     ┃   ┃   ┃   ┣━ child.place(self.x + x_offset, self.y, 
4284     ┃   ┃   ┃   ┣━ x_offset += child.width
4285     ┃   ┃   ┃   ┣━ if child.height > my_height:
4286     ┃   ┃   ┃   ┣━ if x_offset >= max_width:
4287     ┃   ┃   ┃   ┣━ for child in self.children:
4288     ┃   ┃   ┃   ┣━ if stretch in ["x", "both"]:
4289     ┃   ┃   ┃   ┣━ self.width = min(max_width, x_offset)
4290     ┃   ┃   ┃   ┣━ if stretch in ["y", "both"]:
4291     ┃   ┃   ┃   ┣━ self.height = min(max_height, my_height)
4292     ┃   ┃   ┃   ┗━ self.height = min(max_height, my_height)
4293     ┃   ┃   ┣━ child.place(self.x, self.y, max_width, max_height, None, level + 1)
4294     ┃   ┃   ┣━ non_stretched_height += child.height
4295     ┃   ┃   ┣━ for child in non_stretched:
4296     ┃   ┃   ┃   ┣━ non_stretched = filter(lambda c: not has_stretch_y(c), self.children)
4297     ┃   ┃   ┃   ┃   ┣━ return get_stretch(element) in ["y", "both"]
4298     ┃   ┃   ┃   ┃   ┃   ┣━ return getattr(element, "stretch", None)
4299     ┃   ┃   ┃   ┃   ┃   ┗━ return getattr(element, "stretch", None)
4300     ┃   ┃   ┃   ┃   ┣━ return get_stretch(element) in ["y", "both"]
4301     ┃   ┃   ┃   ┃   ┗━ return get_stretch(element) in ["y", "both"]
4302     ┃   ┃   ┃   ┣━ non_stretched = filter(lambda c: not has_stretch_y(c), self.children)
4303     ┃   ┃   ┃   ┗━ non_stretched = filter(lambda c: not has_stretch_y(c), self.children)
4304     ┃   ┃   ┣━ for child in non_stretched:
4305     ┃   ┃   ┣━ child.place(self.x, self.y, max_width, max_height, None, level + 1)
4306     ┃   ┃   ┃   ┣━ logindent = level * "  "
4307     ┃   ┃   ┃   ┣━ self.x = x
4308     ┃   ┃   ┃   ┣━ self.y = y
4309     ┃   ┃   ┃   ┣━ self.height = max_height
4310     ┃   ┃   ┃   ┣━ y_offset = 0
4311     ┃   ┃   ┃   ┣━ indent = 2
4312     ┃   ┃   ┃   ┣━ self.label.place(x + indent, self.y, max_width - indent, max_height, stretch, level + 1)
4313     ┃   ┃   ┃   ┃   ┣━ indent = level * "  "
4314     ┃   ┃   ┃   ┃   ┣━ self.x = x
4315     ┃   ┃   ┃   ┃   ┣━ self.y = y
4316     ┃   ┃   ┃   ┃   ┣━ if stretch in ["x", "both"]:
4317     ┃   ┃   ┃   ┃   ┣━ self.width = min(max_width, len(self.text))
4318     ┃   ┃   ┃   ┃   ┣━ if stretch in ["y", "both"]:
4319     ┃   ┃   ┃   ┃   ┣━ self.height = 1
4320     ┃   ┃   ┃   ┃   ┗━ self.height = 1
4321     ┃   ┃   ┃   ┣━ self.label.place(x + indent, self.y, max_width - indent, max_height, stretch, level + 1)
4322     ┃   ┃   ┃   ┣━ self.width = self.label.width + indent
4323     ┃   ┃   ┃   ┣━ y_offset += self.label.height
4324     ┃   ┃   ┃   ┣━ if self.expanded:
4325     ┃   ┃   ┃   ┣━ for child in self.child_nodes:
4326     ┃   ┃   ┃   ┃   ┣━ return filter(lambda c: c != self.label, self.children)
4327     ┃   ┃   ┃   ┃   ┗━ return filter(lambda c: c != self.label, self.children)
4328     ┃   ┃   ┃   ┣━ for child in self.child_nodes:
4329     ┃   ┃   ┃   ┃   ┣━ return filter(lambda c: c != self.label, self.children)
4330     ┃   ┃   ┃   ┃   ┣━ return filter(lambda c: c != self.label, self.children)
4331     ┃   ┃   ┃   ┃   ┣━ return filter(lambda c: c != self.label, self.children)
4332     ┃   ┃   ┃   ┃   ┗━ return filter(lambda c: c != self.label, self.children)
4333     ┃   ┃   ┃   ┣━ for child in self.child_nodes:
4334     ┃   ┃   ┃   ┣━ unplace(child)
4335     ┃   ┃   ┃   ┃   ┣━ attrs = ["width", "height", "x", "y"]
4336     ┃   ┃   ┃   ┃   ┣━ for attr in attrs:
4337     ┃   ┃   ┃   ┃   ┣━ if hasattr(element, attr):
4338     ┃   ┃   ┃   ┃   ┣━ for attr in attrs:
4339     ┃   ┃   ┃   ┃   ┣━ if hasattr(element, attr):
4340     ┃   ┃   ┃   ┃   ┣━ for attr in attrs:
4341     ┃   ┃   ┃   ┃   ┣━ if hasattr(element, attr):
4342     ┃   ┃   ┃   ┃   ┣━ for attr in attrs:
4343     ┃   ┃   ┃   ┃   ┣━ if hasattr(element, attr):
4344     ┃   ┃   ┃   ┃   ┣━ for attr in attrs:
4345     ┃   ┃   ┃   ┃   ┗━ for attr in attrs:
4346     ┃   ┃   ┃   ┣━ unplace(child)
4347     ┃   ┃   ┃   ┣━ for child in self.child_nodes:
4348     ┃   ┃   ┃   ┃   ┣━ return filter(lambda c: c != self.label, self.children)
4349     ┃   ┃   ┃   ┃   ┗━ return filter(lambda c: c != self.label, self.children)
4350     ┃   ┃   ┃   ┣━ for child in self.child_nodes:
4351     ┃   ┃   ┃   ┣━ unplace(child)
4352     ┃   ┃   ┃   ┃   ┣━ attrs = ["width", "height", "x", "y"]
4353     ┃   ┃   ┃   ┃   ┣━ for attr in attrs:
4354     ┃   ┃   ┃   ┃   ┣━ if hasattr(element, attr):
4355     ┃   ┃   ┃   ┃   ┣━ for attr in attrs:
4356     ┃   ┃   ┃   ┃   ┣━ if hasattr(element, attr):
4357     ┃   ┃   ┃   ┃   ┣━ for attr in attrs:
4358     ┃   ┃   ┃   ┃   ┣━ if hasattr(element, attr):
4359     ┃   ┃   ┃   ┃   ┣━ for attr in attrs:
4360     ┃   ┃   ┃   ┃   ┣━ if hasattr(element, attr):
4361     ┃   ┃   ┃   ┃   ┣━ for attr in attrs:
4362     ┃   ┃   ┃   ┃   ┗━ for attr in attrs:
4363     ┃   ┃   ┃   ┣━ unplace(child)
4364     ┃   ┃   ┃   ┣━ for child in self.child_nodes:
4365     ┃   ┃   ┃   ┃   ┣━ return filter(lambda c: c != self.label, self.children)
4366     ┃   ┃   ┃   ┃   ┗━ return filter(lambda c: c != self.label, self.children)
4367     ┃   ┃   ┃   ┣━ for child in self.child_nodes:
4368     ┃   ┃   ┃   ┣━ unplace(child)
4369     ┃   ┃   ┃   ┃   ┣━ attrs = ["width", "height", "x", "y"]
4370     ┃   ┃   ┃   ┃   ┣━ for attr in attrs:
4371     ┃   ┃   ┃   ┃   ┣━ if hasattr(element, attr):
4372     ┃   ┃   ┃   ┃   ┣━ for attr in attrs:
4373     ┃   ┃   ┃   ┃   ┣━ if hasattr(element, attr):
4374     ┃   ┃   ┃   ┃   ┣━ for attr in attrs:
4375     ┃   ┃   ┃   ┃   ┣━ if hasattr(element, attr):
4376     ┃   ┃   ┃   ┃   ┣━ for attr in attrs:
4377     ┃   ┃   ┃   ┃   ┣━ if hasattr(element, attr):
4378     ┃   ┃   ┃   ┃   ┣━ for attr in attrs:
4379     ┃   ┃   ┃   ┃   ┗━ for attr in attrs:
4380     ┃   ┃   ┃   ┣━ unplace(child)
4381     ┃   ┃   ┃   ┣━ for child in self.child_nodes:
4382     ┃   ┃   ┃   ┣━ self.height = self.label.height
4383     ┃   ┃   ┃   ┗━ self.height = self.label.height
4384     ┃   ┃   ┣━ child.place(self.x, self.y, max_width, max_height, None, level + 1)
4385     ┃   ┃   ┣━ non_stretched_height += child.height
4386     ┃   ┃   ┣━ for child in non_stretched:
4387     ┃   ┃   ┃   ┣━ non_stretched = filter(lambda c: not has_stretch_y(c), self.children)
4388     ┃   ┃   ┃   ┃   ┣━ return get_stretch(element) in ["y", "both"]
4389     ┃   ┃   ┃   ┃   ┃   ┣━ return getattr(element, "stretch", None)
4390     ┃   ┃   ┃   ┃   ┃   ┗━ return getattr(element, "stretch", None)
4391     ┃   ┃   ┃   ┃   ┣━ return get_stretch(element) in ["y", "both"]
4392     ┃   ┃   ┃   ┃   ┗━ return get_stretch(element) in ["y", "both"]
4393     ┃   ┃   ┃   ┣━ non_stretched = filter(lambda c: not has_stretch_y(c), self.children)
4394     ┃   ┃   ┃   ┗━ non_stretched = filter(lambda c: not has_stretch_y(c), self.children)
4395     ┃   ┃   ┣━ for child in non_stretched:
4396     ┃   ┃   ┣━ child.place(self.x, self.y, max_width, max_height, None, level + 1)
4397     ┃   ┃   ┃   ┣━ indent = level * "  "
4398     ┃   ┃   ┃   ┣━ self.x = x
4399     ┃   ┃   ┃   ┣━ self.y = y
4400     ┃   ┃   ┃   ┣━ if stretch in ["x", "both"]:
4401     ┃   ┃   ┃   ┣━ self.width = min(max_width, len(self.text))
4402     ┃   ┃   ┃   ┣━ if stretch in ["y", "both"]:
4403     ┃   ┃   ┃   ┣━ self.height = 1
4404     ┃   ┃   ┃   ┗━ self.height = 1
4405     ┃   ┃   ┣━ child.place(self.x, self.y, max_width, max_height, None, level + 1)
4406     ┃   ┃   ┣━ non_stretched_height += child.height
4407     ┃   ┃   ┣━ for child in non_stretched:
4408     ┃   ┃   ┣━ stretched_height = max_height - non_stretched_height
4409     ┃   ┃   ┣━ stretched_height_per = (stretched_height // num_stretched) if num_stretched > 0 else 0
4410     ┃   ┃   ┣━ y_offset = 0
4411     ┃   ┃   ┣━ my_width = 0
4412     ┃   ┃   ┣━ for child in self.children:
4413     ┃   ┃   ┣━ if has_stretch_y(child):
4414     ┃   ┃   ┃   ┣━ return get_stretch(element) in ["y", "both"]
4415     ┃   ┃   ┃   ┃   ┣━ return getattr(element, "stretch", None)
4416     ┃   ┃   ┃   ┃   ┗━ return getattr(element, "stretch", None)
4417     ┃   ┃   ┃   ┣━ return get_stretch(element) in ["y", "both"]
4418     ┃   ┃   ┃   ┗━ return get_stretch(element) in ["y", "both"]
4419     ┃   ┃   ┣━ if has_stretch_y(child):
4420     ┃   ┃   ┣━ child.place(self.x, self.y + y_offset, 
4421     ┃   ┃   ┣━ max_width, max_height - y_offset, 
4422     ┃   ┃   ┣━ get_stretch(child), level + 1)
4423     ┃   ┃   ┃   ┣━ return getattr(element, "stretch", None)
4424     ┃   ┃   ┃   ┗━ return getattr(element, "stretch", None)
4425     ┃   ┃   ┣━ get_stretch(child), level + 1)
4426     ┃   ┃   ┣━ child.place(self.x, self.y + y_offset, 
4427     ┃   ┃   ┃   ┣━ indent = level * "  "
4428     ┃   ┃   ┃   ┣━ self.x = x
4429     ┃   ┃   ┃   ┣━ self.y = y
4430     ┃   ┃   ┃   ┣━ if stretch in ["x", "both"]:
4431     ┃   ┃   ┃   ┣━ self.width = min(max_width, len(self.text))
4432     ┃   ┃   ┃   ┣━ if stretch in ["y", "both"]:
4433     ┃   ┃   ┃   ┣━ self.height = 1
4434     ┃   ┃   ┃   ┗━ self.height = 1
4435     ┃   ┃   ┣━ child.place(self.x, self.y + y_offset, 
4436     ┃   ┃   ┣━ y_offset += child.height
4437     ┃   ┃   ┣━ if child.width > my_width:
4438     ┃   ┃   ┣━ my_width = child.width
4439     ┃   ┃   ┣━ if y_offset >= max_height:
4440     ┃   ┃   ┣━ for child in self.children:
4441     ┃   ┃   ┣━ if has_stretch_y(child):
4442     ┃   ┃   ┃   ┣━ return get_stretch(element) in ["y", "both"]
4443     ┃   ┃   ┃   ┃   ┣━ return getattr(element, "stretch", None)
4444     ┃   ┃   ┃   ┃   ┗━ return getattr(element, "stretch", None)
4445     ┃   ┃   ┃   ┣━ return get_stretch(element) in ["y", "both"]
4446     ┃   ┃   ┃   ┗━ return get_stretch(element) in ["y", "both"]
4447     ┃   ┃   ┣━ if has_stretch_y(child):
4448     ┃   ┃   ┣━ child.place(self.x, self.y + y_offset, 
4449     ┃   ┃   ┣━ max_width, max_height - y_offset, 
4450     ┃   ┃   ┣━ get_stretch(child), level + 1)
4451     ┃   ┃   ┃   ┣━ return getattr(element, "stretch", None)
4452     ┃   ┃   ┃   ┗━ return getattr(element, "stretch", None)
4453     ┃   ┃   ┣━ get_stretch(child), level + 1)
4454     ┃   ┃   ┣━ child.place(self.x, self.y + y_offset, 
4455     ┃   ┃   ┃   ┣━ indent = level * "  "
4456     ┃   ┃   ┃   ┣━ self.x = x
4457     ┃   ┃   ┃   ┣━ self.y = y
4458     ┃   ┃   ┃   ┣━ non_stretched = filter(lambda c: not has_stretch_x(c), self.children)
4459     ┃   ┃   ┃   ┣━ stretched = filter(has_stretch_x, self.children)
4460     ┃   ┃   ┃   ┣━ num_stretched = len(list(stretched))
4461     ┃   ┃   ┃   ┃   ┣━ return get_stretch(element) in ["x", "both"]
4462     ┃   ┃   ┃   ┃   ┃   ┣━ return getattr(element, "stretch", None)
4463     ┃   ┃   ┃   ┃   ┃   ┗━ return getattr(element, "stretch", None)
4464     ┃   ┃   ┃   ┃   ┣━ return get_stretch(element) in ["x", "both"]
4465     ┃   ┃   ┃   ┃   ┣━ return get_stretch(element) in ["x", "both"]
4466     ┃   ┃   ┃   ┃   ┣━ return get_stretch(element) in ["x", "both"]
4467     ┃   ┃   ┃   ┃   ┃   ┣━ return getattr(element, "stretch", None)
4468     ┃   ┃   ┃   ┃   ┃   ┗━ return getattr(element, "stretch", None)
4469     ┃   ┃   ┃   ┃   ┣━ return get_stretch(element) in ["x", "both"]
4470     ┃   ┃   ┃   ┃   ┗━ return get_stretch(element) in ["x", "both"]
4471     ┃   ┃   ┃   ┣━ num_stretched = len(list(stretched))
4472     ┃   ┃   ┃   ┣━ non_stretch_width = 0
4473     ┃   ┃   ┃   ┣━ for child in non_stretched:
4474     ┃   ┃   ┃   ┃   ┣━ non_stretched = filter(lambda c: not has_stretch_x(c), self.children)
4475     ┃   ┃   ┃   ┃   ┃   ┣━ return get_stretch(element) in ["x", "both"]
4476     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ return getattr(element, "stretch", None)
4477     ┃   ┃   ┃   ┃   ┃   ┃   ┗━ return getattr(element, "stretch", None)
4478     ┃   ┃   ┃   ┃   ┃   ┣━ return get_stretch(element) in ["x", "both"]
4479     ┃   ┃   ┃   ┃   ┃   ┗━ return get_stretch(element) in ["x", "both"]
4480     ┃   ┃   ┃   ┃   ┣━ non_stretched = filter(lambda c: not has_stretch_x(c), self.children)
4481     ┃   ┃   ┃   ┃   ┗━ non_stretched = filter(lambda c: not has_stretch_x(c), self.children)
4482     ┃   ┃   ┃   ┣━ for child in non_stretched:
4483     ┃   ┃   ┃   ┣━ child.place(self.x, self.y, max_width, max_height, None, level + 1)
4484     ┃   ┃   ┃   ┃   ┣━ indent = level * "  "
4485     ┃   ┃   ┃   ┃   ┣━ self.border.place(x, y, max_width, max_height, stretch, level + 1)
4486     ┃   ┃   ┃   ┃   ┃   ┣━ indent = level * "  "
4487     ┃   ┃   ┃   ┃   ┃   ┣━ self.x = x
4488     ┃   ┃   ┃   ┃   ┃   ┣━ self.y = y
4489     ┃   ┃   ┃   ┃   ┃   ┣━ self.content.place(x + 1, y + 1, max_width - 2, max_height - 2, stretch, level + 1)
4490     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ indent = level * "  "
4491     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ self.x = x
4492     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ self.y = y
4493     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ if stretch in ["x", "both"]:
4494     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ self.width = min(max_width, len(self.text))
4495     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ if stretch in ["y", "both"]:
4496     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ self.height = 1
4497     ┃   ┃   ┃   ┃   ┃   ┃   ┗━ self.height = 1
4498     ┃   ┃   ┃   ┃   ┃   ┣━ self.content.place(x + 1, y + 1, max_width - 2, max_height - 2, stretch, level + 1)
4499     ┃   ┃   ┃   ┃   ┃   ┣━ self.width = self.content.width + 2
4500     ┃   ┃   ┃   ┃   ┃   ┣━ self.height = self.content.height + 2
4501     ┃   ┃   ┃   ┃   ┃   ┗━ self.height = self.content.height + 2
4502     ┃   ┃   ┃   ┃   ┣━ self.border.place(x, y, max_width, max_height, stretch, level + 1)
4503     ┃   ┃   ┃   ┃   ┣━ self.x = x
4504     ┃   ┃   ┃   ┃   ┣━ self.y = y
4505     ┃   ┃   ┃   ┃   ┣━ self.width = self.border.width
4506     ┃   ┃   ┃   ┃   ┣━ self.height = self.border.height
4507     ┃   ┃   ┃   ┃   ┗━ self.height = self.border.height
4508     ┃   ┃   ┃   ┣━ child.place(self.x, self.y, max_width, max_height, None, level + 1)
4509     ┃   ┃   ┃   ┣━ non_stretch_width += child.width
4510     ┃   ┃   ┃   ┣━ for child in non_stretched:
4511     ┃   ┃   ┃   ┃   ┣━ non_stretched = filter(lambda c: not has_stretch_x(c), self.children)
4512     ┃   ┃   ┃   ┃   ┃   ┣━ return get_stretch(element) in ["x", "both"]
4513     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ return getattr(element, "stretch", None)
4514     ┃   ┃   ┃   ┃   ┃   ┃   ┗━ return getattr(element, "stretch", None)
4515     ┃   ┃   ┃   ┃   ┃   ┣━ return get_stretch(element) in ["x", "both"]
4516     ┃   ┃   ┃   ┃   ┃   ┗━ return get_stretch(element) in ["x", "both"]
4517     ┃   ┃   ┃   ┃   ┣━ non_stretched = filter(lambda c: not has_stretch_x(c), self.children)
4518     ┃   ┃   ┃   ┃   ┗━ non_stretched = filter(lambda c: not has_stretch_x(c), self.children)
4519     ┃   ┃   ┃   ┣━ for child in non_stretched:
4520     ┃   ┃   ┃   ┣━ child.place(self.x, self.y, max_width, max_height, None, level + 1)
4521     ┃   ┃   ┃   ┃   ┣━ indent = level * "  "
4522     ┃   ┃   ┃   ┃   ┣━ self.border.place(x, y, max_width, max_height, stretch, level + 1)
4523     ┃   ┃   ┃   ┃   ┃   ┣━ indent = level * "  "
4524     ┃   ┃   ┃   ┃   ┃   ┣━ self.x = x
4525     ┃   ┃   ┃   ┃   ┃   ┣━ self.y = y
4526     ┃   ┃   ┃   ┃   ┃   ┣━ self.content.place(x + 1, y + 1, max_width - 2, max_height - 2, stretch, level + 1)
4527     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ indent = level * "  "
4528     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ self.x = x
4529     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ self.y = y
4530     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ if stretch in ["x", "both"]:
4531     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ self.width = min(max_width, len(self.text))
4532     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ if stretch in ["y", "both"]:
4533     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ self.height = 1
4534     ┃   ┃   ┃   ┃   ┃   ┃   ┗━ self.height = 1
4535     ┃   ┃   ┃   ┃   ┃   ┣━ self.content.place(x + 1, y + 1, max_width - 2, max_height - 2, stretch, level + 1)
4536     ┃   ┃   ┃   ┃   ┃   ┣━ self.width = self.content.width + 2
4537     ┃   ┃   ┃   ┃   ┃   ┣━ self.height = self.content.height + 2
4538     ┃   ┃   ┃   ┃   ┃   ┗━ self.height = self.content.height + 2
4539     ┃   ┃   ┃   ┃   ┣━ self.border.place(x, y, max_width, max_height, stretch, level + 1)
4540     ┃   ┃   ┃   ┃   ┣━ self.x = x
4541     ┃   ┃   ┃   ┃   ┣━ self.y = y
4542     ┃   ┃   ┃   ┃   ┣━ self.width = self.border.width
4543     ┃   ┃   ┃   ┃   ┣━ self.height = self.border.height
4544     ┃   ┃   ┃   ┃   ┗━ self.height = self.border.height
4545     ┃   ┃   ┃   ┣━ child.place(self.x, self.y, max_width, max_height, None, level + 1)
4546     ┃   ┃   ┃   ┣━ non_stretch_width += child.width
4547     ┃   ┃   ┃   ┣━ for child in non_stretched:
4548     ┃   ┃   ┃   ┣━ stretch_width = max_width - non_stretch_width
4549     ┃   ┃   ┃   ┣━ stretch_width_per = (stretch_width // num_stretched) if num_stretched > 0 else 0
4550     ┃   ┃   ┃   ┣━ x_offset = 0
4551     ┃   ┃   ┃   ┣━ my_height = 0
4552     ┃   ┃   ┃   ┣━ for child in self.children:
4553     ┃   ┃   ┃   ┣━ if has_stretch_x(child):
4554     ┃   ┃   ┃   ┃   ┣━ return get_stretch(element) in ["x", "both"]
4555     ┃   ┃   ┃   ┃   ┃   ┣━ return getattr(element, "stretch", None)
4556     ┃   ┃   ┃   ┃   ┃   ┗━ return getattr(element, "stretch", None)
4557     ┃   ┃   ┃   ┃   ┣━ return get_stretch(element) in ["x", "both"]
4558     ┃   ┃   ┃   ┃   ┗━ return get_stretch(element) in ["x", "both"]
4559     ┃   ┃   ┃   ┣━ if has_stretch_x(child):
4560     ┃   ┃   ┃   ┣━ log(indent + "(B)")
4561     ┃   ┃   ┃   ┃   ┣━ logfile.write(text + "\n")
4562     ┃   ┃   ┃   ┃   ┣━ logfile.flush()
4563     ┃   ┃   ┃   ┃   ┗━ logfile.flush()
4564     ┃   ┃   ┃   ┣━ log(indent + "(B)")
4565     ┃   ┃   ┃   ┣━ child.place(self.x + x_offset, self.y, 
4566     ┃   ┃   ┃   ┣━ max_width - x_offset, max_height, 
4567     ┃   ┃   ┃   ┣━ get_stretch(child), level + 1)
4568     ┃   ┃   ┃   ┃   ┣━ return getattr(element, "stretch", None)
4569     ┃   ┃   ┃   ┃   ┗━ return getattr(element, "stretch", None)
4570     ┃   ┃   ┃   ┣━ get_stretch(child), level + 1)
4571     ┃   ┃   ┃   ┣━ child.place(self.x + x_offset, self.y, 
4572     ┃   ┃   ┃   ┃   ┣━ indent = level * "  "
4573     ┃   ┃   ┃   ┃   ┣━ self.border.place(x, y, max_width, max_height, stretch, level + 1)
4574     ┃   ┃   ┃   ┃   ┃   ┣━ indent = level * "  "
4575     ┃   ┃   ┃   ┃   ┃   ┣━ self.x = x
4576     ┃   ┃   ┃   ┃   ┃   ┣━ self.y = y
4577     ┃   ┃   ┃   ┃   ┃   ┣━ self.content.place(x + 1, y + 1, max_width - 2, max_height - 2, stretch, level + 1)
4578     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ indent = level * "  "
4579     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ self.x = x
4580     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ self.y = y
4581     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ if stretch in ["x", "both"]:
4582     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ self.width = min(max_width, len(self.text))
4583     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ if stretch in ["y", "both"]:
4584     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ self.height = 1
4585     ┃   ┃   ┃   ┃   ┃   ┃   ┗━ self.height = 1
4586     ┃   ┃   ┃   ┃   ┃   ┣━ self.content.place(x + 1, y + 1, max_width - 2, max_height - 2, stretch, level + 1)
4587     ┃   ┃   ┃   ┃   ┃   ┣━ self.width = self.content.width + 2
4588     ┃   ┃   ┃   ┃   ┃   ┣━ self.height = self.content.height + 2
4589     ┃   ┃   ┃   ┃   ┃   ┗━ self.height = self.content.height + 2
4590     ┃   ┃   ┃   ┃   ┣━ self.border.place(x, y, max_width, max_height, stretch, level + 1)
4591     ┃   ┃   ┃   ┃   ┣━ self.x = x
4592     ┃   ┃   ┃   ┃   ┣━ self.y = y
4593     ┃   ┃   ┃   ┃   ┣━ self.width = self.border.width
4594     ┃   ┃   ┃   ┃   ┣━ self.height = self.border.height
4595     ┃   ┃   ┃   ┃   ┗━ self.height = self.border.height
4596     ┃   ┃   ┃   ┣━ child.place(self.x + x_offset, self.y, 
4597     ┃   ┃   ┃   ┣━ x_offset += child.width
4598     ┃   ┃   ┃   ┣━ if child.height > my_height:
4599     ┃   ┃   ┃   ┣━ my_height = child.height
4600     ┃   ┃   ┃   ┣━ if x_offset >= max_width:
4601     ┃   ┃   ┃   ┣━ for child in self.children:
4602     ┃   ┃   ┃   ┣━ if has_stretch_x(child):
4603     ┃   ┃   ┃   ┃   ┣━ return get_stretch(element) in ["x", "both"]
4604     ┃   ┃   ┃   ┃   ┃   ┣━ return getattr(element, "stretch", None)
4605     ┃   ┃   ┃   ┃   ┃   ┗━ return getattr(element, "stretch", None)
4606     ┃   ┃   ┃   ┃   ┣━ return get_stretch(element) in ["x", "both"]
4607     ┃   ┃   ┃   ┃   ┗━ return get_stretch(element) in ["x", "both"]
4608     ┃   ┃   ┃   ┣━ if has_stretch_x(child):
4609     ┃   ┃   ┃   ┣━ log(indent + "(B)")
4610     ┃   ┃   ┃   ┃   ┣━ logfile.write(text + "\n")
4611     ┃   ┃   ┃   ┃   ┣━ logfile.flush()
4612     ┃   ┃   ┃   ┃   ┗━ logfile.flush()
4613     ┃   ┃   ┃   ┣━ log(indent + "(B)")
4614     ┃   ┃   ┃   ┣━ child.place(self.x + x_offset, self.y, 
4615     ┃   ┃   ┃   ┣━ max_width - x_offset, max_height, 
4616     ┃   ┃   ┃   ┣━ get_stretch(child), level + 1)
4617     ┃   ┃   ┃   ┃   ┣━ return getattr(element, "stretch", None)
4618     ┃   ┃   ┃   ┃   ┗━ return getattr(element, "stretch", None)
4619     ┃   ┃   ┃   ┣━ get_stretch(child), level + 1)
4620     ┃   ┃   ┃   ┣━ child.place(self.x + x_offset, self.y, 
4621     ┃   ┃   ┃   ┃   ┣━ indent = level * "  "
4622     ┃   ┃   ┃   ┃   ┣━ self.border.place(x, y, max_width, max_height, stretch, level + 1)
4623     ┃   ┃   ┃   ┃   ┃   ┣━ indent = level * "  "
4624     ┃   ┃   ┃   ┃   ┃   ┣━ self.x = x
4625     ┃   ┃   ┃   ┃   ┃   ┣━ self.y = y
4626     ┃   ┃   ┃   ┃   ┃   ┣━ self.content.place(x + 1, y + 1, max_width - 2, max_height - 2, stretch, level + 1)
4627     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ indent = level * "  "
4628     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ self.x = x
4629     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ self.y = y
4630     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ if stretch in ["x", "both"]:
4631     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ self.width = min(max_width, len(self.text))
4632     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ if stretch in ["y", "both"]:
4633     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ self.height = 1
4634     ┃   ┃   ┃   ┃   ┃   ┃   ┗━ self.height = 1
4635     ┃   ┃   ┃   ┃   ┃   ┣━ self.content.place(x + 1, y + 1, max_width - 2, max_height - 2, stretch, level + 1)
4636     ┃   ┃   ┃   ┃   ┃   ┣━ self.width = self.content.width + 2
4637     ┃   ┃   ┃   ┃   ┃   ┣━ self.height = self.content.height + 2
4638     ┃   ┃   ┃   ┃   ┃   ┗━ self.height = self.content.height + 2
4639     ┃   ┃   ┃   ┃   ┣━ self.border.place(x, y, max_width, max_height, stretch, level + 1)
4640     ┃   ┃   ┃   ┃   ┣━ self.x = x
4641     ┃   ┃   ┃   ┃   ┣━ self.y = y
4642     ┃   ┃   ┃   ┃   ┣━ self.width = self.border.width
4643     ┃   ┃   ┃   ┃   ┣━ self.height = self.border.height
4644     ┃   ┃   ┃   ┃   ┗━ self.height = self.border.height
4645     ┃   ┃   ┃   ┣━ child.place(self.x + x_offset, self.y, 
4646     ┃   ┃   ┃   ┣━ x_offset += child.width
4647     ┃   ┃   ┃   ┣━ if child.height > my_height:
4648     ┃   ┃   ┃   ┣━ if x_offset >= max_width:
4649     ┃   ┃   ┃   ┣━ for child in self.children:
4650     ┃   ┃   ┃   ┣━ if stretch in ["x", "both"]:
4651     ┃   ┃   ┃   ┣━ self.width = min(max_width, x_offset)
4652     ┃   ┃   ┃   ┣━ if stretch in ["y", "both"]:
4653     ┃   ┃   ┃   ┣━ self.height = min(max_height, my_height)
4654     ┃   ┃   ┃   ┗━ self.height = min(max_height, my_height)
4655     ┃   ┃   ┣━ child.place(self.x, self.y + y_offset, 
4656     ┃   ┃   ┣━ y_offset += child.height
4657     ┃   ┃   ┣━ if child.width > my_width:
4658     ┃   ┃   ┣━ if y_offset >= max_height:
4659     ┃   ┃   ┣━ for child in self.children:
4660     ┃   ┃   ┣━ if has_stretch_y(child):
4661     ┃   ┃   ┃   ┣━ return get_stretch(element) in ["y", "both"]
4662     ┃   ┃   ┃   ┃   ┣━ return getattr(element, "stretch", None)
4663     ┃   ┃   ┃   ┃   ┗━ return getattr(element, "stretch", None)
4664     ┃   ┃   ┃   ┣━ return get_stretch(element) in ["y", "both"]
4665     ┃   ┃   ┃   ┗━ return get_stretch(element) in ["y", "both"]
4666     ┃   ┃   ┣━ if has_stretch_y(child):
4667     ┃   ┃   ┣━ child.place(self.x, self.y + y_offset, 
4668     ┃   ┃   ┣━ max_width, max_height - y_offset, 
4669     ┃   ┃   ┣━ get_stretch(child), level + 1)
4670     ┃   ┃   ┃   ┣━ return getattr(element, "stretch", None)
4671     ┃   ┃   ┃   ┗━ return getattr(element, "stretch", None)
4672     ┃   ┃   ┣━ get_stretch(child), level + 1)
4673     ┃   ┃   ┣━ child.place(self.x, self.y + y_offset, 
4674     ┃   ┃   ┃   ┣━ logindent = level * "  "
4675     ┃   ┃   ┃   ┣━ self.x = x
4676     ┃   ┃   ┃   ┣━ self.y = y
4677     ┃   ┃   ┃   ┣━ self.height = max_height
4678     ┃   ┃   ┃   ┣━ y_offset = 0
4679     ┃   ┃   ┃   ┣━ indent = 2
4680     ┃   ┃   ┃   ┣━ self.label.place(x + indent, self.y, max_width - indent, max_height, stretch, level + 1)
4681     ┃   ┃   ┃   ┃   ┣━ indent = level * "  "
4682     ┃   ┃   ┃   ┃   ┣━ self.x = x
4683     ┃   ┃   ┃   ┃   ┣━ self.y = y
4684     ┃   ┃   ┃   ┃   ┣━ if stretch in ["x", "both"]:
4685     ┃   ┃   ┃   ┃   ┣━ self.width = min(max_width, len(self.text))
4686     ┃   ┃   ┃   ┃   ┣━ if stretch in ["y", "both"]:
4687     ┃   ┃   ┃   ┃   ┣━ self.height = 1
4688     ┃   ┃   ┃   ┃   ┗━ self.height = 1
4689     ┃   ┃   ┃   ┣━ self.label.place(x + indent, self.y, max_width - indent, max_height, stretch, level + 1)
4690     ┃   ┃   ┃   ┣━ self.width = self.label.width + indent
4691     ┃   ┃   ┃   ┣━ y_offset += self.label.height
4692     ┃   ┃   ┃   ┣━ if self.expanded:
4693     ┃   ┃   ┃   ┣━ for child in self.child_nodes:
4694     ┃   ┃   ┃   ┃   ┣━ return filter(lambda c: c != self.label, self.children)
4695     ┃   ┃   ┃   ┃   ┗━ return filter(lambda c: c != self.label, self.children)
4696     ┃   ┃   ┃   ┣━ for child in self.child_nodes:
4697     ┃   ┃   ┃   ┃   ┣━ return filter(lambda c: c != self.label, self.children)
4698     ┃   ┃   ┃   ┃   ┣━ return filter(lambda c: c != self.label, self.children)
4699     ┃   ┃   ┃   ┃   ┣━ return filter(lambda c: c != self.label, self.children)
4700     ┃   ┃   ┃   ┃   ┗━ return filter(lambda c: c != self.label, self.children)
4701     ┃   ┃   ┃   ┣━ for child in self.child_nodes:
4702     ┃   ┃   ┃   ┣━ unplace(child)
4703     ┃   ┃   ┃   ┃   ┣━ attrs = ["width", "height", "x", "y"]
4704     ┃   ┃   ┃   ┃   ┣━ for attr in attrs:
4705     ┃   ┃   ┃   ┃   ┣━ if hasattr(element, attr):
4706     ┃   ┃   ┃   ┃   ┣━ for attr in attrs:
4707     ┃   ┃   ┃   ┃   ┣━ if hasattr(element, attr):
4708     ┃   ┃   ┃   ┃   ┣━ for attr in attrs:
4709     ┃   ┃   ┃   ┃   ┣━ if hasattr(element, attr):
4710     ┃   ┃   ┃   ┃   ┣━ for attr in attrs:
4711     ┃   ┃   ┃   ┃   ┣━ if hasattr(element, attr):
4712     ┃   ┃   ┃   ┃   ┣━ for attr in attrs:
4713     ┃   ┃   ┃   ┃   ┗━ for attr in attrs:
4714     ┃   ┃   ┃   ┣━ unplace(child)
4715     ┃   ┃   ┃   ┣━ for child in self.child_nodes:
4716     ┃   ┃   ┃   ┃   ┣━ return filter(lambda c: c != self.label, self.children)
4717     ┃   ┃   ┃   ┃   ┗━ return filter(lambda c: c != self.label, self.children)
4718     ┃   ┃   ┃   ┣━ for child in self.child_nodes:
4719     ┃   ┃   ┃   ┣━ unplace(child)
4720     ┃   ┃   ┃   ┃   ┣━ attrs = ["width", "height", "x", "y"]
4721     ┃   ┃   ┃   ┃   ┣━ for attr in attrs:
4722     ┃   ┃   ┃   ┃   ┣━ if hasattr(element, attr):
4723     ┃   ┃   ┃   ┃   ┣━ for attr in attrs:
4724     ┃   ┃   ┃   ┃   ┣━ if hasattr(element, attr):
4725     ┃   ┃   ┃   ┃   ┣━ for attr in attrs:
4726     ┃   ┃   ┃   ┃   ┣━ if hasattr(element, attr):
4727     ┃   ┃   ┃   ┃   ┣━ for attr in attrs:
4728     ┃   ┃   ┃   ┃   ┣━ if hasattr(element, attr):
4729     ┃   ┃   ┃   ┃   ┣━ for attr in attrs:
4730     ┃   ┃   ┃   ┃   ┗━ for attr in attrs:
4731     ┃   ┃   ┃   ┣━ unplace(child)
4732     ┃   ┃   ┃   ┣━ for child in self.child_nodes:
4733     ┃   ┃   ┃   ┃   ┣━ return filter(lambda c: c != self.label, self.children)
4734     ┃   ┃   ┃   ┃   ┗━ return filter(lambda c: c != self.label, self.children)
4735     ┃   ┃   ┃   ┣━ for child in self.child_nodes:
4736     ┃   ┃   ┃   ┣━ unplace(child)
4737     ┃   ┃   ┃   ┃   ┣━ attrs = ["width", "height", "x", "y"]
4738     ┃   ┃   ┃   ┃   ┣━ for attr in attrs:
4739     ┃   ┃   ┃   ┃   ┣━ if hasattr(element, attr):
4740     ┃   ┃   ┃   ┃   ┣━ for attr in attrs:
4741     ┃   ┃   ┃   ┃   ┣━ if hasattr(element, attr):
4742     ┃   ┃   ┃   ┃   ┣━ for attr in attrs:
4743     ┃   ┃   ┃   ┃   ┣━ if hasattr(element, attr):
4744     ┃   ┃   ┃   ┃   ┣━ for attr in attrs:
4745     ┃   ┃   ┃   ┃   ┣━ if hasattr(element, attr):
4746     ┃   ┃   ┃   ┃   ┣━ for attr in attrs:
4747     ┃   ┃   ┃   ┃   ┗━ for attr in attrs:
4748     ┃   ┃   ┃   ┣━ unplace(child)
4749     ┃   ┃   ┃   ┣━ for child in self.child_nodes:
4750     ┃   ┃   ┃   ┣━ self.height = self.label.height
4751     ┃   ┃   ┃   ┗━ self.height = self.label.height
4752     ┃   ┃   ┣━ child.place(self.x, self.y + y_offset, 
4753     ┃   ┃   ┣━ y_offset += child.height
4754     ┃   ┃   ┣━ if child.width > my_width:
4755     ┃   ┃   ┣━ if y_offset >= max_height:
4756     ┃   ┃   ┣━ for child in self.children:
4757     ┃   ┃   ┣━ if has_stretch_y(child):
4758     ┃   ┃   ┃   ┣━ return get_stretch(element) in ["y", "both"]
4759     ┃   ┃   ┃   ┃   ┣━ return getattr(element, "stretch", None)
4760     ┃   ┃   ┃   ┃   ┗━ return getattr(element, "stretch", None)
4761     ┃   ┃   ┃   ┣━ return get_stretch(element) in ["y", "both"]
4762     ┃   ┃   ┃   ┗━ return get_stretch(element) in ["y", "both"]
4763     ┃   ┃   ┣━ if has_stretch_y(child):
4764     ┃   ┃   ┣━ child.place(self.x, self.y + y_offset, 
4765     ┃   ┃   ┣━ max_width, max_height - y_offset, 
4766     ┃   ┃   ┣━ get_stretch(child), level + 1)
4767     ┃   ┃   ┃   ┣━ return getattr(element, "stretch", None)
4768     ┃   ┃   ┃   ┗━ return getattr(element, "stretch", None)
4769     ┃   ┃   ┣━ get_stretch(child), level + 1)
4770     ┃   ┃   ┣━ child.place(self.x, self.y + y_offset, 
4771     ┃   ┃   ┃   ┣━ indent = level * "  "
4772     ┃   ┃   ┃   ┣━ self.x = x
4773     ┃   ┃   ┃   ┣━ self.y = y
4774     ┃   ┃   ┃   ┣━ if stretch in ["x", "both"]:
4775     ┃   ┃   ┃   ┣━ self.width = min(max_width, len(self.text))
4776     ┃   ┃   ┃   ┣━ if stretch in ["y", "both"]:
4777     ┃   ┃   ┃   ┣━ self.height = 1
4778     ┃   ┃   ┃   ┗━ self.height = 1
4779     ┃   ┃   ┣━ child.place(self.x, self.y + y_offset, 
4780     ┃   ┃   ┣━ y_offset += child.height
4781     ┃   ┃   ┣━ if child.width > my_width:
4782     ┃   ┃   ┣━ if y_offset >= max_height:
4783     ┃   ┃   ┣━ for child in self.children:
4784     ┃   ┃   ┣━ if stretch in ["x", "both"]:
4785     ┃   ┃   ┣━ self.width = min(max_width, my_width)
4786     ┃   ┃   ┣━ if stretch in ["y", "both"]:
4787     ┃   ┃   ┣━ self.height = min(max_height, y_offset)
4788     ┃   ┃   ┗━ self.height = min(max_height, y_offset)
4789     ┃   ┣━ root_element.place(1, 1, screen_width, screen_height, get_stretch(root_element), 0)
4790     ┃   ┣━ draw(root_element)
4791     ┃   ┃   ┣━ termsize = os.get_terminal_size()
4792     ┃   ┃   ┣━ screen_width = termsize.columns
4793     ┃   ┃   ┣━ screen_height = termsize.lines
4794     ┃   ┃   ┣━ indent = "  " * level
4795     ┃   ┃   ┣━ if not is_placed(element):
4796     ┃   ┃   ┃   ┣━ return hasattr(element, "x") and hasattr(element, "y") \
4797     ┃   ┃   ┃   ┣━ and hasattr(element, "width") and hasattr(element, "height")
4798     ┃   ┃   ┃   ┣━ return hasattr(element, "x") and hasattr(element, "y") \
4799     ┃   ┃   ┃   ┣━ and hasattr(element, "width") and hasattr(element, "height")
4800     ┃   ┃   ┃   ┣━ return hasattr(element, "x") and hasattr(element, "y") \
4801     ┃   ┃   ┃   ┗━ return hasattr(element, "x") and hasattr(element, "y") \
4802     ┃   ┃   ┣━ if not is_placed(element):
4803     ┃   ┃   ┣━ elif element.x <= screen_width and element.y <= screen_height:
4804     ┃   ┃   ┣━ if hasattr(element, "draw"):
4805     ┃   ┃   ┣━ element.draw()
4806     ┃   ┃   ┃   ┣━ clear_rect(self.x, self.y, self.width, self.height)
4807     ┃   ┃   ┃   ┃   ┣━ for i in range(height):
4808     ┃   ┃   ┃   ┃   ┣━ print_at(x, y + i, " " * width)
4809     ┃   ┃   ┃   ┃   ┃   ┣━ goto(x, y)
4810     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ write('\x1B[%d;%df' % (y, x))
4811     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ print(value, end = '')
4812     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ sys.stdout.flush()
4813     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ sys.stdout.flush()
4814     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ write('\x1B[%d;%df' % (y, x))
4815     ┃   ┃   ┃   ┃   ┃   ┃   ┗━ write('\x1B[%d;%df' % (y, x))
4816     ┃   ┃   ┃   ┃   ┃   ┣━ goto(x, y)
4817     ┃   ┃   ┃   ┃   ┃   ┣━ print(text, end = '')
4818     ┃   ┃   ┃   ┃   ┃   ┣━ sys.stdout.flush()
4819     ┃   ┃   ┃   ┃   ┃   ┗━ sys.stdout.flush()
4820     ┃   ┃   ┃   ┃   ┣━ print_at(x, y + i, " " * width)
4821     ┃   ┃   ┃   ┃   ┣━ for i in range(height):
4822     ┃   ┃   ┃   ┃   ┣━ print_at(x, y + i, " " * width)
4823     ┃   ┃   ┃   ┃   ┃   ┣━ goto(x, y)
4824     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ write('\x1B[%d;%df' % (y, x))
4825     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ print(value, end = '')
4826     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ sys.stdout.flush()
4827     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ sys.stdout.flush()
4828     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ write('\x1B[%d;%df' % (y, x))
4829     ┃   ┃   ┃   ┃   ┃   ┃   ┗━ write('\x1B[%d;%df' % (y, x))
4830     ┃   ┃   ┃   ┃   ┃   ┣━ goto(x, y)
4831     ┃   ┃   ┃   ┃   ┃   ┣━ print(text, end = '')
4832     ┃   ┃   ┃   ┃   ┃   ┣━ sys.stdout.flush()
4833     ┃   ┃   ┃   ┃   ┃   ┗━ sys.stdout.flush()
4834     ┃   ┃   ┃   ┃   ┣━ print_at(x, y + i, " " * width)
4835     ┃   ┃   ┃   ┃   ┣━ for i in range(height):
4836     ┃   ┃   ┃   ┃   ┣━ print_at(x, y + i, " " * width)
4837     ┃   ┃   ┃   ┃   ┃   ┣━ goto(x, y)
4838     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ write('\x1B[%d;%df' % (y, x))
4839     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ print(value, end = '')
4840     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ sys.stdout.flush()
4841     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ sys.stdout.flush()
4842     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ write('\x1B[%d;%df' % (y, x))
4843     ┃   ┃   ┃   ┃   ┃   ┃   ┗━ write('\x1B[%d;%df' % (y, x))
4844     ┃   ┃   ┃   ┃   ┃   ┣━ goto(x, y)
4845     ┃   ┃   ┃   ┃   ┃   ┣━ print(text, end = '')
4846     ┃   ┃   ┃   ┃   ┃   ┣━ sys.stdout.flush()
4847     ┃   ┃   ┃   ┃   ┃   ┗━ sys.stdout.flush()
4848     ┃   ┃   ┃   ┃   ┣━ print_at(x, y + i, " " * width)
4849     ┃   ┃   ┃   ┃   ┣━ for i in range(height):
4850     ┃   ┃   ┃   ┃   ┣━ print_at(x, y + i, " " * width)
4851     ┃   ┃   ┃   ┃   ┃   ┣━ goto(x, y)
4852     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ write('\x1B[%d;%df' % (y, x))
4853     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ print(value, end = '')
4854     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ sys.stdout.flush()
4855     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ sys.stdout.flush()
4856     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ write('\x1B[%d;%df' % (y, x))
4857     ┃   ┃   ┃   ┃   ┃   ┃   ┗━ write('\x1B[%d;%df' % (y, x))
4858     ┃   ┃   ┃   ┃   ┃   ┣━ goto(x, y)
4859     ┃   ┃   ┃   ┃   ┃   ┣━ print(text, end = '')
4860     ┃   ┃   ┃   ┃   ┃   ┣━ sys.stdout.flush()
4861     ┃   ┃   ┃   ┃   ┃   ┗━ sys.stdout.flush()
4862     ┃   ┃   ┃   ┃   ┣━ print_at(x, y + i, " " * width)
4863     ┃   ┃   ┃   ┃   ┣━ for i in range(height):
4864     ┃   ┃   ┃   ┃   ┣━ print_at(x, y + i, " " * width)
4865     ┃   ┃   ┃   ┃   ┃   ┣━ goto(x, y)
4866     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ write('\x1B[%d;%df' % (y, x))
4867     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ print(value, end = '')
4868     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ sys.stdout.flush()
4869     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ sys.stdout.flush()
4870     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ write('\x1B[%d;%df' % (y, x))
4871     ┃   ┃   ┃   ┃   ┃   ┃   ┗━ write('\x1B[%d;%df' % (y, x))
4872     ┃   ┃   ┃   ┃   ┃   ┣━ goto(x, y)
4873     ┃   ┃   ┃   ┃   ┃   ┣━ print(text, end = '')
4874     ┃   ┃   ┃   ┃   ┃   ┣━ sys.stdout.flush()
4875     ┃   ┃   ┃   ┃   ┃   ┗━ sys.stdout.flush()
4876     ┃   ┃   ┃   ┃   ┣━ print_at(x, y + i, " " * width)
4877     ┃   ┃   ┃   ┃   ┣━ for i in range(height):
4878     ┃   ┃   ┃   ┃   ┣━ print_at(x, y + i, " " * width)
4879     ┃   ┃   ┃   ┃   ┃   ┣━ goto(x, y)
4880     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ write('\x1B[%d;%df' % (y, x))
4881     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ print(value, end = '')
4882     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ sys.stdout.flush()
4883     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ sys.stdout.flush()
4884     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ write('\x1B[%d;%df' % (y, x))
4885     ┃   ┃   ┃   ┃   ┃   ┃   ┗━ write('\x1B[%d;%df' % (y, x))
4886     ┃   ┃   ┃   ┃   ┃   ┣━ goto(x, y)
4887     ┃   ┃   ┃   ┃   ┃   ┣━ print(text, end = '')
4888     ┃   ┃   ┃   ┃   ┃   ┣━ sys.stdout.flush()
4889     ┃   ┃   ┃   ┃   ┃   ┗━ sys.stdout.flush()
4890     ┃   ┃   ┃   ┃   ┣━ print_at(x, y + i, " " * width)
4891     ┃   ┃   ┃   ┃   ┣━ for i in range(height):
4892     ┃   ┃   ┃   ┃   ┗━ for i in range(height):
4893     ┃   ┃   ┃   ┣━ clear_rect(self.x, self.y, self.width, self.height)
4894     ┃   ┃   ┃   ┗━ clear_rect(self.x, self.y, self.width, self.height)
4895     ┃   ┃   ┣━ element.draw()
4896     ┃   ┃   ┣━ if hasattr(element, "children"):
4897     ┃   ┃   ┣━ for child in element.children:
4898     ┃   ┃   ┣━ draw(child, level + 1)
4899     ┃   ┃   ┃   ┣━ termsize = os.get_terminal_size()
4900     ┃   ┃   ┃   ┣━ screen_width = termsize.columns
4901     ┃   ┃   ┃   ┣━ screen_height = termsize.lines
4902     ┃   ┃   ┃   ┣━ indent = "  " * level
4903     ┃   ┃   ┃   ┣━ if not is_placed(element):
4904     ┃   ┃   ┃   ┃   ┣━ return hasattr(element, "x") and hasattr(element, "y") \
4905     ┃   ┃   ┃   ┃   ┣━ and hasattr(element, "width") and hasattr(element, "height")
4906     ┃   ┃   ┃   ┃   ┣━ return hasattr(element, "x") and hasattr(element, "y") \
4907     ┃   ┃   ┃   ┃   ┣━ and hasattr(element, "width") and hasattr(element, "height")
4908     ┃   ┃   ┃   ┃   ┣━ return hasattr(element, "x") and hasattr(element, "y") \
4909     ┃   ┃   ┃   ┃   ┗━ return hasattr(element, "x") and hasattr(element, "y") \
4910     ┃   ┃   ┃   ┣━ if not is_placed(element):
4911     ┃   ┃   ┃   ┣━ elif element.x <= screen_width and element.y <= screen_height:
4912     ┃   ┃   ┃   ┣━ if hasattr(element, "draw"):
4913     ┃   ┃   ┃   ┣━ element.draw()
4914     ┃   ┃   ┃   ┃   ┣━ display = self.text[0:self.width].ljust(self.width, " ")
4915     ┃   ┃   ┃   ┃   ┣━ print_at(self.x, self.y, display)
4916     ┃   ┃   ┃   ┃   ┃   ┣━ goto(x, y)
4917     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ write('\x1B[%d;%df' % (y, x))
4918     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ print(value, end = '')
4919     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ sys.stdout.flush()
4920     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ sys.stdout.flush()
4921     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ write('\x1B[%d;%df' % (y, x))
4922     ┃   ┃   ┃   ┃   ┃   ┃   ┗━ write('\x1B[%d;%df' % (y, x))
4923     ┃   ┃   ┃   ┃   ┃   ┣━ goto(x, y)
4924     ┃   ┃   ┃   ┃   ┃   ┣━ print(text, end = '')
4925     ┃   ┃   ┃   ┃   ┃   ┣━ sys.stdout.flush()
4926     ┃   ┃   ┃   ┃   ┃   ┗━ sys.stdout.flush()
4927     ┃   ┃   ┃   ┃   ┣━ print_at(self.x, self.y, display)
4928     ┃   ┃   ┃   ┃   ┗━ print_at(self.x, self.y, display)
4929     ┃   ┃   ┃   ┣━ element.draw()
4930     ┃   ┃   ┃   ┣━ if hasattr(element, "children"):
4931     ┃   ┃   ┃   ┣━ draw(child, level + 1)
4932     ┃   ┃   ┃   ┗━ draw(child, level + 1)
4933     ┃   ┃   ┣━ for child in element.children:
4934     ┃   ┃   ┣━ draw(child, level + 1)
4935     ┃   ┃   ┃   ┣━ termsize = os.get_terminal_size()
4936     ┃   ┃   ┃   ┣━ screen_width = termsize.columns
4937     ┃   ┃   ┃   ┣━ screen_height = termsize.lines
4938     ┃   ┃   ┃   ┣━ indent = "  " * level
4939     ┃   ┃   ┃   ┣━ if not is_placed(element):
4940     ┃   ┃   ┃   ┃   ┣━ return hasattr(element, "x") and hasattr(element, "y") \
4941     ┃   ┃   ┃   ┃   ┣━ and hasattr(element, "width") and hasattr(element, "height")
4942     ┃   ┃   ┃   ┃   ┣━ return hasattr(element, "x") and hasattr(element, "y") \
4943     ┃   ┃   ┃   ┃   ┣━ and hasattr(element, "width") and hasattr(element, "height")
4944     ┃   ┃   ┃   ┃   ┣━ return hasattr(element, "x") and hasattr(element, "y") \
4945     ┃   ┃   ┃   ┃   ┗━ return hasattr(element, "x") and hasattr(element, "y") \
4946     ┃   ┃   ┃   ┣━ if not is_placed(element):
4947     ┃   ┃   ┃   ┣━ elif element.x <= screen_width and element.y <= screen_height:
4948     ┃   ┃   ┃   ┣━ if hasattr(element, "draw"):
4949     ┃   ┃   ┃   ┣━ element.draw()
4950     ┃   ┃   ┃   ┃   ┣━ clear_rect(self.x, self.y, self.width, self.height)
4951     ┃   ┃   ┃   ┃   ┃   ┣━ for i in range(height):
4952     ┃   ┃   ┃   ┃   ┃   ┣━ print_at(x, y + i, " " * width)
4953     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ goto(x, y)
4954     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ write('\x1B[%d;%df' % (y, x))
4955     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ print(value, end = '')
4956     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ sys.stdout.flush()
4957     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ sys.stdout.flush()
4958     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ write('\x1B[%d;%df' % (y, x))
4959     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ write('\x1B[%d;%df' % (y, x))
4960     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ goto(x, y)
4961     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ print(text, end = '')
4962     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ sys.stdout.flush()
4963     ┃   ┃   ┃   ┃   ┃   ┃   ┗━ sys.stdout.flush()
4964     ┃   ┃   ┃   ┃   ┃   ┣━ print_at(x, y + i, " " * width)
4965     ┃   ┃   ┃   ┃   ┃   ┣━ for i in range(height):
4966     ┃   ┃   ┃   ┃   ┃   ┣━ print_at(x, y + i, " " * width)
4967     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ goto(x, y)
4968     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ write('\x1B[%d;%df' % (y, x))
4969     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ print(value, end = '')
4970     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ sys.stdout.flush()
4971     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ sys.stdout.flush()
4972     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ write('\x1B[%d;%df' % (y, x))
4973     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ write('\x1B[%d;%df' % (y, x))
4974     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ goto(x, y)
4975     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ print(text, end = '')
4976     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ sys.stdout.flush()
4977     ┃   ┃   ┃   ┃   ┃   ┃   ┗━ sys.stdout.flush()
4978     ┃   ┃   ┃   ┃   ┃   ┣━ print_at(x, y + i, " " * width)
4979     ┃   ┃   ┃   ┃   ┃   ┣━ for i in range(height):
4980     ┃   ┃   ┃   ┃   ┃   ┣━ print_at(x, y + i, " " * width)
4981     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ goto(x, y)
4982     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ write('\x1B[%d;%df' % (y, x))
4983     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ print(value, end = '')
4984     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ sys.stdout.flush()
4985     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ sys.stdout.flush()
4986     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ write('\x1B[%d;%df' % (y, x))
4987     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ write('\x1B[%d;%df' % (y, x))
4988     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ goto(x, y)
4989     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ print(text, end = '')
4990     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ sys.stdout.flush()
4991     ┃   ┃   ┃   ┃   ┃   ┃   ┗━ sys.stdout.flush()
4992     ┃   ┃   ┃   ┃   ┃   ┣━ print_at(x, y + i, " " * width)
4993     ┃   ┃   ┃   ┃   ┃   ┣━ for i in range(height):
4994     ┃   ┃   ┃   ┃   ┃   ┗━ for i in range(height):
4995     ┃   ┃   ┃   ┃   ┣━ clear_rect(self.x, self.y, self.width, self.height)
4996     ┃   ┃   ┃   ┃   ┗━ clear_rect(self.x, self.y, self.width, self.height)
4997     ┃   ┃   ┃   ┣━ element.draw()
4998     ┃   ┃   ┃   ┣━ if hasattr(element, "children"):
4999     ┃   ┃   ┃   ┣━ for child in element.children:
5000     ┃   ┃   ┃   ┣━ draw(child, level + 1)
5001     ┃   ┃   ┃   ┃   ┣━ termsize = os.get_terminal_size()
5002     ┃   ┃   ┃   ┃   ┣━ screen_width = termsize.columns
5003     ┃   ┃   ┃   ┃   ┣━ screen_height = termsize.lines
5004     ┃   ┃   ┃   ┃   ┣━ indent = "  " * level
5005     ┃   ┃   ┃   ┃   ┣━ if not is_placed(element):
5006     ┃   ┃   ┃   ┃   ┃   ┣━ return hasattr(element, "x") and hasattr(element, "y") \
5007     ┃   ┃   ┃   ┃   ┃   ┣━ and hasattr(element, "width") and hasattr(element, "height")
5008     ┃   ┃   ┃   ┃   ┃   ┣━ return hasattr(element, "x") and hasattr(element, "y") \
5009     ┃   ┃   ┃   ┃   ┃   ┣━ and hasattr(element, "width") and hasattr(element, "height")
5010     ┃   ┃   ┃   ┃   ┃   ┣━ return hasattr(element, "x") and hasattr(element, "y") \
5011     ┃   ┃   ┃   ┃   ┃   ┗━ return hasattr(element, "x") and hasattr(element, "y") \
5012     ┃   ┃   ┃   ┃   ┣━ if not is_placed(element):
5013     ┃   ┃   ┃   ┃   ┣━ elif element.x <= screen_width and element.y <= screen_height:
5014     ┃   ┃   ┃   ┃   ┣━ if hasattr(element, "draw"):
5015     ┃   ┃   ┃   ┃   ┣━ pass
5016     ┃   ┃   ┃   ┃   ┣━ if hasattr(element, "children"):
5017     ┃   ┃   ┃   ┃   ┣━ for child in element.children:
5018     ┃   ┃   ┃   ┃   ┣━ draw(child, level + 1)
5019     ┃   ┃   ┃   ┃   ┃   ┣━ termsize = os.get_terminal_size()
5020     ┃   ┃   ┃   ┃   ┃   ┣━ screen_width = termsize.columns
5021     ┃   ┃   ┃   ┃   ┃   ┣━ screen_height = termsize.lines
5022     ┃   ┃   ┃   ┃   ┃   ┣━ indent = "  " * level
5023     ┃   ┃   ┃   ┃   ┃   ┣━ if not is_placed(element):
5024     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ return hasattr(element, "x") and hasattr(element, "y") \
5025     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ and hasattr(element, "width") and hasattr(element, "height")
5026     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ return hasattr(element, "x") and hasattr(element, "y") \
5027     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ and hasattr(element, "width") and hasattr(element, "height")
5028     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ return hasattr(element, "x") and hasattr(element, "y") \
5029     ┃   ┃   ┃   ┃   ┃   ┃   ┗━ return hasattr(element, "x") and hasattr(element, "y") \
5030     ┃   ┃   ┃   ┃   ┃   ┣━ if not is_placed(element):
5031     ┃   ┃   ┃   ┃   ┃   ┣━ elif element.x <= screen_width and element.y <= screen_height:
5032     ┃   ┃   ┃   ┃   ┃   ┣━ if hasattr(element, "draw"):
5033     ┃   ┃   ┃   ┃   ┃   ┣━ element.draw()
5034     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ if self.color:
5035     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ print_at(self.x, self.y, "┏" + ("━" * (self.width - 2)) + "┓")
5036     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ goto(x, y)
5037     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ write('\x1B[%d;%df' % (y, x))
5038     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ print(value, end = '')
5039     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ sys.stdout.flush()
5040     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ sys.stdout.flush()
5041     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ write('\x1B[%d;%df' % (y, x))
5042     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ write('\x1B[%d;%df' % (y, x))
5043     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ goto(x, y)
5044     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ print(text, end = '')
5045     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ sys.stdout.flush()
5046     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ sys.stdout.flush()
5047     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ print_at(self.x, self.y, "┏" + ("━" * (self.width - 2)) + "┓")
5048     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ for i in range(self.height - 2):
5049     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ print_at(self.x, self.y + i + 1, "┃")
5050     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ goto(x, y)
5051     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ write('\x1B[%d;%df' % (y, x))
5052     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ print(value, end = '')
5053     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ sys.stdout.flush()
5054     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ sys.stdout.flush()
5055     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ write('\x1B[%d;%df' % (y, x))
5056     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ write('\x1B[%d;%df' % (y, x))
5057     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ goto(x, y)
5058     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ print(text, end = '')
5059     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ sys.stdout.flush()
5060     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ sys.stdout.flush()
5061     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ print_at(self.x, self.y + i + 1, "┃")
5062     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ print_at(self.x + self.width - 1, self.y + i + 1, "┃")
5063     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ goto(x, y)
5064     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ write('\x1B[%d;%df' % (y, x))
5065     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ print(value, end = '')
5066     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ sys.stdout.flush()
5067     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ sys.stdout.flush()
5068     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ write('\x1B[%d;%df' % (y, x))
5069     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ write('\x1B[%d;%df' % (y, x))
5070     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ goto(x, y)
5071     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ print(text, end = '')
5072     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ sys.stdout.flush()
5073     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ sys.stdout.flush()
5074     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ print_at(self.x + self.width - 1, self.y + i + 1, "┃")
5075     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ for i in range(self.height - 2):
5076     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ print_at(self.x, self.y + self.height - 1, "┗" + ("━" * (self.width - 2)) + "┛")
5077     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ goto(x, y)
5078     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ write('\x1B[%d;%df' % (y, x))
5079     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ print(value, end = '')
5080     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ sys.stdout.flush()
5081     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ sys.stdout.flush()
5082     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ write('\x1B[%d;%df' % (y, x))
5083     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ write('\x1B[%d;%df' % (y, x))
5084     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ goto(x, y)
5085     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ print(text, end = '')
5086     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ sys.stdout.flush()
5087     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ sys.stdout.flush()
5088     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ print_at(self.x, self.y + self.height - 1, "┗" + ("━" * (self.width - 2)) + "┛")
5089     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ if self.color:
5090     ┃   ┃   ┃   ┃   ┃   ┃   ┗━ if self.color:
5091     ┃   ┃   ┃   ┃   ┃   ┣━ element.draw()
5092     ┃   ┃   ┃   ┃   ┃   ┣━ if hasattr(element, "children"):
5093     ┃   ┃   ┃   ┃   ┃   ┣━ for child in element.children:
5094     ┃   ┃   ┃   ┃   ┃   ┣━ draw(child, level + 1)
5095     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ termsize = os.get_terminal_size()
5096     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ screen_width = termsize.columns
5097     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ screen_height = termsize.lines
5098     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ indent = "  " * level
5099     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ if not is_placed(element):
5100     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ return hasattr(element, "x") and hasattr(element, "y") \
5101     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ and hasattr(element, "width") and hasattr(element, "height")
5102     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ return hasattr(element, "x") and hasattr(element, "y") \
5103     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ and hasattr(element, "width") and hasattr(element, "height")
5104     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ return hasattr(element, "x") and hasattr(element, "y") \
5105     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ return hasattr(element, "x") and hasattr(element, "y") \
5106     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ if not is_placed(element):
5107     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ elif element.x <= screen_width and element.y <= screen_height:
5108     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ if hasattr(element, "draw"):
5109     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ element.draw()
5110     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ display = self.text[0:self.width].ljust(self.width, " ")
5111     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ print_at(self.x, self.y, display)
5112     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ goto(x, y)
5113     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ write('\x1B[%d;%df' % (y, x))
5114     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ print(value, end = '')
5115     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ sys.stdout.flush()
5116     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ sys.stdout.flush()
5117     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ write('\x1B[%d;%df' % (y, x))
5118     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ write('\x1B[%d;%df' % (y, x))
5119     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ goto(x, y)
5120     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ print(text, end = '')
5121     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ sys.stdout.flush()
5122     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ sys.stdout.flush()
5123     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ print_at(self.x, self.y, display)
5124     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ print_at(self.x, self.y, display)
5125     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ element.draw()
5126     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ if hasattr(element, "children"):
5127     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ draw(child, level + 1)
5128     ┃   ┃   ┃   ┃   ┃   ┃   ┗━ draw(child, level + 1)
5129     ┃   ┃   ┃   ┃   ┃   ┣━ for child in element.children:
5130     ┃   ┃   ┃   ┃   ┃   ┣━ draw(child, level + 1)
5131     ┃   ┃   ┃   ┃   ┃   ┗━ draw(child, level + 1)
5132     ┃   ┃   ┃   ┃   ┣━ for child in element.children:
5133     ┃   ┃   ┃   ┃   ┣━ draw(child, level + 1)
5134     ┃   ┃   ┃   ┃   ┗━ draw(child, level + 1)
5135     ┃   ┃   ┃   ┣━ for child in element.children:
5136     ┃   ┃   ┃   ┣━ draw(child, level + 1)
5137     ┃   ┃   ┃   ┃   ┣━ termsize = os.get_terminal_size()
5138     ┃   ┃   ┃   ┃   ┣━ screen_width = termsize.columns
5139     ┃   ┃   ┃   ┃   ┣━ screen_height = termsize.lines
5140     ┃   ┃   ┃   ┃   ┣━ indent = "  " * level
5141     ┃   ┃   ┃   ┃   ┣━ if not is_placed(element):
5142     ┃   ┃   ┃   ┃   ┃   ┣━ return hasattr(element, "x") and hasattr(element, "y") \
5143     ┃   ┃   ┃   ┃   ┃   ┣━ and hasattr(element, "width") and hasattr(element, "height")
5144     ┃   ┃   ┃   ┃   ┃   ┣━ return hasattr(element, "x") and hasattr(element, "y") \
5145     ┃   ┃   ┃   ┃   ┃   ┣━ and hasattr(element, "width") and hasattr(element, "height")
5146     ┃   ┃   ┃   ┃   ┃   ┣━ return hasattr(element, "x") and hasattr(element, "y") \
5147     ┃   ┃   ┃   ┃   ┃   ┗━ return hasattr(element, "x") and hasattr(element, "y") \
5148     ┃   ┃   ┃   ┃   ┣━ if not is_placed(element):
5149     ┃   ┃   ┃   ┃   ┣━ elif element.x <= screen_width and element.y <= screen_height:
5150     ┃   ┃   ┃   ┃   ┣━ if hasattr(element, "draw"):
5151     ┃   ┃   ┃   ┃   ┣━ pass
5152     ┃   ┃   ┃   ┃   ┣━ if hasattr(element, "children"):
5153     ┃   ┃   ┃   ┃   ┣━ for child in element.children:
5154     ┃   ┃   ┃   ┃   ┣━ draw(child, level + 1)
5155     ┃   ┃   ┃   ┃   ┃   ┣━ termsize = os.get_terminal_size()
5156     ┃   ┃   ┃   ┃   ┃   ┣━ screen_width = termsize.columns
5157     ┃   ┃   ┃   ┃   ┃   ┣━ screen_height = termsize.lines
5158     ┃   ┃   ┃   ┃   ┃   ┣━ indent = "  " * level
5159     ┃   ┃   ┃   ┃   ┃   ┣━ if not is_placed(element):
5160     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ return hasattr(element, "x") and hasattr(element, "y") \
5161     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ and hasattr(element, "width") and hasattr(element, "height")
5162     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ return hasattr(element, "x") and hasattr(element, "y") \
5163     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ and hasattr(element, "width") and hasattr(element, "height")
5164     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ return hasattr(element, "x") and hasattr(element, "y") \
5165     ┃   ┃   ┃   ┃   ┃   ┃   ┗━ return hasattr(element, "x") and hasattr(element, "y") \
5166     ┃   ┃   ┃   ┃   ┃   ┣━ if not is_placed(element):
5167     ┃   ┃   ┃   ┃   ┃   ┣━ elif element.x <= screen_width and element.y <= screen_height:
5168     ┃   ┃   ┃   ┃   ┃   ┣━ if hasattr(element, "draw"):
5169     ┃   ┃   ┃   ┃   ┃   ┣━ element.draw()
5170     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ if self.color:
5171     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ print_at(self.x, self.y, "┏" + ("━" * (self.width - 2)) + "┓")
5172     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ goto(x, y)
5173     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ write('\x1B[%d;%df' % (y, x))
5174     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ print(value, end = '')
5175     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ sys.stdout.flush()
5176     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ sys.stdout.flush()
5177     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ write('\x1B[%d;%df' % (y, x))
5178     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ write('\x1B[%d;%df' % (y, x))
5179     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ goto(x, y)
5180     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ print(text, end = '')
5181     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ sys.stdout.flush()
5182     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ sys.stdout.flush()
5183     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ print_at(self.x, self.y, "┏" + ("━" * (self.width - 2)) + "┓")
5184     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ for i in range(self.height - 2):
5185     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ print_at(self.x, self.y + i + 1, "┃")
5186     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ goto(x, y)
5187     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ write('\x1B[%d;%df' % (y, x))
5188     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ print(value, end = '')
5189     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ sys.stdout.flush()
5190     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ sys.stdout.flush()
5191     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ write('\x1B[%d;%df' % (y, x))
5192     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ write('\x1B[%d;%df' % (y, x))
5193     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ goto(x, y)
5194     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ print(text, end = '')
5195     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ sys.stdout.flush()
5196     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ sys.stdout.flush()
5197     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ print_at(self.x, self.y + i + 1, "┃")
5198     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ print_at(self.x + self.width - 1, self.y + i + 1, "┃")
5199     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ goto(x, y)
5200     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ write('\x1B[%d;%df' % (y, x))
5201     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ print(value, end = '')
5202     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ sys.stdout.flush()
5203     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ sys.stdout.flush()
5204     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ write('\x1B[%d;%df' % (y, x))
5205     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ write('\x1B[%d;%df' % (y, x))
5206     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ goto(x, y)
5207     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ print(text, end = '')
5208     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ sys.stdout.flush()
5209     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ sys.stdout.flush()
5210     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ print_at(self.x + self.width - 1, self.y + i + 1, "┃")
5211     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ for i in range(self.height - 2):
5212     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ print_at(self.x, self.y + self.height - 1, "┗" + ("━" * (self.width - 2)) + "┛")
5213     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ goto(x, y)
5214     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ write('\x1B[%d;%df' % (y, x))
5215     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ print(value, end = '')
5216     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ sys.stdout.flush()
5217     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ sys.stdout.flush()
5218     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ write('\x1B[%d;%df' % (y, x))
5219     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ write('\x1B[%d;%df' % (y, x))
5220     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ goto(x, y)
5221     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ print(text, end = '')
5222     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ sys.stdout.flush()
5223     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ sys.stdout.flush()
5224     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ print_at(self.x, self.y + self.height - 1, "┗" + ("━" * (self.width - 2)) + "┛")
5225     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ if self.color:
5226     ┃   ┃   ┃   ┃   ┃   ┃   ┗━ if self.color:
5227     ┃   ┃   ┃   ┃   ┃   ┣━ element.draw()
5228     ┃   ┃   ┃   ┃   ┃   ┣━ if hasattr(element, "children"):
5229     ┃   ┃   ┃   ┃   ┃   ┣━ for child in element.children:
5230     ┃   ┃   ┃   ┃   ┃   ┣━ draw(child, level + 1)
5231     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ termsize = os.get_terminal_size()
5232     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ screen_width = termsize.columns
5233     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ screen_height = termsize.lines
5234     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ indent = "  " * level
5235     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ if not is_placed(element):
5236     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ return hasattr(element, "x") and hasattr(element, "y") \
5237     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ and hasattr(element, "width") and hasattr(element, "height")
5238     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ return hasattr(element, "x") and hasattr(element, "y") \
5239     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ and hasattr(element, "width") and hasattr(element, "height")
5240     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ return hasattr(element, "x") and hasattr(element, "y") \
5241     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ return hasattr(element, "x") and hasattr(element, "y") \
5242     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ if not is_placed(element):
5243     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ elif element.x <= screen_width and element.y <= screen_height:
5244     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ if hasattr(element, "draw"):
5245     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ element.draw()
5246     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ display = self.text[0:self.width].ljust(self.width, " ")
5247     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ print_at(self.x, self.y, display)
5248     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ goto(x, y)
5249     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ write('\x1B[%d;%df' % (y, x))
5250     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ print(value, end = '')
5251     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ sys.stdout.flush()
5252     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ sys.stdout.flush()
5253     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ write('\x1B[%d;%df' % (y, x))
5254     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ write('\x1B[%d;%df' % (y, x))
5255     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ goto(x, y)
5256     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ print(text, end = '')
5257     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ sys.stdout.flush()
5258     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ sys.stdout.flush()
5259     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ print_at(self.x, self.y, display)
5260     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ print_at(self.x, self.y, display)
5261     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ element.draw()
5262     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ if hasattr(element, "children"):
5263     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ draw(child, level + 1)
5264     ┃   ┃   ┃   ┃   ┃   ┃   ┗━ draw(child, level + 1)
5265     ┃   ┃   ┃   ┃   ┃   ┣━ for child in element.children:
5266     ┃   ┃   ┃   ┃   ┃   ┣━ draw(child, level + 1)
5267     ┃   ┃   ┃   ┃   ┃   ┗━ draw(child, level + 1)
5268     ┃   ┃   ┃   ┃   ┣━ for child in element.children:
5269     ┃   ┃   ┃   ┃   ┣━ draw(child, level + 1)
5270     ┃   ┃   ┃   ┃   ┗━ draw(child, level + 1)
5271     ┃   ┃   ┃   ┣━ for child in element.children:
5272     ┃   ┃   ┃   ┣━ draw(child, level + 1)
5273     ┃   ┃   ┃   ┗━ draw(child, level + 1)
5274     ┃   ┃   ┣━ for child in element.children:
5275     ┃   ┃   ┣━ draw(child, level + 1)
5276     ┃   ┃   ┃   ┣━ termsize = os.get_terminal_size()
5277     ┃   ┃   ┃   ┣━ screen_width = termsize.columns
5278     ┃   ┃   ┃   ┣━ screen_height = termsize.lines
5279     ┃   ┃   ┃   ┣━ indent = "  " * level
5280     ┃   ┃   ┃   ┣━ if not is_placed(element):
5281     ┃   ┃   ┃   ┃   ┣━ return hasattr(element, "x") and hasattr(element, "y") \
5282     ┃   ┃   ┃   ┃   ┣━ and hasattr(element, "width") and hasattr(element, "height")
5283     ┃   ┃   ┃   ┃   ┣━ return hasattr(element, "x") and hasattr(element, "y") \
5284     ┃   ┃   ┃   ┃   ┣━ and hasattr(element, "width") and hasattr(element, "height")
5285     ┃   ┃   ┃   ┃   ┣━ return hasattr(element, "x") and hasattr(element, "y") \
5286     ┃   ┃   ┃   ┃   ┗━ return hasattr(element, "x") and hasattr(element, "y") \
5287     ┃   ┃   ┃   ┣━ if not is_placed(element):
5288     ┃   ┃   ┃   ┣━ elif element.x <= screen_width and element.y <= screen_height:
5289     ┃   ┃   ┃   ┣━ if hasattr(element, "draw"):
5290     ┃   ┃   ┃   ┣━ element.draw()
5291     ┃   ┃   ┃   ┃   ┣━ if len(list(self.child_nodes)) == 0:
5292     ┃   ┃   ┃   ┃   ┃   ┣━ return filter(lambda c: c != self.label, self.children)
5293     ┃   ┃   ┃   ┃   ┃   ┗━ return filter(lambda c: c != self.label, self.children)
5294     ┃   ┃   ┃   ┃   ┣━ if len(list(self.child_nodes)) == 0:
5295     ┃   ┃   ┃   ┃   ┃   ┣━ return filter(lambda c: c != self.label, self.children)
5296     ┃   ┃   ┃   ┃   ┃   ┣━ return filter(lambda c: c != self.label, self.children)
5297     ┃   ┃   ┃   ┃   ┃   ┣━ return filter(lambda c: c != self.label, self.children)
5298     ┃   ┃   ┃   ┃   ┃   ┣━ return filter(lambda c: c != self.label, self.children)
5299     ┃   ┃   ┃   ┃   ┃   ┣━ return filter(lambda c: c != self.label, self.children)
5300     ┃   ┃   ┃   ┃   ┃   ┣━ return filter(lambda c: c != self.label, self.children)
5301     ┃   ┃   ┃   ┃   ┃   ┣━ return filter(lambda c: c != self.label, self.children)
5302     ┃   ┃   ┃   ┃   ┃   ┗━ return filter(lambda c: c != self.label, self.children)
5303     ┃   ┃   ┃   ┃   ┣━ if len(list(self.child_nodes)) == 0:
5304     ┃   ┃   ┃   ┃   ┣━ elif self.expanded:
5305     ┃   ┃   ┃   ┃   ┣━ print_at(self.x, self.y, "▶")
5306     ┃   ┃   ┃   ┃   ┃   ┣━ goto(x, y)
5307     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ write('\x1B[%d;%df' % (y, x))
5308     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ print(value, end = '')
5309     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ sys.stdout.flush()
5310     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ sys.stdout.flush()
5311     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ write('\x1B[%d;%df' % (y, x))
5312     ┃   ┃   ┃   ┃   ┃   ┃   ┗━ write('\x1B[%d;%df' % (y, x))
5313     ┃   ┃   ┃   ┃   ┃   ┣━ goto(x, y)
5314     ┃   ┃   ┃   ┃   ┃   ┣━ print(text, end = '')
5315     ┃   ┃   ┃   ┃   ┃   ┣━ sys.stdout.flush()
5316     ┃   ┃   ┃   ┃   ┃   ┗━ sys.stdout.flush()
5317     ┃   ┃   ┃   ┃   ┣━ print_at(self.x, self.y, "▶")
5318     ┃   ┃   ┃   ┃   ┣━ 
5319     ┃   ┃   ┃   ┃   ┗━ 
5320     ┃   ┃   ┃   ┣━ element.draw()
5321     ┃   ┃   ┃   ┣━ if hasattr(element, "children"):
5322     ┃   ┃   ┃   ┣━ for child in element.children:
5323     ┃   ┃   ┃   ┣━ draw(child, level + 1)
5324     ┃   ┃   ┃   ┃   ┣━ termsize = os.get_terminal_size()
5325     ┃   ┃   ┃   ┃   ┣━ screen_width = termsize.columns
5326     ┃   ┃   ┃   ┃   ┣━ screen_height = termsize.lines
5327     ┃   ┃   ┃   ┃   ┣━ indent = "  " * level
5328     ┃   ┃   ┃   ┃   ┣━ if not is_placed(element):
5329     ┃   ┃   ┃   ┃   ┃   ┣━ return hasattr(element, "x") and hasattr(element, "y") \
5330     ┃   ┃   ┃   ┃   ┃   ┣━ and hasattr(element, "width") and hasattr(element, "height")
5331     ┃   ┃   ┃   ┃   ┃   ┣━ return hasattr(element, "x") and hasattr(element, "y") \
5332     ┃   ┃   ┃   ┃   ┃   ┣━ and hasattr(element, "width") and hasattr(element, "height")
5333     ┃   ┃   ┃   ┃   ┃   ┣━ return hasattr(element, "x") and hasattr(element, "y") \
5334     ┃   ┃   ┃   ┃   ┃   ┗━ return hasattr(element, "x") and hasattr(element, "y") \
5335     ┃   ┃   ┃   ┃   ┣━ if not is_placed(element):
5336     ┃   ┃   ┃   ┃   ┣━ elif element.x <= screen_width and element.y <= screen_height:
5337     ┃   ┃   ┃   ┃   ┣━ if hasattr(element, "draw"):
5338     ┃   ┃   ┃   ┃   ┣━ element.draw()
5339     ┃   ┃   ┃   ┃   ┃   ┣━ display = self.text[0:self.width].ljust(self.width, " ")
5340     ┃   ┃   ┃   ┃   ┃   ┣━ print_at(self.x, self.y, display)
5341     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ goto(x, y)
5342     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ write('\x1B[%d;%df' % (y, x))
5343     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ print(value, end = '')
5344     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ sys.stdout.flush()
5345     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ sys.stdout.flush()
5346     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ write('\x1B[%d;%df' % (y, x))
5347     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ write('\x1B[%d;%df' % (y, x))
5348     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ goto(x, y)
5349     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ print(text, end = '')
5350     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ sys.stdout.flush()
5351     ┃   ┃   ┃   ┃   ┃   ┃   ┗━ sys.stdout.flush()
5352     ┃   ┃   ┃   ┃   ┃   ┣━ print_at(self.x, self.y, display)
5353     ┃   ┃   ┃   ┃   ┃   ┗━ print_at(self.x, self.y, display)
5354     ┃   ┃   ┃   ┃   ┣━ element.draw()
5355     ┃   ┃   ┃   ┃   ┣━ if hasattr(element, "children"):
5356     ┃   ┃   ┃   ┃   ┣━ draw(child, level + 1)
5357     ┃   ┃   ┃   ┃   ┗━ draw(child, level + 1)
5358     ┃   ┃   ┃   ┣━ for child in element.children:
5359     ┃   ┃   ┃   ┣━ draw(child, level + 1)
5360     ┃   ┃   ┃   ┃   ┣━ termsize = os.get_terminal_size()
5361     ┃   ┃   ┃   ┃   ┣━ screen_width = termsize.columns
5362     ┃   ┃   ┃   ┃   ┣━ screen_height = termsize.lines
5363     ┃   ┃   ┃   ┃   ┣━ indent = "  " * level
5364     ┃   ┃   ┃   ┃   ┣━ if not is_placed(element):
5365     ┃   ┃   ┃   ┃   ┃   ┣━ return hasattr(element, "x") and hasattr(element, "y") \
5366     ┃   ┃   ┃   ┃   ┃   ┗━ return hasattr(element, "x") and hasattr(element, "y") \
5367     ┃   ┃   ┃   ┃   ┣━ if not is_placed(element):
5368     ┃   ┃   ┃   ┃   ┣━ log(indent + "not placed")
5369     ┃   ┃   ┃   ┃   ┃   ┣━ logfile.write(text + "\n")
5370     ┃   ┃   ┃   ┃   ┃   ┣━ logfile.flush()
5371     ┃   ┃   ┃   ┃   ┃   ┗━ logfile.flush()
5372     ┃   ┃   ┃   ┃   ┣━ log(indent + "not placed")
5373     ┃   ┃   ┃   ┃   ┣━ pass
5374     ┃   ┃   ┃   ┃   ┗━ pass
5375     ┃   ┃   ┃   ┣━ draw(child, level + 1)
5376     ┃   ┃   ┃   ┣━ for child in element.children:
5377     ┃   ┃   ┃   ┣━ draw(child, level + 1)
5378     ┃   ┃   ┃   ┃   ┣━ termsize = os.get_terminal_size()
5379     ┃   ┃   ┃   ┃   ┣━ screen_width = termsize.columns
5380     ┃   ┃   ┃   ┃   ┣━ screen_height = termsize.lines
5381     ┃   ┃   ┃   ┃   ┣━ indent = "  " * level
5382     ┃   ┃   ┃   ┃   ┣━ if not is_placed(element):
5383     ┃   ┃   ┃   ┃   ┃   ┣━ return hasattr(element, "x") and hasattr(element, "y") \
5384     ┃   ┃   ┃   ┃   ┃   ┗━ return hasattr(element, "x") and hasattr(element, "y") \
5385     ┃   ┃   ┃   ┃   ┣━ if not is_placed(element):
5386     ┃   ┃   ┃   ┃   ┣━ log(indent + "not placed")
5387     ┃   ┃   ┃   ┃   ┃   ┣━ logfile.write(text + "\n")
5388     ┃   ┃   ┃   ┃   ┃   ┣━ logfile.flush()
5389     ┃   ┃   ┃   ┃   ┃   ┗━ logfile.flush()
5390     ┃   ┃   ┃   ┃   ┣━ log(indent + "not placed")
5391     ┃   ┃   ┃   ┃   ┣━ pass
5392     ┃   ┃   ┃   ┃   ┗━ pass
5393     ┃   ┃   ┃   ┣━ draw(child, level + 1)
5394     ┃   ┃   ┃   ┣━ for child in element.children:
5395     ┃   ┃   ┃   ┣━ draw(child, level + 1)
5396     ┃   ┃   ┃   ┃   ┣━ termsize = os.get_terminal_size()
5397     ┃   ┃   ┃   ┃   ┣━ screen_width = termsize.columns
5398     ┃   ┃   ┃   ┃   ┣━ screen_height = termsize.lines
5399     ┃   ┃   ┃   ┃   ┣━ indent = "  " * level
5400     ┃   ┃   ┃   ┃   ┣━ if not is_placed(element):
5401     ┃   ┃   ┃   ┃   ┃   ┣━ return hasattr(element, "x") and hasattr(element, "y") \
5402     ┃   ┃   ┃   ┃   ┃   ┗━ return hasattr(element, "x") and hasattr(element, "y") \
5403     ┃   ┃   ┃   ┃   ┣━ if not is_placed(element):
5404     ┃   ┃   ┃   ┃   ┣━ log(indent + "not placed")
5405     ┃   ┃   ┃   ┃   ┃   ┣━ logfile.write(text + "\n")
5406     ┃   ┃   ┃   ┃   ┃   ┣━ logfile.flush()
5407     ┃   ┃   ┃   ┃   ┃   ┗━ logfile.flush()
5408     ┃   ┃   ┃   ┃   ┣━ log(indent + "not placed")
5409     ┃   ┃   ┃   ┃   ┣━ pass
5410     ┃   ┃   ┃   ┃   ┗━ pass
5411     ┃   ┃   ┃   ┣━ draw(child, level + 1)
5412     ┃   ┃   ┃   ┣━ for child in element.children:
5413     ┃   ┃   ┃   ┣━ draw(child, level + 1)
5414     ┃   ┃   ┃   ┗━ draw(child, level + 1)
5415     ┃   ┃   ┣━ for child in element.children:
5416     ┃   ┃   ┣━ draw(child, level + 1)
5417     ┃   ┃   ┃   ┣━ termsize = os.get_terminal_size()
5418     ┃   ┃   ┃   ┣━ screen_width = termsize.columns
5419     ┃   ┃   ┃   ┣━ screen_height = termsize.lines
5420     ┃   ┃   ┃   ┣━ indent = "  " * level
5421     ┃   ┃   ┃   ┣━ if not is_placed(element):
5422     ┃   ┃   ┃   ┃   ┣━ return hasattr(element, "x") and hasattr(element, "y") \
5423     ┃   ┃   ┃   ┃   ┣━ and hasattr(element, "width") and hasattr(element, "height")
5424     ┃   ┃   ┃   ┃   ┣━ return hasattr(element, "x") and hasattr(element, "y") \
5425     ┃   ┃   ┃   ┃   ┣━ and hasattr(element, "width") and hasattr(element, "height")
5426     ┃   ┃   ┃   ┃   ┣━ return hasattr(element, "x") and hasattr(element, "y") \
5427     ┃   ┃   ┃   ┃   ┗━ return hasattr(element, "x") and hasattr(element, "y") \
5428     ┃   ┃   ┃   ┣━ if not is_placed(element):
5429     ┃   ┃   ┃   ┣━ elif element.x <= screen_width and element.y <= screen_height:
5430     ┃   ┃   ┃   ┣━ if hasattr(element, "draw"):
5431     ┃   ┃   ┃   ┣━ element.draw()
5432     ┃   ┃   ┃   ┃   ┣━ display = self.text[0:self.width].ljust(self.width, " ")
5433     ┃   ┃   ┃   ┃   ┣━ print_at(self.x, self.y, display)
5434     ┃   ┃   ┃   ┃   ┃   ┣━ goto(x, y)
5435     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ write('\x1B[%d;%df' % (y, x))
5436     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ print(value, end = '')
5437     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ sys.stdout.flush()
5438     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ sys.stdout.flush()
5439     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ write('\x1B[%d;%df' % (y, x))
5440     ┃   ┃   ┃   ┃   ┃   ┃   ┗━ write('\x1B[%d;%df' % (y, x))
5441     ┃   ┃   ┃   ┃   ┃   ┣━ goto(x, y)
5442     ┃   ┃   ┃   ┃   ┃   ┣━ print(text, end = '')
5443     ┃   ┃   ┃   ┃   ┃   ┣━ sys.stdout.flush()
5444     ┃   ┃   ┃   ┃   ┃   ┗━ sys.stdout.flush()
5445     ┃   ┃   ┃   ┃   ┣━ print_at(self.x, self.y, display)
5446     ┃   ┃   ┃   ┃   ┗━ print_at(self.x, self.y, display)
5447     ┃   ┃   ┃   ┣━ element.draw()
5448     ┃   ┃   ┃   ┣━ if hasattr(element, "children"):
5449     ┃   ┃   ┃   ┣━ draw(child, level + 1)
5450     ┃   ┃   ┃   ┗━ draw(child, level + 1)
5451     ┃   ┃   ┣━ for child in element.children:
5452     ┃   ┃   ┣━ draw(child, level + 1)
5453     ┃   ┃   ┗━ draw(child, level + 1)
5454     ┃   ┣━ draw(root_element)
5455     ┃   ┣━ inp = get_input()
5456     ┃   ┃   ┣━ fl_state = fcntl.fcntl(sys.stdin.fileno(), fcntl.F_GETFL)
5457     ┃   ┃   ┣━ data = sys.stdin.read(1)
5458     ┃   ┃   ┃   ┣━ return (self.buffer, 0)
5459     ┃   ┃   ┃   ┣━ return (self.buffer, 0)
5460     ┃   ┃   ┃   ┣━ data = self.buffer + input
5461     ┃   ┃   ┃   ┣━ (result, consumed) = self._buffer_decode(data, self.errors, final)
5462     ┃   ┃   ┃   ┣━ self.buffer = data[consumed:]
5463     ┃   ┃   ┃   ┣━ return result
5464     ┃   ┃   ┃   ┗━ return result
5465     ┃   ┃   ┣━ data = sys.stdin.read(1)
5466     ┃   ┃   ┣━ if data == '\x1b':
5467     ┃   ┃   ┣━ fcntl.fcntl(sys.stdin.fileno(), fcntl.F_SETFL, fl_state | os.O_NONBLOCK)
5468     ┃   ┃   ┣━ codes = ""
5469     ┃   ┃   ┣━ ch = sys.stdin.read(1)
5470     ┃   ┃   ┣━ if ch == '':
5471     ┃   ┃   ┣━ codes += ch
5472     ┃   ┃   ┣━ ch = sys.stdin.read(1)
5473     ┃   ┃   ┣━ if ch == '':
5474     ┃   ┃   ┣━ codes += ch
5475     ┃   ┃   ┣━ ch = sys.stdin.read(1)
5476     ┃   ┃   ┣━ if ch == '':
5477     ┃   ┃   ┣━ codes += ch
5478     ┃   ┃   ┣━ ch = sys.stdin.read(1)
5479     ┃   ┃   ┣━ if ch == '':
5480     ┃   ┃   ┣━ codes += ch
5481     ┃   ┃   ┣━ ch = sys.stdin.read(1)
5482     ┃   ┃   ┣━ if ch == '':
5483     ┃   ┃   ┣━ codes += ch
5484     ┃   ┃   ┣━ ch = sys.stdin.read(1)
5485     ┃   ┃   ┃   ┣━ return (self.buffer, 0)
5486     ┃   ┃   ┃   ┣━ return (self.buffer, 0)
5487     ┃   ┃   ┃   ┣━ data = self.buffer + input
5488     ┃   ┃   ┃   ┣━ (result, consumed) = self._buffer_decode(data, self.errors, final)
5489     ┃   ┃   ┃   ┣━ self.buffer = data[consumed:]
5490     ┃   ┃   ┃   ┣━ return result
5491     ┃   ┃   ┃   ┗━ return result
5492     ┃   ┃   ┣━ ch = sys.stdin.read(1)
5493     ┃   ┃   ┣━ if ch == '':
5494     ┃   ┃   ┣━ codes += ch
5495     ┃   ┃   ┣━ ch = sys.stdin.read(1)
5496     ┃   ┃   ┣━ if ch == '':
5497     ┃   ┃   ┣━ codes += ch
5498     ┃   ┃   ┣━ ch = sys.stdin.read(1)
5499     ┃   ┃   ┣━ if ch == '':
5500     ┃   ┃   ┣━ codes += ch
5501     ┃   ┃   ┣━ ch = sys.stdin.read(1)
5502     ┃   ┃   ┣━ if ch == '':
5503     ┃   ┃   ┣━ codes += ch
5504     ┃   ┃   ┣━ ch = sys.stdin.read(1)
5505     ┃   ┃   ┣━ if ch == '':
5506     ┃   ┃   ┣━ codes += ch
5507     ┃   ┃   ┣━ ch = sys.stdin.read(1)
5508     ┃   ┃   ┣━ if ch == '':
5509     ┃   ┃   ┣━ codes += ch
5510     ┃   ┃   ┣━ ch = sys.stdin.read(1)
5511     ┃   ┃   ┃   ┣━ return (self.buffer, 0)
5512     ┃   ┃   ┃   ┣━ return (self.buffer, 0)
5513     ┃   ┃   ┃   ┣━ data = self.buffer + input
5514     ┃   ┃   ┃   ┣━ (result, consumed) = self._buffer_decode(data, self.errors, final)
5515     ┃   ┃   ┃   ┣━ self.buffer = data[consumed:]
5516     ┃   ┃   ┃   ┣━ return result
5517     ┃   ┃   ┃   ┗━ return result
5518     ┃   ┃   ┣━ ch = sys.stdin.read(1)
5519     ┃   ┃   ┣━ if ch == '':
5520     ┃   ┃   ┣━ fcntl.fcntl(sys.stdin.fileno(), fcntl.F_SETFL, fl_state)
5521     ┃   ┃   ┣━ break
5522     ┃   ┃   ┣━ data += codes
5523     ┃   ┃   ┣━ return data
5524     ┃   ┃   ┗━ return data
5525     ┃   ┣━ inp = get_input()
5526     ┃   ┣━ if inp == "\r":
5527     ┃   ┣━ if inp == "q":
5528     ┃   ┣━ events = decode_input(inp)
5529     ┃   ┃   ┣━ events = []
5530     ┃   ┃   ┣━ codes = list(map(ord, an_input))
5531     ┃   ┃   ┣━ while len(codes) > 0:
5532     ┃   ┃   ┣━ if codes[0:3] == [27, 91, 77]:
5533     ┃   ┃   ┣━ if codes[3] == 32:
5534     ┃   ┃   ┣━ event = Event("mousedown", x = codes[4] - 32, y = codes[5] - 32)
5535     ┃   ┃   ┃   ┣━ self.type = etype
5536     ┃   ┃   ┃   ┣━ self.__dict__.update(kwargs)
5537     ┃   ┃   ┃   ┗━ self.__dict__.update(kwargs)
5538     ┃   ┃   ┣━ event = Event("mousedown", x = codes[4] - 32, y = codes[5] - 32)
5539     ┃   ┃   ┣━ events.append(event)
5540     ┃   ┃   ┣━ codes = codes[6:]
5541     ┃   ┃   ┣━ while len(codes) > 0:
5542     ┃   ┃   ┣━ if codes[0:3] == [27, 91, 77]:
5543     ┃   ┃   ┣━ if codes[3] == 32:
5544     ┃   ┃   ┣━ elif codes[3] == 35:
5545     ┃   ┃   ┣━ x = codes[4] - 32
5546     ┃   ┃   ┣━ y = codes[5] - 32
5547     ┃   ┃   ┣━ event = Event("mouseup", x = x, y = y)
5548     ┃   ┃   ┃   ┣━ self.type = etype
5549     ┃   ┃   ┃   ┣━ self.__dict__.update(kwargs)
5550     ┃   ┃   ┃   ┗━ self.__dict__.update(kwargs)
5551     ┃   ┃   ┣━ event = Event("mouseup", x = x, y = y)
5552     ┃   ┃   ┣━ events.append(event)
5553     ┃   ┃   ┣━ codes = codes[6:]
5554     ┃   ┃   ┣━ while len(codes) > 0:
5555     ┃   ┃   ┣━ return events
5556     ┃   ┃   ┗━ return events
5557     ┃   ┣━ events = decode_input(inp)
5558     ┃   ┣━ for event in events:
5559     ┃   ┣━ fire(root_element, event)
5560     ┃   ┃   ┣━ indent = "  " * level
5561     ┃   ┃   ┣━ if hasattr(event, "x") and hasattr(event, "y"):
5562     ┃   ┃   ┣━ if is_placed(element) and contains(element, event.x, event.y):
5563     ┃   ┃   ┃   ┣━ return hasattr(element, "x") and hasattr(element, "y") \
5564     ┃   ┃   ┃   ┣━ and hasattr(element, "width") and hasattr(element, "height")
5565     ┃   ┃   ┃   ┣━ return hasattr(element, "x") and hasattr(element, "y") \
5566     ┃   ┃   ┃   ┣━ and hasattr(element, "width") and hasattr(element, "height")
5567     ┃   ┃   ┃   ┣━ return hasattr(element, "x") and hasattr(element, "y") \
5568     ┃   ┃   ┃   ┗━ return hasattr(element, "x") and hasattr(element, "y") \
5569     ┃   ┃   ┣━ if is_placed(element) and contains(element, event.x, event.y):
5570     ┃   ┃   ┃   ┣━ return element.x <= x and element.y <= y and element.x + element.width > x \
5571     ┃   ┃   ┃   ┣━ and element.y + element.height > y
5572     ┃   ┃   ┃   ┣━ return element.x <= x and element.y <= y and element.x + element.width > x \
5573     ┃   ┃   ┃   ┗━ return element.x <= x and element.y <= y and element.x + element.width > x \
5574     ┃   ┃   ┣━ if is_placed(element) and contains(element, event.x, event.y):
5575     ┃   ┃   ┣━ if hasattr(element, event.type):
5576     ┃   ┃   ┣━ if hasattr(element, "children"):
5577     ┃   ┃   ┣━ for child in element.children:
5578     ┃   ┃   ┣━ fire(child, event, level + 1)
5579     ┃   ┃   ┃   ┣━ indent = "  " * level
5580     ┃   ┃   ┃   ┣━ if hasattr(event, "x") and hasattr(event, "y"):
5581     ┃   ┃   ┃   ┣━ if is_placed(element) and contains(element, event.x, event.y):
5582     ┃   ┃   ┃   ┃   ┣━ return hasattr(element, "x") and hasattr(element, "y") \
5583     ┃   ┃   ┃   ┃   ┣━ and hasattr(element, "width") and hasattr(element, "height")
5584     ┃   ┃   ┃   ┃   ┣━ return hasattr(element, "x") and hasattr(element, "y") \
5585     ┃   ┃   ┃   ┃   ┣━ and hasattr(element, "width") and hasattr(element, "height")
5586     ┃   ┃   ┃   ┃   ┣━ return hasattr(element, "x") and hasattr(element, "y") \
5587     ┃   ┃   ┃   ┃   ┗━ return hasattr(element, "x") and hasattr(element, "y") \
5588     ┃   ┃   ┃   ┣━ if is_placed(element) and contains(element, event.x, event.y):
5589     ┃   ┃   ┃   ┃   ┣━ return element.x <= x and element.y <= y and element.x + element.width > x \
5590     ┃   ┃   ┃   ┃   ┣━ and element.y + element.height > y
5591     ┃   ┃   ┃   ┃   ┣━ return element.x <= x and element.y <= y and element.x + element.width > x \
5592     ┃   ┃   ┃   ┃   ┗━ return element.x <= x and element.y <= y and element.x + element.width > x \
5593     ┃   ┃   ┃   ┣━ if is_placed(element) and contains(element, event.x, event.y):
5594     ┃   ┃   ┃   ┣━ return
5595     ┃   ┃   ┃   ┗━ return
5596     ┃   ┃   ┣━ fire(child, event, level + 1)
5597     ┃   ┃   ┣━ for child in element.children:
5598     ┃   ┃   ┣━ fire(child, event, level + 1)
5599     ┃   ┃   ┃   ┣━ indent = "  " * level
5600     ┃   ┃   ┃   ┣━ if hasattr(event, "x") and hasattr(event, "y"):
5601     ┃   ┃   ┃   ┣━ if is_placed(element) and contains(element, event.x, event.y):
5602     ┃   ┃   ┃   ┃   ┣━ return hasattr(element, "x") and hasattr(element, "y") \
5603     ┃   ┃   ┃   ┃   ┣━ and hasattr(element, "width") and hasattr(element, "height")
5604     ┃   ┃   ┃   ┃   ┣━ return hasattr(element, "x") and hasattr(element, "y") \
5605     ┃   ┃   ┃   ┃   ┣━ and hasattr(element, "width") and hasattr(element, "height")
5606     ┃   ┃   ┃   ┃   ┣━ return hasattr(element, "x") and hasattr(element, "y") \
5607     ┃   ┃   ┃   ┃   ┗━ return hasattr(element, "x") and hasattr(element, "y") \
5608     ┃   ┃   ┃   ┣━ if is_placed(element) and contains(element, event.x, event.y):
5609     ┃   ┃   ┃   ┃   ┣━ return element.x <= x and element.y <= y and element.x + element.width > x \
5610     ┃   ┃   ┃   ┃   ┣━ and element.y + element.height > y
5611     ┃   ┃   ┃   ┃   ┣━ return element.x <= x and element.y <= y and element.x + element.width > x \
5612     ┃   ┃   ┃   ┃   ┗━ return element.x <= x and element.y <= y and element.x + element.width > x \
5613     ┃   ┃   ┃   ┣━ if is_placed(element) and contains(element, event.x, event.y):
5614     ┃   ┃   ┃   ┣━ if hasattr(element, event.type):
5615     ┃   ┃   ┃   ┣━ if hasattr(element, "children"):
5616     ┃   ┃   ┃   ┣━ for child in element.children:
5617     ┃   ┃   ┃   ┣━ fire(child, event, level + 1)
5618     ┃   ┃   ┃   ┃   ┣━ indent = "  " * level
5619     ┃   ┃   ┃   ┃   ┣━ if hasattr(event, "x") and hasattr(event, "y"):
5620     ┃   ┃   ┃   ┃   ┣━ if is_placed(element) and contains(element, event.x, event.y):
5621     ┃   ┃   ┃   ┃   ┃   ┣━ return hasattr(element, "x") and hasattr(element, "y") \
5622     ┃   ┃   ┃   ┃   ┃   ┣━ and hasattr(element, "width") and hasattr(element, "height")
5623     ┃   ┃   ┃   ┃   ┃   ┣━ return hasattr(element, "x") and hasattr(element, "y") \
5624     ┃   ┃   ┃   ┃   ┃   ┣━ and hasattr(element, "width") and hasattr(element, "height")
5625     ┃   ┃   ┃   ┃   ┃   ┣━ return hasattr(element, "x") and hasattr(element, "y") \
5626     ┃   ┃   ┃   ┃   ┃   ┗━ return hasattr(element, "x") and hasattr(element, "y") \
5627     ┃   ┃   ┃   ┃   ┣━ if is_placed(element) and contains(element, event.x, event.y):
5628     ┃   ┃   ┃   ┃   ┃   ┣━ return element.x <= x and element.y <= y and element.x + element.width > x \
5629     ┃   ┃   ┃   ┃   ┃   ┣━ and element.y + element.height > y
5630     ┃   ┃   ┃   ┃   ┃   ┣━ return element.x <= x and element.y <= y and element.x + element.width > x \
5631     ┃   ┃   ┃   ┃   ┃   ┗━ return element.x <= x and element.y <= y and element.x + element.width > x \
5632     ┃   ┃   ┃   ┃   ┣━ if is_placed(element) and contains(element, event.x, event.y):
5633     ┃   ┃   ┃   ┃   ┣━ if hasattr(element, event.type):
5634     ┃   ┃   ┃   ┃   ┣━ if hasattr(element, "children"):
5635     ┃   ┃   ┃   ┃   ┣━ for child in element.children:
5636     ┃   ┃   ┃   ┃   ┣━ fire(child, event, level + 1)
5637     ┃   ┃   ┃   ┃   ┃   ┣━ indent = "  " * level
5638     ┃   ┃   ┃   ┃   ┃   ┣━ if hasattr(event, "x") and hasattr(event, "y"):
5639     ┃   ┃   ┃   ┃   ┃   ┣━ if is_placed(element) and contains(element, event.x, event.y):
5640     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ return hasattr(element, "x") and hasattr(element, "y") \
5641     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ and hasattr(element, "width") and hasattr(element, "height")
5642     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ return hasattr(element, "x") and hasattr(element, "y") \
5643     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ and hasattr(element, "width") and hasattr(element, "height")
5644     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ return hasattr(element, "x") and hasattr(element, "y") \
5645     ┃   ┃   ┃   ┃   ┃   ┃   ┗━ return hasattr(element, "x") and hasattr(element, "y") \
5646     ┃   ┃   ┃   ┃   ┃   ┣━ if is_placed(element) and contains(element, event.x, event.y):
5647     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ return element.x <= x and element.y <= y and element.x + element.width > x \
5648     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ and element.y + element.height > y
5649     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ return element.x <= x and element.y <= y and element.x + element.width > x \
5650     ┃   ┃   ┃   ┃   ┃   ┃   ┗━ return element.x <= x and element.y <= y and element.x + element.width > x \
5651     ┃   ┃   ┃   ┃   ┃   ┣━ if is_placed(element) and contains(element, event.x, event.y):
5652     ┃   ┃   ┃   ┃   ┃   ┣━ if hasattr(element, event.type):
5653     ┃   ┃   ┃   ┃   ┃   ┣━ if hasattr(element, "children"):
5654     ┃   ┃   ┃   ┃   ┃   ┣━ for child in element.children:
5655     ┃   ┃   ┃   ┃   ┃   ┣━ fire(child, event, level + 1)
5656     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ indent = "  " * level
5657     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ if hasattr(event, "x") and hasattr(event, "y"):
5658     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ if is_placed(element) and contains(element, event.x, event.y):
5659     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ return hasattr(element, "x") and hasattr(element, "y") \
5660     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ and hasattr(element, "width") and hasattr(element, "height")
5661     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ return hasattr(element, "x") and hasattr(element, "y") \
5662     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ and hasattr(element, "width") and hasattr(element, "height")
5663     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ return hasattr(element, "x") and hasattr(element, "y") \
5664     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ return hasattr(element, "x") and hasattr(element, "y") \
5665     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ if is_placed(element) and contains(element, event.x, event.y):
5666     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ return element.x <= x and element.y <= y and element.x + element.width > x \
5667     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ and element.y + element.height > y
5668     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ return element.x <= x and element.y <= y and element.x + element.width > x \
5669     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ return element.x <= x and element.y <= y and element.x + element.width > x \
5670     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ if is_placed(element) and contains(element, event.x, event.y):
5671     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ if hasattr(element, event.type):
5672     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ if hasattr(element, "children"):
5673     ┃   ┃   ┃   ┃   ┃   ┃   ┗━ if hasattr(element, "children"):
5674     ┃   ┃   ┃   ┃   ┃   ┣━ fire(child, event, level + 1)
5675     ┃   ┃   ┃   ┃   ┃   ┣━ for child in element.children:
5676     ┃   ┃   ┃   ┃   ┃   ┗━ for child in element.children:
5677     ┃   ┃   ┃   ┃   ┣━ fire(child, event, level + 1)
5678     ┃   ┃   ┃   ┃   ┣━ for child in element.children:
5679     ┃   ┃   ┃   ┃   ┗━ for child in element.children:
5680     ┃   ┃   ┃   ┣━ fire(child, event, level + 1)
5681     ┃   ┃   ┃   ┣━ for child in element.children:
5682     ┃   ┃   ┃   ┣━ fire(child, event, level + 1)
5683     ┃   ┃   ┃   ┃   ┣━ indent = "  " * level
5684     ┃   ┃   ┃   ┃   ┣━ if hasattr(event, "x") and hasattr(event, "y"):
5685     ┃   ┃   ┃   ┃   ┣━ if is_placed(element) and contains(element, event.x, event.y):
5686     ┃   ┃   ┃   ┃   ┃   ┣━ return hasattr(element, "x") and hasattr(element, "y") \
5687     ┃   ┃   ┃   ┃   ┃   ┣━ and hasattr(element, "width") and hasattr(element, "height")
5688     ┃   ┃   ┃   ┃   ┃   ┣━ return hasattr(element, "x") and hasattr(element, "y") \
5689     ┃   ┃   ┃   ┃   ┃   ┣━ and hasattr(element, "width") and hasattr(element, "height")
5690     ┃   ┃   ┃   ┃   ┃   ┣━ return hasattr(element, "x") and hasattr(element, "y") \
5691     ┃   ┃   ┃   ┃   ┃   ┗━ return hasattr(element, "x") and hasattr(element, "y") \
5692     ┃   ┃   ┃   ┃   ┣━ if is_placed(element) and contains(element, event.x, event.y):
5693     ┃   ┃   ┃   ┃   ┃   ┣━ return element.x <= x and element.y <= y and element.x + element.width > x \
5694     ┃   ┃   ┃   ┃   ┃   ┗━ return element.x <= x and element.y <= y and element.x + element.width > x \
5695     ┃   ┃   ┃   ┃   ┣━ if is_placed(element) and contains(element, event.x, event.y):
5696     ┃   ┃   ┃   ┃   ┣━ return
5697     ┃   ┃   ┃   ┃   ┗━ return
5698     ┃   ┃   ┃   ┣━ fire(child, event, level + 1)
5699     ┃   ┃   ┃   ┣━ for child in element.children:
5700     ┃   ┃   ┃   ┗━ for child in element.children:
5701     ┃   ┃   ┣━ fire(child, event, level + 1)
5702     ┃   ┃   ┣━ for child in element.children:
5703     ┃   ┃   ┣━ fire(child, event, level + 1)
5704     ┃   ┃   ┃   ┣━ indent = "  " * level
5705     ┃   ┃   ┃   ┣━ if hasattr(event, "x") and hasattr(event, "y"):
5706     ┃   ┃   ┃   ┣━ if is_placed(element) and contains(element, event.x, event.y):
5707     ┃   ┃   ┃   ┃   ┣━ return hasattr(element, "x") and hasattr(element, "y") \
5708     ┃   ┃   ┃   ┃   ┣━ and hasattr(element, "width") and hasattr(element, "height")
5709     ┃   ┃   ┃   ┃   ┣━ return hasattr(element, "x") and hasattr(element, "y") \
5710     ┃   ┃   ┃   ┃   ┣━ and hasattr(element, "width") and hasattr(element, "height")
5711     ┃   ┃   ┃   ┃   ┣━ return hasattr(element, "x") and hasattr(element, "y") \
5712     ┃   ┃   ┃   ┃   ┗━ return hasattr(element, "x") and hasattr(element, "y") \
5713     ┃   ┃   ┃   ┣━ if is_placed(element) and contains(element, event.x, event.y):
5714     ┃   ┃   ┃   ┃   ┣━ return element.x <= x and element.y <= y and element.x + element.width > x \
5715     ┃   ┃   ┃   ┃   ┗━ return element.x <= x and element.y <= y and element.x + element.width > x \
5716     ┃   ┃   ┃   ┣━ if is_placed(element) and contains(element, event.x, event.y):
5717     ┃   ┃   ┃   ┣━ return
5718     ┃   ┃   ┃   ┗━ return
5719     ┃   ┃   ┣━ fire(child, event, level + 1)
5720     ┃   ┃   ┣━ for child in element.children:
5721     ┃   ┃   ┣━ fire(child, event, level + 1)
5722     ┃   ┃   ┃   ┣━ indent = "  " * level
5723     ┃   ┃   ┃   ┣━ if hasattr(event, "x") and hasattr(event, "y"):
5724     ┃   ┃   ┃   ┣━ if is_placed(element) and contains(element, event.x, event.y):
5725     ┃   ┃   ┃   ┃   ┣━ return hasattr(element, "x") and hasattr(element, "y") \
5726     ┃   ┃   ┃   ┃   ┣━ and hasattr(element, "width") and hasattr(element, "height")
5727     ┃   ┃   ┃   ┃   ┣━ return hasattr(element, "x") and hasattr(element, "y") \
5728     ┃   ┃   ┃   ┃   ┣━ and hasattr(element, "width") and hasattr(element, "height")
5729     ┃   ┃   ┃   ┃   ┣━ return hasattr(element, "x") and hasattr(element, "y") \
5730     ┃   ┃   ┃   ┃   ┗━ return hasattr(element, "x") and hasattr(element, "y") \
5731     ┃   ┃   ┃   ┣━ if is_placed(element) and contains(element, event.x, event.y):
5732     ┃   ┃   ┃   ┃   ┣━ return element.x <= x and element.y <= y and element.x + element.width > x \
5733     ┃   ┃   ┃   ┃   ┗━ return element.x <= x and element.y <= y and element.x + element.width > x \
5734     ┃   ┃   ┃   ┣━ if is_placed(element) and contains(element, event.x, event.y):
5735     ┃   ┃   ┃   ┣━ return
5736     ┃   ┃   ┃   ┗━ return
5737     ┃   ┃   ┣━ fire(child, event, level + 1)
5738     ┃   ┃   ┣━ for child in element.children:
5739     ┃   ┃   ┗━ for child in element.children:
5740     ┃   ┣━ fire(root_element, event)
5741     ┃   ┣━ for event in events:
5742     ┃   ┣━ fire(root_element, event)
5743     ┃   ┃   ┣━ indent = "  " * level
5744     ┃   ┃   ┣━ if hasattr(event, "x") and hasattr(event, "y"):
5745     ┃   ┃   ┣━ if is_placed(element) and contains(element, event.x, event.y):
5746     ┃   ┃   ┃   ┣━ return hasattr(element, "x") and hasattr(element, "y") \
5747     ┃   ┃   ┃   ┣━ and hasattr(element, "width") and hasattr(element, "height")
5748     ┃   ┃   ┃   ┣━ return hasattr(element, "x") and hasattr(element, "y") \
5749     ┃   ┃   ┃   ┣━ and hasattr(element, "width") and hasattr(element, "height")
5750     ┃   ┃   ┃   ┣━ return hasattr(element, "x") and hasattr(element, "y") \
5751     ┃   ┃   ┃   ┗━ return hasattr(element, "x") and hasattr(element, "y") \
5752     ┃   ┃   ┣━ if is_placed(element) and contains(element, event.x, event.y):
5753     ┃   ┃   ┃   ┣━ return element.x <= x and element.y <= y and element.x + element.width > x \
5754     ┃   ┃   ┃   ┣━ and element.y + element.height > y
5755     ┃   ┃   ┃   ┣━ return element.x <= x and element.y <= y and element.x + element.width > x \
5756     ┃   ┃   ┃   ┗━ return element.x <= x and element.y <= y and element.x + element.width > x \
5757     ┃   ┃   ┣━ if is_placed(element) and contains(element, event.x, event.y):
5758     ┃   ┃   ┣━ if hasattr(element, event.type):
5759     ┃   ┃   ┣━ if hasattr(element, "children"):
5760     ┃   ┃   ┣━ for child in element.children:
5761     ┃   ┃   ┣━ fire(child, event, level + 1)
5762     ┃   ┃   ┃   ┣━ indent = "  " * level
5763     ┃   ┃   ┃   ┣━ if hasattr(event, "x") and hasattr(event, "y"):
5764     ┃   ┃   ┃   ┣━ if is_placed(element) and contains(element, event.x, event.y):
5765     ┃   ┃   ┃   ┃   ┣━ return hasattr(element, "x") and hasattr(element, "y") \
5766     ┃   ┃   ┃   ┃   ┣━ and hasattr(element, "width") and hasattr(element, "height")
5767     ┃   ┃   ┃   ┃   ┣━ return hasattr(element, "x") and hasattr(element, "y") \
5768     ┃   ┃   ┃   ┃   ┣━ and hasattr(element, "width") and hasattr(element, "height")
5769     ┃   ┃   ┃   ┃   ┣━ return hasattr(element, "x") and hasattr(element, "y") \
5770     ┃   ┃   ┃   ┃   ┗━ return hasattr(element, "x") and hasattr(element, "y") \
5771     ┃   ┃   ┃   ┣━ if is_placed(element) and contains(element, event.x, event.y):
5772     ┃   ┃   ┃   ┃   ┣━ return element.x <= x and element.y <= y and element.x + element.width > x \
5773     ┃   ┃   ┃   ┃   ┣━ and element.y + element.height > y
5774     ┃   ┃   ┃   ┃   ┣━ return element.x <= x and element.y <= y and element.x + element.width > x \
5775     ┃   ┃   ┃   ┃   ┗━ return element.x <= x and element.y <= y and element.x + element.width > x \
5776     ┃   ┃   ┃   ┣━ if is_placed(element) and contains(element, event.x, event.y):
5777     ┃   ┃   ┃   ┣━ return
5778     ┃   ┃   ┃   ┗━ return
5779     ┃   ┃   ┣━ fire(child, event, level + 1)
5780     ┃   ┃   ┣━ for child in element.children:
5781     ┃   ┃   ┣━ fire(child, event, level + 1)
5782     ┃   ┃   ┃   ┣━ indent = "  " * level
5783     ┃   ┃   ┃   ┣━ if hasattr(event, "x") and hasattr(event, "y"):
5784     ┃   ┃   ┃   ┣━ if is_placed(element) and contains(element, event.x, event.y):
5785     ┃   ┃   ┃   ┃   ┣━ return hasattr(element, "x") and hasattr(element, "y") \
5786     ┃   ┃   ┃   ┃   ┣━ and hasattr(element, "width") and hasattr(element, "height")
5787     ┃   ┃   ┃   ┃   ┣━ return hasattr(element, "x") and hasattr(element, "y") \
5788     ┃   ┃   ┃   ┃   ┣━ and hasattr(element, "width") and hasattr(element, "height")
5789     ┃   ┃   ┃   ┃   ┣━ return hasattr(element, "x") and hasattr(element, "y") \
5790     ┃   ┃   ┃   ┃   ┗━ return hasattr(element, "x") and hasattr(element, "y") \
5791     ┃   ┃   ┃   ┣━ if is_placed(element) and contains(element, event.x, event.y):
5792     ┃   ┃   ┃   ┃   ┣━ return element.x <= x and element.y <= y and element.x + element.width > x \
5793     ┃   ┃   ┃   ┃   ┣━ and element.y + element.height > y
5794     ┃   ┃   ┃   ┃   ┣━ return element.x <= x and element.y <= y and element.x + element.width > x \
5795     ┃   ┃   ┃   ┃   ┗━ return element.x <= x and element.y <= y and element.x + element.width > x \
5796     ┃   ┃   ┃   ┣━ if is_placed(element) and contains(element, event.x, event.y):
5797     ┃   ┃   ┃   ┣━ if hasattr(element, event.type):
5798     ┃   ┃   ┃   ┣━ if hasattr(element, "children"):
5799     ┃   ┃   ┃   ┣━ for child in element.children:
5800     ┃   ┃   ┃   ┣━ fire(child, event, level + 1)
5801     ┃   ┃   ┃   ┃   ┣━ indent = "  " * level
5802     ┃   ┃   ┃   ┃   ┣━ if hasattr(event, "x") and hasattr(event, "y"):
5803     ┃   ┃   ┃   ┃   ┣━ if is_placed(element) and contains(element, event.x, event.y):
5804     ┃   ┃   ┃   ┃   ┃   ┣━ return hasattr(element, "x") and hasattr(element, "y") \
5805     ┃   ┃   ┃   ┃   ┃   ┣━ and hasattr(element, "width") and hasattr(element, "height")
5806     ┃   ┃   ┃   ┃   ┃   ┣━ return hasattr(element, "x") and hasattr(element, "y") \
5807     ┃   ┃   ┃   ┃   ┃   ┣━ and hasattr(element, "width") and hasattr(element, "height")
5808     ┃   ┃   ┃   ┃   ┃   ┣━ return hasattr(element, "x") and hasattr(element, "y") \
5809     ┃   ┃   ┃   ┃   ┃   ┗━ return hasattr(element, "x") and hasattr(element, "y") \
5810     ┃   ┃   ┃   ┃   ┣━ if is_placed(element) and contains(element, event.x, event.y):
5811     ┃   ┃   ┃   ┃   ┃   ┣━ return element.x <= x and element.y <= y and element.x + element.width > x \
5812     ┃   ┃   ┃   ┃   ┃   ┣━ and element.y + element.height > y
5813     ┃   ┃   ┃   ┃   ┃   ┣━ return element.x <= x and element.y <= y and element.x + element.width > x \
5814     ┃   ┃   ┃   ┃   ┃   ┗━ return element.x <= x and element.y <= y and element.x + element.width > x \
5815     ┃   ┃   ┃   ┃   ┣━ if is_placed(element) and contains(element, event.x, event.y):
5816     ┃   ┃   ┃   ┃   ┣━ if hasattr(element, event.type):
5817     ┃   ┃   ┃   ┃   ┣━ log(indent + "calling handler fn")
5818     ┃   ┃   ┃   ┃   ┃   ┣━ logfile.write(text + "\n")
5819     ┃   ┃   ┃   ┃   ┃   ┣━ logfile.flush()
5820     ┃   ┃   ┃   ┃   ┃   ┗━ logfile.flush()
5821     ┃   ┃   ┃   ┃   ┣━ log(indent + "calling handler fn")
5822     ┃   ┃   ┃   ┃   ┣━ handler_fn = getattr(element, event.type)
5823     ┃   ┃   ┃   ┃   ┣━ handler_fn(event)
5824     ┃   ┃   ┃   ┃   ┃   ┣━ label.text = "Nice! You clicked!"
5825     ┃   ┃   ┃   ┃   ┃   ┗━ label.text = "Nice! You clicked!"
5826     ┃   ┃   ┃   ┃   ┣━ handler_fn(event)
5827     ┃   ┃   ┃   ┃   ┣━ if hasattr(element, "children"):
5828     ┃   ┃   ┃   ┃   ┣━ for child in element.children:
5829     ┃   ┃   ┃   ┃   ┣━ fire(child, event, level + 1)
5830     ┃   ┃   ┃   ┃   ┃   ┣━ indent = "  " * level
5831     ┃   ┃   ┃   ┃   ┃   ┣━ if hasattr(event, "x") and hasattr(event, "y"):
5832     ┃   ┃   ┃   ┃   ┃   ┣━ if is_placed(element) and contains(element, event.x, event.y):
5833     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ return hasattr(element, "x") and hasattr(element, "y") \
5834     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ and hasattr(element, "width") and hasattr(element, "height")
5835     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ return hasattr(element, "x") and hasattr(element, "y") \
5836     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ and hasattr(element, "width") and hasattr(element, "height")
5837     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ return hasattr(element, "x") and hasattr(element, "y") \
5838     ┃   ┃   ┃   ┃   ┃   ┃   ┗━ return hasattr(element, "x") and hasattr(element, "y") \
5839     ┃   ┃   ┃   ┃   ┃   ┣━ if is_placed(element) and contains(element, event.x, event.y):
5840     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ return element.x <= x and element.y <= y and element.x + element.width > x \
5841     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ and element.y + element.height > y
5842     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ return element.x <= x and element.y <= y and element.x + element.width > x \
5843     ┃   ┃   ┃   ┃   ┃   ┃   ┗━ return element.x <= x and element.y <= y and element.x + element.width > x \
5844     ┃   ┃   ┃   ┃   ┃   ┣━ if is_placed(element) and contains(element, event.x, event.y):
5845     ┃   ┃   ┃   ┃   ┃   ┣━ if hasattr(element, event.type):
5846     ┃   ┃   ┃   ┃   ┃   ┣━ if hasattr(element, "children"):
5847     ┃   ┃   ┃   ┃   ┃   ┣━ for child in element.children:
5848     ┃   ┃   ┃   ┃   ┃   ┣━ fire(child, event, level + 1)
5849     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ indent = "  " * level
5850     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ if hasattr(event, "x") and hasattr(event, "y"):
5851     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ if is_placed(element) and contains(element, event.x, event.y):
5852     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ return hasattr(element, "x") and hasattr(element, "y") \
5853     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ and hasattr(element, "width") and hasattr(element, "height")
5854     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ return hasattr(element, "x") and hasattr(element, "y") \
5855     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ and hasattr(element, "width") and hasattr(element, "height")
5856     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ return hasattr(element, "x") and hasattr(element, "y") \
5857     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ return hasattr(element, "x") and hasattr(element, "y") \
5858     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ if is_placed(element) and contains(element, event.x, event.y):
5859     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ return element.x <= x and element.y <= y and element.x + element.width > x \
5860     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ and element.y + element.height > y
5861     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ return element.x <= x and element.y <= y and element.x + element.width > x \
5862     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ return element.x <= x and element.y <= y and element.x + element.width > x \
5863     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ if is_placed(element) and contains(element, event.x, event.y):
5864     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ if hasattr(element, event.type):
5865     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ if hasattr(element, "children"):
5866     ┃   ┃   ┃   ┃   ┃   ┃   ┗━ if hasattr(element, "children"):
5867     ┃   ┃   ┃   ┃   ┃   ┣━ fire(child, event, level + 1)
5868     ┃   ┃   ┃   ┃   ┃   ┣━ for child in element.children:
5869     ┃   ┃   ┃   ┃   ┃   ┗━ for child in element.children:
5870     ┃   ┃   ┃   ┃   ┣━ fire(child, event, level + 1)
5871     ┃   ┃   ┃   ┃   ┣━ for child in element.children:
5872     ┃   ┃   ┃   ┃   ┗━ for child in element.children:
5873     ┃   ┃   ┃   ┣━ fire(child, event, level + 1)
5874     ┃   ┃   ┃   ┣━ for child in element.children:
5875     ┃   ┃   ┃   ┣━ fire(child, event, level + 1)
5876     ┃   ┃   ┃   ┃   ┣━ indent = "  " * level
5877     ┃   ┃   ┃   ┃   ┣━ if hasattr(event, "x") and hasattr(event, "y"):
5878     ┃   ┃   ┃   ┃   ┣━ if is_placed(element) and contains(element, event.x, event.y):
5879     ┃   ┃   ┃   ┃   ┃   ┣━ return hasattr(element, "x") and hasattr(element, "y") \
5880     ┃   ┃   ┃   ┃   ┃   ┣━ and hasattr(element, "width") and hasattr(element, "height")
5881     ┃   ┃   ┃   ┃   ┃   ┣━ return hasattr(element, "x") and hasattr(element, "y") \
5882     ┃   ┃   ┃   ┃   ┃   ┣━ and hasattr(element, "width") and hasattr(element, "height")
5883     ┃   ┃   ┃   ┃   ┃   ┣━ return hasattr(element, "x") and hasattr(element, "y") \
5884     ┃   ┃   ┃   ┃   ┃   ┗━ return hasattr(element, "x") and hasattr(element, "y") \
5885     ┃   ┃   ┃   ┃   ┣━ if is_placed(element) and contains(element, event.x, event.y):
5886     ┃   ┃   ┃   ┃   ┃   ┣━ return element.x <= x and element.y <= y and element.x + element.width > x \
5887     ┃   ┃   ┃   ┃   ┃   ┗━ return element.x <= x and element.y <= y and element.x + element.width > x \
5888     ┃   ┃   ┃   ┃   ┣━ if is_placed(element) and contains(element, event.x, event.y):
5889     ┃   ┃   ┃   ┃   ┣━ return
5890     ┃   ┃   ┃   ┃   ┗━ return
5891     ┃   ┃   ┃   ┣━ fire(child, event, level + 1)
5892     ┃   ┃   ┃   ┣━ for child in element.children:
5893     ┃   ┃   ┃   ┗━ for child in element.children:
5894     ┃   ┃   ┣━ fire(child, event, level + 1)
5895     ┃   ┃   ┣━ for child in element.children:
5896     ┃   ┃   ┣━ fire(child, event, level + 1)
5897     ┃   ┃   ┃   ┣━ indent = "  " * level
5898     ┃   ┃   ┃   ┣━ if hasattr(event, "x") and hasattr(event, "y"):
5899     ┃   ┃   ┃   ┣━ if is_placed(element) and contains(element, event.x, event.y):
5900     ┃   ┃   ┃   ┃   ┣━ return hasattr(element, "x") and hasattr(element, "y") \
5901     ┃   ┃   ┃   ┃   ┣━ and hasattr(element, "width") and hasattr(element, "height")
5902     ┃   ┃   ┃   ┃   ┣━ return hasattr(element, "x") and hasattr(element, "y") \
5903     ┃   ┃   ┃   ┃   ┣━ and hasattr(element, "width") and hasattr(element, "height")
5904     ┃   ┃   ┃   ┃   ┣━ return hasattr(element, "x") and hasattr(element, "y") \
5905     ┃   ┃   ┃   ┃   ┗━ return hasattr(element, "x") and hasattr(element, "y") \
5906     ┃   ┃   ┃   ┣━ if is_placed(element) and contains(element, event.x, event.y):
5907     ┃   ┃   ┃   ┃   ┣━ return element.x <= x and element.y <= y and element.x + element.width > x \
5908     ┃   ┃   ┃   ┃   ┗━ return element.x <= x and element.y <= y and element.x + element.width > x \
5909     ┃   ┃   ┃   ┣━ if is_placed(element) and contains(element, event.x, event.y):
5910     ┃   ┃   ┃   ┣━ return
5911     ┃   ┃   ┃   ┗━ return
5912     ┃   ┃   ┣━ fire(child, event, level + 1)
5913     ┃   ┃   ┣━ for child in element.children:
5914     ┃   ┃   ┣━ fire(child, event, level + 1)
5915     ┃   ┃   ┃   ┣━ indent = "  " * level
5916     ┃   ┃   ┃   ┣━ if hasattr(event, "x") and hasattr(event, "y"):
5917     ┃   ┃   ┃   ┣━ if is_placed(element) and contains(element, event.x, event.y):
5918     ┃   ┃   ┃   ┃   ┣━ return hasattr(element, "x") and hasattr(element, "y") \
5919     ┃   ┃   ┃   ┃   ┣━ and hasattr(element, "width") and hasattr(element, "height")
5920     ┃   ┃   ┃   ┃   ┣━ return hasattr(element, "x") and hasattr(element, "y") \
5921     ┃   ┃   ┃   ┃   ┣━ and hasattr(element, "width") and hasattr(element, "height")
5922     ┃   ┃   ┃   ┃   ┣━ return hasattr(element, "x") and hasattr(element, "y") \
5923     ┃   ┃   ┃   ┃   ┗━ return hasattr(element, "x") and hasattr(element, "y") \
5924     ┃   ┃   ┃   ┣━ if is_placed(element) and contains(element, event.x, event.y):
5925     ┃   ┃   ┃   ┃   ┣━ return element.x <= x and element.y <= y and element.x + element.width > x \
5926     ┃   ┃   ┃   ┃   ┗━ return element.x <= x and element.y <= y and element.x + element.width > x \
5927     ┃   ┃   ┃   ┣━ if is_placed(element) and contains(element, event.x, event.y):
5928     ┃   ┃   ┃   ┣━ return
5929     ┃   ┃   ┃   ┗━ return
5930     ┃   ┃   ┣━ fire(child, event, level + 1)
5931     ┃   ┃   ┣━ for child in element.children:
5932     ┃   ┃   ┗━ for child in element.children:
5933     ┃   ┣━ fire(root_element, event)
5934     ┃   ┣━ for event in events:
5935     ┃   ┣━ if handler:
5936     ┃   ┣━ root_element.place(1, 1, screen_width, screen_height, get_stretch(root_element), 0)
5937     ┃   ┃   ┣━ return getattr(element, "stretch", None)
5938     ┃   ┃   ┗━ return getattr(element, "stretch", None)
5939     ┃   ┣━ root_element.place(1, 1, screen_width, screen_height, get_stretch(root_element), 0)
5940     ┃   ┃   ┣━ indent = level * "  "
5941     ┃   ┃   ┣━ self.x = x
5942     ┃   ┃   ┣━ self.y = y
5943     ┃   ┃   ┣━ non_stretched = filter(lambda c: not has_stretch_y(c), self.children)
5944     ┃   ┃   ┣━ stretched = filter(has_stretch_y, self.children)
5945     ┃   ┃   ┣━ num_stretched = len(list(stretched))
5946     ┃   ┃   ┃   ┣━ return get_stretch(element) in ["y", "both"]
5947     ┃   ┃   ┃   ┃   ┣━ return getattr(element, "stretch", None)
5948     ┃   ┃   ┃   ┃   ┗━ return getattr(element, "stretch", None)
5949     ┃   ┃   ┃   ┣━ return get_stretch(element) in ["y", "both"]
5950     ┃   ┃   ┃   ┣━ return get_stretch(element) in ["y", "both"]
5951     ┃   ┃   ┃   ┣━ return get_stretch(element) in ["y", "both"]
5952     ┃   ┃   ┃   ┃   ┣━ return getattr(element, "stretch", None)
5953     ┃   ┃   ┃   ┃   ┗━ return getattr(element, "stretch", None)
5954     ┃   ┃   ┃   ┣━ return get_stretch(element) in ["y", "both"]
5955     ┃   ┃   ┃   ┣━ return get_stretch(element) in ["y", "both"]
5956     ┃   ┃   ┃   ┣━ return get_stretch(element) in ["y", "both"]
5957     ┃   ┃   ┃   ┃   ┣━ return getattr(element, "stretch", None)
5958     ┃   ┃   ┃   ┃   ┗━ return getattr(element, "stretch", None)
5959     ┃   ┃   ┃   ┣━ return get_stretch(element) in ["y", "both"]
5960     ┃   ┃   ┃   ┣━ return get_stretch(element) in ["y", "both"]
5961     ┃   ┃   ┃   ┣━ return get_stretch(element) in ["y", "both"]
5962     ┃   ┃   ┃   ┃   ┣━ return getattr(element, "stretch", None)
5963     ┃   ┃   ┃   ┃   ┗━ return getattr(element, "stretch", None)
5964     ┃   ┃   ┃   ┣━ return get_stretch(element) in ["y", "both"]
5965     ┃   ┃   ┃   ┗━ return get_stretch(element) in ["y", "both"]
5966     ┃   ┃   ┣━ num_stretched = len(list(stretched))
5967     ┃   ┃   ┣━ non_stretched_height = 0
5968     ┃   ┃   ┣━ for child in non_stretched:
5969     ┃   ┃   ┃   ┣━ non_stretched = filter(lambda c: not has_stretch_y(c), self.children)
5970     ┃   ┃   ┃   ┃   ┣━ return get_stretch(element) in ["y", "both"]
5971     ┃   ┃   ┃   ┃   ┃   ┣━ return getattr(element, "stretch", None)
5972     ┃   ┃   ┃   ┃   ┃   ┗━ return getattr(element, "stretch", None)
5973     ┃   ┃   ┃   ┃   ┣━ return get_stretch(element) in ["y", "both"]
5974     ┃   ┃   ┃   ┃   ┗━ return get_stretch(element) in ["y", "both"]
5975     ┃   ┃   ┃   ┣━ non_stretched = filter(lambda c: not has_stretch_y(c), self.children)
5976     ┃   ┃   ┃   ┗━ non_stretched = filter(lambda c: not has_stretch_y(c), self.children)
5977     ┃   ┃   ┣━ for child in non_stretched:
5978     ┃   ┃   ┣━ child.place(self.x, self.y, max_width, max_height, None, level + 1)
5979     ┃   ┃   ┃   ┣━ indent = level * "  "
5980     ┃   ┃   ┃   ┣━ self.x = x
5981     ┃   ┃   ┃   ┣━ self.y = y
5982     ┃   ┃   ┃   ┣━ if stretch in ["x", "both"]:
5983     ┃   ┃   ┃   ┣━ self.width = min(max_width, len(self.text))
5984     ┃   ┃   ┃   ┣━ if stretch in ["y", "both"]:
5985     ┃   ┃   ┃   ┣━ self.height = 1
5986     ┃   ┃   ┃   ┗━ self.height = 1
5987     ┃   ┃   ┣━ child.place(self.x, self.y, max_width, max_height, None, level + 1)
5988     ┃   ┃   ┣━ non_stretched_height += child.height
5989     ┃   ┃   ┣━ for child in non_stretched:
5990     ┃   ┃   ┃   ┣━ non_stretched = filter(lambda c: not has_stretch_y(c), self.children)
5991     ┃   ┃   ┃   ┃   ┣━ return get_stretch(element) in ["y", "both"]
5992     ┃   ┃   ┃   ┃   ┃   ┣━ return getattr(element, "stretch", None)
5993     ┃   ┃   ┃   ┃   ┃   ┗━ return getattr(element, "stretch", None)
5994     ┃   ┃   ┃   ┃   ┣━ return get_stretch(element) in ["y", "both"]
5995     ┃   ┃   ┃   ┃   ┗━ return get_stretch(element) in ["y", "both"]
5996     ┃   ┃   ┃   ┣━ non_stretched = filter(lambda c: not has_stretch_y(c), self.children)
5997     ┃   ┃   ┃   ┗━ non_stretched = filter(lambda c: not has_stretch_y(c), self.children)
5998     ┃   ┃   ┣━ for child in non_stretched:
5999     ┃   ┃   ┣━ child.place(self.x, self.y, max_width, max_height, None, level + 1)
6000     ┃   ┃   ┃   ┣━ indent = level * "  "
6001     ┃   ┃   ┃   ┣━ self.x = x
6002     ┃   ┃   ┃   ┣━ self.y = y
6003     ┃   ┃   ┃   ┣━ non_stretched = filter(lambda c: not has_stretch_x(c), self.children)
6004     ┃   ┃   ┃   ┣━ stretched = filter(has_stretch_x, self.children)
6005     ┃   ┃   ┃   ┣━ num_stretched = len(list(stretched))
6006     ┃   ┃   ┃   ┃   ┣━ return get_stretch(element) in ["x", "both"]
6007     ┃   ┃   ┃   ┃   ┃   ┣━ return getattr(element, "stretch", None)
6008     ┃   ┃   ┃   ┃   ┃   ┗━ return getattr(element, "stretch", None)
6009     ┃   ┃   ┃   ┃   ┣━ return get_stretch(element) in ["x", "both"]
6010     ┃   ┃   ┃   ┃   ┣━ return get_stretch(element) in ["x", "both"]
6011     ┃   ┃   ┃   ┃   ┣━ return get_stretch(element) in ["x", "both"]
6012     ┃   ┃   ┃   ┃   ┃   ┣━ return getattr(element, "stretch", None)
6013     ┃   ┃   ┃   ┃   ┃   ┗━ return getattr(element, "stretch", None)
6014     ┃   ┃   ┃   ┃   ┣━ return get_stretch(element) in ["x", "both"]
6015     ┃   ┃   ┃   ┃   ┗━ return get_stretch(element) in ["x", "both"]
6016     ┃   ┃   ┃   ┣━ num_stretched = len(list(stretched))
6017     ┃   ┃   ┃   ┣━ non_stretch_width = 0
6018     ┃   ┃   ┃   ┣━ for child in non_stretched:
6019     ┃   ┃   ┃   ┃   ┣━ non_stretched = filter(lambda c: not has_stretch_x(c), self.children)
6020     ┃   ┃   ┃   ┃   ┃   ┣━ return get_stretch(element) in ["x", "both"]
6021     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ return getattr(element, "stretch", None)
6022     ┃   ┃   ┃   ┃   ┃   ┃   ┗━ return getattr(element, "stretch", None)
6023     ┃   ┃   ┃   ┃   ┃   ┣━ return get_stretch(element) in ["x", "both"]
6024     ┃   ┃   ┃   ┃   ┃   ┗━ return get_stretch(element) in ["x", "both"]
6025     ┃   ┃   ┃   ┃   ┣━ non_stretched = filter(lambda c: not has_stretch_x(c), self.children)
6026     ┃   ┃   ┃   ┃   ┗━ non_stretched = filter(lambda c: not has_stretch_x(c), self.children)
6027     ┃   ┃   ┃   ┣━ for child in non_stretched:
6028     ┃   ┃   ┃   ┣━ child.place(self.x, self.y, max_width, max_height, None, level + 1)
6029     ┃   ┃   ┃   ┃   ┣━ indent = level * "  "
6030     ┃   ┃   ┃   ┃   ┣━ self.border.place(x, y, max_width, max_height, stretch, level + 1)
6031     ┃   ┃   ┃   ┃   ┃   ┣━ indent = level * "  "
6032     ┃   ┃   ┃   ┃   ┃   ┣━ self.x = x
6033     ┃   ┃   ┃   ┃   ┃   ┣━ self.y = y
6034     ┃   ┃   ┃   ┃   ┃   ┣━ self.content.place(x + 1, y + 1, max_width - 2, max_height - 2, stretch, level + 1)
6035     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ indent = level * "  "
6036     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ self.x = x
6037     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ self.y = y
6038     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ if stretch in ["x", "both"]:
6039     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ self.width = min(max_width, len(self.text))
6040     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ if stretch in ["y", "both"]:
6041     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ self.height = 1
6042     ┃   ┃   ┃   ┃   ┃   ┃   ┗━ self.height = 1
6043     ┃   ┃   ┃   ┃   ┃   ┣━ self.content.place(x + 1, y + 1, max_width - 2, max_height - 2, stretch, level + 1)
6044     ┃   ┃   ┃   ┃   ┃   ┣━ self.width = self.content.width + 2
6045     ┃   ┃   ┃   ┃   ┃   ┣━ self.height = self.content.height + 2
6046     ┃   ┃   ┃   ┃   ┃   ┗━ self.height = self.content.height + 2
6047     ┃   ┃   ┃   ┃   ┣━ self.border.place(x, y, max_width, max_height, stretch, level + 1)
6048     ┃   ┃   ┃   ┃   ┣━ self.x = x
6049     ┃   ┃   ┃   ┃   ┣━ self.y = y
6050     ┃   ┃   ┃   ┃   ┣━ self.width = self.border.width
6051     ┃   ┃   ┃   ┃   ┣━ self.height = self.border.height
6052     ┃   ┃   ┃   ┃   ┗━ self.height = self.border.height
6053     ┃   ┃   ┃   ┣━ child.place(self.x, self.y, max_width, max_height, None, level + 1)
6054     ┃   ┃   ┃   ┣━ non_stretch_width += child.width
6055     ┃   ┃   ┃   ┣━ for child in non_stretched:
6056     ┃   ┃   ┃   ┃   ┣━ non_stretched = filter(lambda c: not has_stretch_x(c), self.children)
6057     ┃   ┃   ┃   ┃   ┃   ┣━ return get_stretch(element) in ["x", "both"]
6058     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ return getattr(element, "stretch", None)
6059     ┃   ┃   ┃   ┃   ┃   ┃   ┗━ return getattr(element, "stretch", None)
6060     ┃   ┃   ┃   ┃   ┃   ┣━ return get_stretch(element) in ["x", "both"]
6061     ┃   ┃   ┃   ┃   ┃   ┗━ return get_stretch(element) in ["x", "both"]
6062     ┃   ┃   ┃   ┃   ┣━ non_stretched = filter(lambda c: not has_stretch_x(c), self.children)
6063     ┃   ┃   ┃   ┃   ┗━ non_stretched = filter(lambda c: not has_stretch_x(c), self.children)
6064     ┃   ┃   ┃   ┣━ for child in non_stretched:
6065     ┃   ┃   ┃   ┣━ child.place(self.x, self.y, max_width, max_height, None, level + 1)
6066     ┃   ┃   ┃   ┃   ┣━ indent = level * "  "
6067     ┃   ┃   ┃   ┃   ┣━ self.border.place(x, y, max_width, max_height, stretch, level + 1)
6068     ┃   ┃   ┃   ┃   ┃   ┣━ indent = level * "  "
6069     ┃   ┃   ┃   ┃   ┃   ┣━ self.x = x
6070     ┃   ┃   ┃   ┃   ┃   ┣━ self.y = y
6071     ┃   ┃   ┃   ┃   ┃   ┣━ self.content.place(x + 1, y + 1, max_width - 2, max_height - 2, stretch, level + 1)
6072     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ indent = level * "  "
6073     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ self.x = x
6074     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ self.y = y
6075     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ if stretch in ["x", "both"]:
6076     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ self.width = min(max_width, len(self.text))
6077     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ if stretch in ["y", "both"]:
6078     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ self.height = 1
6079     ┃   ┃   ┃   ┃   ┃   ┃   ┗━ self.height = 1
6080     ┃   ┃   ┃   ┃   ┃   ┣━ self.content.place(x + 1, y + 1, max_width - 2, max_height - 2, stretch, level + 1)
6081     ┃   ┃   ┃   ┃   ┃   ┣━ self.width = self.content.width + 2
6082     ┃   ┃   ┃   ┃   ┃   ┣━ self.height = self.content.height + 2
6083     ┃   ┃   ┃   ┃   ┃   ┗━ self.height = self.content.height + 2
6084     ┃   ┃   ┃   ┃   ┣━ self.border.place(x, y, max_width, max_height, stretch, level + 1)
6085     ┃   ┃   ┃   ┃   ┣━ self.x = x
6086     ┃   ┃   ┃   ┃   ┣━ self.y = y
6087     ┃   ┃   ┃   ┃   ┣━ self.width = self.border.width
6088     ┃   ┃   ┃   ┃   ┣━ self.height = self.border.height
6089     ┃   ┃   ┃   ┃   ┗━ self.height = self.border.height
6090     ┃   ┃   ┃   ┣━ child.place(self.x, self.y, max_width, max_height, None, level + 1)
6091     ┃   ┃   ┃   ┣━ non_stretch_width += child.width
6092     ┃   ┃   ┃   ┣━ for child in non_stretched:
6093     ┃   ┃   ┃   ┣━ stretch_width = max_width - non_stretch_width
6094     ┃   ┃   ┃   ┣━ stretch_width_per = (stretch_width // num_stretched) if num_stretched > 0 else 0
6095     ┃   ┃   ┃   ┣━ x_offset = 0
6096     ┃   ┃   ┃   ┣━ my_height = 0
6097     ┃   ┃   ┃   ┣━ for child in self.children:
6098     ┃   ┃   ┃   ┣━ if has_stretch_x(child):
6099     ┃   ┃   ┃   ┃   ┣━ return get_stretch(element) in ["x", "both"]
6100     ┃   ┃   ┃   ┃   ┃   ┣━ return getattr(element, "stretch", None)
6101     ┃   ┃   ┃   ┃   ┃   ┗━ return getattr(element, "stretch", None)
6102     ┃   ┃   ┃   ┃   ┣━ return get_stretch(element) in ["x", "both"]
6103     ┃   ┃   ┃   ┃   ┗━ return get_stretch(element) in ["x", "both"]
6104     ┃   ┃   ┃   ┣━ if has_stretch_x(child):
6105     ┃   ┃   ┃   ┣━ log(indent + "(B)")
6106     ┃   ┃   ┃   ┃   ┣━ logfile.write(text + "\n")
6107     ┃   ┃   ┃   ┃   ┣━ logfile.flush()
6108     ┃   ┃   ┃   ┃   ┗━ logfile.flush()
6109     ┃   ┃   ┃   ┣━ log(indent + "(B)")
6110     ┃   ┃   ┃   ┣━ child.place(self.x + x_offset, self.y, 
6111     ┃   ┃   ┃   ┣━ max_width - x_offset, max_height, 
6112     ┃   ┃   ┃   ┣━ get_stretch(child), level + 1)
6113     ┃   ┃   ┃   ┃   ┣━ return getattr(element, "stretch", None)
6114     ┃   ┃   ┃   ┃   ┗━ return getattr(element, "stretch", None)
6115     ┃   ┃   ┃   ┣━ get_stretch(child), level + 1)
6116     ┃   ┃   ┃   ┣━ child.place(self.x + x_offset, self.y, 
6117     ┃   ┃   ┃   ┃   ┣━ indent = level * "  "
6118     ┃   ┃   ┃   ┃   ┣━ self.border.place(x, y, max_width, max_height, stretch, level + 1)
6119     ┃   ┃   ┃   ┃   ┃   ┣━ indent = level * "  "
6120     ┃   ┃   ┃   ┃   ┃   ┣━ self.x = x
6121     ┃   ┃   ┃   ┃   ┃   ┣━ self.y = y
6122     ┃   ┃   ┃   ┃   ┃   ┣━ self.content.place(x + 1, y + 1, max_width - 2, max_height - 2, stretch, level + 1)
6123     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ indent = level * "  "
6124     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ self.x = x
6125     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ self.y = y
6126     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ if stretch in ["x", "both"]:
6127     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ self.width = min(max_width, len(self.text))
6128     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ if stretch in ["y", "both"]:
6129     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ self.height = 1
6130     ┃   ┃   ┃   ┃   ┃   ┃   ┗━ self.height = 1
6131     ┃   ┃   ┃   ┃   ┃   ┣━ self.content.place(x + 1, y + 1, max_width - 2, max_height - 2, stretch, level + 1)
6132     ┃   ┃   ┃   ┃   ┃   ┣━ self.width = self.content.width + 2
6133     ┃   ┃   ┃   ┃   ┃   ┣━ self.height = self.content.height + 2
6134     ┃   ┃   ┃   ┃   ┃   ┗━ self.height = self.content.height + 2
6135     ┃   ┃   ┃   ┃   ┣━ self.border.place(x, y, max_width, max_height, stretch, level + 1)
6136     ┃   ┃   ┃   ┃   ┣━ self.x = x
6137     ┃   ┃   ┃   ┃   ┣━ self.y = y
6138     ┃   ┃   ┃   ┃   ┣━ self.width = self.border.width
6139     ┃   ┃   ┃   ┃   ┣━ self.height = self.border.height
6140     ┃   ┃   ┃   ┃   ┗━ self.height = self.border.height
6141     ┃   ┃   ┃   ┣━ child.place(self.x + x_offset, self.y, 
6142     ┃   ┃   ┃   ┣━ x_offset += child.width
6143     ┃   ┃   ┃   ┣━ if child.height > my_height:
6144     ┃   ┃   ┃   ┣━ my_height = child.height
6145     ┃   ┃   ┃   ┣━ if x_offset >= max_width:
6146     ┃   ┃   ┃   ┣━ for child in self.children:
6147     ┃   ┃   ┃   ┣━ if has_stretch_x(child):
6148     ┃   ┃   ┃   ┃   ┣━ return get_stretch(element) in ["x", "both"]
6149     ┃   ┃   ┃   ┃   ┃   ┣━ return getattr(element, "stretch", None)
6150     ┃   ┃   ┃   ┃   ┃   ┗━ return getattr(element, "stretch", None)
6151     ┃   ┃   ┃   ┃   ┣━ return get_stretch(element) in ["x", "both"]
6152     ┃   ┃   ┃   ┃   ┗━ return get_stretch(element) in ["x", "both"]
6153     ┃   ┃   ┃   ┣━ if has_stretch_x(child):
6154     ┃   ┃   ┃   ┣━ log(indent + "(B)")
6155     ┃   ┃   ┃   ┃   ┣━ logfile.write(text + "\n")
6156     ┃   ┃   ┃   ┃   ┣━ logfile.flush()
6157     ┃   ┃   ┃   ┃   ┗━ logfile.flush()
6158     ┃   ┃   ┃   ┣━ log(indent + "(B)")
6159     ┃   ┃   ┃   ┣━ child.place(self.x + x_offset, self.y, 
6160     ┃   ┃   ┃   ┣━ max_width - x_offset, max_height, 
6161     ┃   ┃   ┃   ┣━ get_stretch(child), level + 1)
6162     ┃   ┃   ┃   ┃   ┣━ return getattr(element, "stretch", None)
6163     ┃   ┃   ┃   ┃   ┗━ return getattr(element, "stretch", None)
6164     ┃   ┃   ┃   ┣━ get_stretch(child), level + 1)
6165     ┃   ┃   ┃   ┣━ child.place(self.x + x_offset, self.y, 
6166     ┃   ┃   ┃   ┃   ┣━ indent = level * "  "
6167     ┃   ┃   ┃   ┃   ┣━ self.border.place(x, y, max_width, max_height, stretch, level + 1)
6168     ┃   ┃   ┃   ┃   ┃   ┣━ indent = level * "  "
6169     ┃   ┃   ┃   ┃   ┃   ┣━ self.x = x
6170     ┃   ┃   ┃   ┃   ┃   ┣━ self.y = y
6171     ┃   ┃   ┃   ┃   ┃   ┣━ self.content.place(x + 1, y + 1, max_width - 2, max_height - 2, stretch, level + 1)
6172     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ indent = level * "  "
6173     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ self.x = x
6174     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ self.y = y
6175     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ if stretch in ["x", "both"]:
6176     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ self.width = min(max_width, len(self.text))
6177     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ if stretch in ["y", "both"]:
6178     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ self.height = 1
6179     ┃   ┃   ┃   ┃   ┃   ┃   ┗━ self.height = 1
6180     ┃   ┃   ┃   ┃   ┃   ┣━ self.content.place(x + 1, y + 1, max_width - 2, max_height - 2, stretch, level + 1)
6181     ┃   ┃   ┃   ┃   ┃   ┣━ self.width = self.content.width + 2
6182     ┃   ┃   ┃   ┃   ┃   ┣━ self.height = self.content.height + 2
6183     ┃   ┃   ┃   ┃   ┃   ┗━ self.height = self.content.height + 2
6184     ┃   ┃   ┃   ┃   ┣━ self.border.place(x, y, max_width, max_height, stretch, level + 1)
6185     ┃   ┃   ┃   ┃   ┣━ self.x = x
6186     ┃   ┃   ┃   ┃   ┣━ self.y = y
6187     ┃   ┃   ┃   ┃   ┣━ self.width = self.border.width
6188     ┃   ┃   ┃   ┃   ┣━ self.height = self.border.height
6189     ┃   ┃   ┃   ┃   ┗━ self.height = self.border.height
6190     ┃   ┃   ┃   ┣━ child.place(self.x + x_offset, self.y, 
6191     ┃   ┃   ┃   ┣━ x_offset += child.width
6192     ┃   ┃   ┃   ┣━ if child.height > my_height:
6193     ┃   ┃   ┃   ┣━ if x_offset >= max_width:
6194     ┃   ┃   ┃   ┣━ for child in self.children:
6195     ┃   ┃   ┃   ┣━ if stretch in ["x", "both"]:
6196     ┃   ┃   ┃   ┣━ self.width = min(max_width, x_offset)
6197     ┃   ┃   ┃   ┣━ if stretch in ["y", "both"]:
6198     ┃   ┃   ┃   ┣━ self.height = min(max_height, my_height)
6199     ┃   ┃   ┃   ┗━ self.height = min(max_height, my_height)
6200     ┃   ┃   ┣━ child.place(self.x, self.y, max_width, max_height, None, level + 1)
6201     ┃   ┃   ┣━ non_stretched_height += child.height
6202     ┃   ┃   ┣━ for child in non_stretched:
6203     ┃   ┃   ┃   ┣━ non_stretched = filter(lambda c: not has_stretch_y(c), self.children)
6204     ┃   ┃   ┃   ┃   ┣━ return get_stretch(element) in ["y", "both"]
6205     ┃   ┃   ┃   ┃   ┃   ┣━ return getattr(element, "stretch", None)
6206     ┃   ┃   ┃   ┃   ┃   ┗━ return getattr(element, "stretch", None)
6207     ┃   ┃   ┃   ┃   ┣━ return get_stretch(element) in ["y", "both"]
6208     ┃   ┃   ┃   ┃   ┗━ return get_stretch(element) in ["y", "both"]
6209     ┃   ┃   ┃   ┣━ non_stretched = filter(lambda c: not has_stretch_y(c), self.children)
6210     ┃   ┃   ┃   ┗━ non_stretched = filter(lambda c: not has_stretch_y(c), self.children)
6211     ┃   ┃   ┣━ for child in non_stretched:
6212     ┃   ┃   ┣━ child.place(self.x, self.y, max_width, max_height, None, level + 1)
6213     ┃   ┃   ┃   ┣━ logindent = level * "  "
6214     ┃   ┃   ┃   ┣━ self.x = x
6215     ┃   ┃   ┃   ┣━ self.y = y
6216     ┃   ┃   ┃   ┣━ self.height = max_height
6217     ┃   ┃   ┃   ┣━ y_offset = 0
6218     ┃   ┃   ┃   ┣━ indent = 2
6219     ┃   ┃   ┃   ┣━ self.label.place(x + indent, self.y, max_width - indent, max_height, stretch, level + 1)
6220     ┃   ┃   ┃   ┃   ┣━ indent = level * "  "
6221     ┃   ┃   ┃   ┃   ┣━ self.x = x
6222     ┃   ┃   ┃   ┃   ┣━ self.y = y
6223     ┃   ┃   ┃   ┃   ┣━ if stretch in ["x", "both"]:
6224     ┃   ┃   ┃   ┃   ┣━ self.width = min(max_width, len(self.text))
6225     ┃   ┃   ┃   ┃   ┣━ if stretch in ["y", "both"]:
6226     ┃   ┃   ┃   ┃   ┣━ self.height = 1
6227     ┃   ┃   ┃   ┃   ┗━ self.height = 1
6228     ┃   ┃   ┃   ┣━ self.label.place(x + indent, self.y, max_width - indent, max_height, stretch, level + 1)
6229     ┃   ┃   ┃   ┣━ self.width = self.label.width + indent
6230     ┃   ┃   ┃   ┣━ y_offset += self.label.height
6231     ┃   ┃   ┃   ┣━ if self.expanded:
6232     ┃   ┃   ┃   ┣━ for child in self.child_nodes:
6233     ┃   ┃   ┃   ┃   ┣━ return filter(lambda c: c != self.label, self.children)
6234     ┃   ┃   ┃   ┃   ┗━ return filter(lambda c: c != self.label, self.children)
6235     ┃   ┃   ┃   ┣━ for child in self.child_nodes:
6236     ┃   ┃   ┃   ┃   ┣━ return filter(lambda c: c != self.label, self.children)
6237     ┃   ┃   ┃   ┃   ┣━ return filter(lambda c: c != self.label, self.children)
6238     ┃   ┃   ┃   ┃   ┣━ return filter(lambda c: c != self.label, self.children)
6239     ┃   ┃   ┃   ┃   ┗━ return filter(lambda c: c != self.label, self.children)
6240     ┃   ┃   ┃   ┣━ for child in self.child_nodes:
6241     ┃   ┃   ┃   ┣━ unplace(child)
6242     ┃   ┃   ┃   ┃   ┣━ attrs = ["width", "height", "x", "y"]
6243     ┃   ┃   ┃   ┃   ┣━ for attr in attrs:
6244     ┃   ┃   ┃   ┃   ┣━ if hasattr(element, attr):
6245     ┃   ┃   ┃   ┃   ┣━ for attr in attrs:
6246     ┃   ┃   ┃   ┃   ┣━ if hasattr(element, attr):
6247     ┃   ┃   ┃   ┃   ┣━ for attr in attrs:
6248     ┃   ┃   ┃   ┃   ┣━ if hasattr(element, attr):
6249     ┃   ┃   ┃   ┃   ┣━ for attr in attrs:
6250     ┃   ┃   ┃   ┃   ┣━ if hasattr(element, attr):
6251     ┃   ┃   ┃   ┃   ┣━ for attr in attrs:
6252     ┃   ┃   ┃   ┃   ┗━ for attr in attrs:
6253     ┃   ┃   ┃   ┣━ unplace(child)
6254     ┃   ┃   ┃   ┣━ for child in self.child_nodes:
6255     ┃   ┃   ┃   ┃   ┣━ return filter(lambda c: c != self.label, self.children)
6256     ┃   ┃   ┃   ┃   ┗━ return filter(lambda c: c != self.label, self.children)
6257     ┃   ┃   ┃   ┣━ for child in self.child_nodes:
6258     ┃   ┃   ┃   ┣━ unplace(child)
6259     ┃   ┃   ┃   ┃   ┣━ attrs = ["width", "height", "x", "y"]
6260     ┃   ┃   ┃   ┃   ┣━ for attr in attrs:
6261     ┃   ┃   ┃   ┃   ┣━ if hasattr(element, attr):
6262     ┃   ┃   ┃   ┃   ┣━ for attr in attrs:
6263     ┃   ┃   ┃   ┃   ┣━ if hasattr(element, attr):
6264     ┃   ┃   ┃   ┃   ┣━ for attr in attrs:
6265     ┃   ┃   ┃   ┃   ┣━ if hasattr(element, attr):
6266     ┃   ┃   ┃   ┃   ┣━ for attr in attrs:
6267     ┃   ┃   ┃   ┃   ┣━ if hasattr(element, attr):
6268     ┃   ┃   ┃   ┃   ┣━ for attr in attrs:
6269     ┃   ┃   ┃   ┃   ┗━ for attr in attrs:
6270     ┃   ┃   ┃   ┣━ unplace(child)
6271     ┃   ┃   ┃   ┣━ for child in self.child_nodes:
6272     ┃   ┃   ┃   ┃   ┣━ return filter(lambda c: c != self.label, self.children)
6273     ┃   ┃   ┃   ┃   ┗━ return filter(lambda c: c != self.label, self.children)
6274     ┃   ┃   ┃   ┣━ for child in self.child_nodes:
6275     ┃   ┃   ┃   ┣━ unplace(child)
6276     ┃   ┃   ┃   ┃   ┣━ attrs = ["width", "height", "x", "y"]
6277     ┃   ┃   ┃   ┃   ┣━ for attr in attrs:
6278     ┃   ┃   ┃   ┃   ┣━ if hasattr(element, attr):
6279     ┃   ┃   ┃   ┃   ┣━ for attr in attrs:
6280     ┃   ┃   ┃   ┃   ┣━ if hasattr(element, attr):
6281     ┃   ┃   ┃   ┃   ┣━ for attr in attrs:
6282     ┃   ┃   ┃   ┃   ┣━ if hasattr(element, attr):
6283     ┃   ┃   ┃   ┃   ┣━ for attr in attrs:
6284     ┃   ┃   ┃   ┃   ┣━ if hasattr(element, attr):
6285     ┃   ┃   ┃   ┃   ┣━ for attr in attrs:
6286     ┃   ┃   ┃   ┃   ┗━ for attr in attrs:
6287     ┃   ┃   ┃   ┣━ unplace(child)
6288     ┃   ┃   ┃   ┣━ for child in self.child_nodes:
6289     ┃   ┃   ┃   ┣━ self.height = self.label.height
6290     ┃   ┃   ┃   ┗━ self.height = self.label.height
6291     ┃   ┃   ┣━ child.place(self.x, self.y, max_width, max_height, None, level + 1)
6292     ┃   ┃   ┣━ non_stretched_height += child.height
6293     ┃   ┃   ┣━ for child in non_stretched:
6294     ┃   ┃   ┃   ┣━ non_stretched = filter(lambda c: not has_stretch_y(c), self.children)
6295     ┃   ┃   ┃   ┃   ┣━ return get_stretch(element) in ["y", "both"]
6296     ┃   ┃   ┃   ┃   ┃   ┣━ return getattr(element, "stretch", None)
6297     ┃   ┃   ┃   ┃   ┃   ┗━ return getattr(element, "stretch", None)
6298     ┃   ┃   ┃   ┃   ┣━ return get_stretch(element) in ["y", "both"]
6299     ┃   ┃   ┃   ┃   ┗━ return get_stretch(element) in ["y", "both"]
6300     ┃   ┃   ┃   ┣━ non_stretched = filter(lambda c: not has_stretch_y(c), self.children)
6301     ┃   ┃   ┃   ┗━ non_stretched = filter(lambda c: not has_stretch_y(c), self.children)
6302     ┃   ┃   ┣━ for child in non_stretched:
6303     ┃   ┃   ┣━ child.place(self.x, self.y, max_width, max_height, None, level + 1)
6304     ┃   ┃   ┃   ┣━ indent = level * "  "
6305     ┃   ┃   ┃   ┣━ self.x = x
6306     ┃   ┃   ┃   ┣━ self.y = y
6307     ┃   ┃   ┃   ┣━ if stretch in ["x", "both"]:
6308     ┃   ┃   ┃   ┣━ self.width = min(max_width, len(self.text))
6309     ┃   ┃   ┃   ┣━ if stretch in ["y", "both"]:
6310     ┃   ┃   ┃   ┣━ self.height = 1
6311     ┃   ┃   ┃   ┗━ self.height = 1
6312     ┃   ┃   ┣━ child.place(self.x, self.y, max_width, max_height, None, level + 1)
6313     ┃   ┃   ┣━ non_stretched_height += child.height
6314     ┃   ┃   ┣━ for child in non_stretched:
6315     ┃   ┃   ┣━ stretched_height = max_height - non_stretched_height
6316     ┃   ┃   ┣━ stretched_height_per = (stretched_height // num_stretched) if num_stretched > 0 else 0
6317     ┃   ┃   ┣━ y_offset = 0
6318     ┃   ┃   ┣━ my_width = 0
6319     ┃   ┃   ┣━ for child in self.children:
6320     ┃   ┃   ┣━ if has_stretch_y(child):
6321     ┃   ┃   ┃   ┣━ return get_stretch(element) in ["y", "both"]
6322     ┃   ┃   ┃   ┃   ┣━ return getattr(element, "stretch", None)
6323     ┃   ┃   ┃   ┃   ┗━ return getattr(element, "stretch", None)
6324     ┃   ┃   ┃   ┣━ return get_stretch(element) in ["y", "both"]
6325     ┃   ┃   ┃   ┗━ return get_stretch(element) in ["y", "both"]
6326     ┃   ┃   ┣━ if has_stretch_y(child):
6327     ┃   ┃   ┣━ child.place(self.x, self.y + y_offset, 
6328     ┃   ┃   ┣━ max_width, max_height - y_offset, 
6329     ┃   ┃   ┣━ get_stretch(child), level + 1)
6330     ┃   ┃   ┃   ┣━ return getattr(element, "stretch", None)
6331     ┃   ┃   ┃   ┗━ return getattr(element, "stretch", None)
6332     ┃   ┃   ┣━ get_stretch(child), level + 1)
6333     ┃   ┃   ┣━ child.place(self.x, self.y + y_offset, 
6334     ┃   ┃   ┃   ┣━ indent = level * "  "
6335     ┃   ┃   ┃   ┣━ self.x = x
6336     ┃   ┃   ┃   ┣━ self.y = y
6337     ┃   ┃   ┃   ┣━ if stretch in ["x", "both"]:
6338     ┃   ┃   ┃   ┣━ self.width = min(max_width, len(self.text))
6339     ┃   ┃   ┃   ┣━ if stretch in ["y", "both"]:
6340     ┃   ┃   ┃   ┣━ self.height = 1
6341     ┃   ┃   ┃   ┗━ self.height = 1
6342     ┃   ┃   ┣━ child.place(self.x, self.y + y_offset, 
6343     ┃   ┃   ┣━ y_offset += child.height
6344     ┃   ┃   ┣━ if child.width > my_width:
6345     ┃   ┃   ┣━ my_width = child.width
6346     ┃   ┃   ┣━ if y_offset >= max_height:
6347     ┃   ┃   ┣━ for child in self.children:
6348     ┃   ┃   ┣━ if has_stretch_y(child):
6349     ┃   ┃   ┃   ┣━ return get_stretch(element) in ["y", "both"]
6350     ┃   ┃   ┃   ┃   ┣━ return getattr(element, "stretch", None)
6351     ┃   ┃   ┃   ┃   ┗━ return getattr(element, "stretch", None)
6352     ┃   ┃   ┃   ┣━ return get_stretch(element) in ["y", "both"]
6353     ┃   ┃   ┃   ┗━ return get_stretch(element) in ["y", "both"]
6354     ┃   ┃   ┣━ if has_stretch_y(child):
6355     ┃   ┃   ┣━ child.place(self.x, self.y + y_offset, 
6356     ┃   ┃   ┣━ max_width, max_height - y_offset, 
6357     ┃   ┃   ┣━ get_stretch(child), level + 1)
6358     ┃   ┃   ┃   ┣━ return getattr(element, "stretch", None)
6359     ┃   ┃   ┃   ┗━ return getattr(element, "stretch", None)
6360     ┃   ┃   ┣━ get_stretch(child), level + 1)
6361     ┃   ┃   ┣━ child.place(self.x, self.y + y_offset, 
6362     ┃   ┃   ┃   ┣━ indent = level * "  "
6363     ┃   ┃   ┃   ┣━ self.x = x
6364     ┃   ┃   ┃   ┣━ self.y = y
6365     ┃   ┃   ┃   ┣━ non_stretched = filter(lambda c: not has_stretch_x(c), self.children)
6366     ┃   ┃   ┃   ┣━ stretched = filter(has_stretch_x, self.children)
6367     ┃   ┃   ┃   ┣━ num_stretched = len(list(stretched))
6368     ┃   ┃   ┃   ┃   ┣━ return get_stretch(element) in ["x", "both"]
6369     ┃   ┃   ┃   ┃   ┃   ┣━ return getattr(element, "stretch", None)
6370     ┃   ┃   ┃   ┃   ┃   ┗━ return getattr(element, "stretch", None)
6371     ┃   ┃   ┃   ┃   ┣━ return get_stretch(element) in ["x", "both"]
6372     ┃   ┃   ┃   ┃   ┣━ return get_stretch(element) in ["x", "both"]
6373     ┃   ┃   ┃   ┃   ┣━ return get_stretch(element) in ["x", "both"]
6374     ┃   ┃   ┃   ┃   ┃   ┣━ return getattr(element, "stretch", None)
6375     ┃   ┃   ┃   ┃   ┃   ┗━ return getattr(element, "stretch", None)
6376     ┃   ┃   ┃   ┃   ┣━ return get_stretch(element) in ["x", "both"]
6377     ┃   ┃   ┃   ┃   ┗━ return get_stretch(element) in ["x", "both"]
6378     ┃   ┃   ┃   ┣━ num_stretched = len(list(stretched))
6379     ┃   ┃   ┃   ┣━ non_stretch_width = 0
6380     ┃   ┃   ┃   ┣━ for child in non_stretched:
6381     ┃   ┃   ┃   ┃   ┣━ non_stretched = filter(lambda c: not has_stretch_x(c), self.children)
6382     ┃   ┃   ┃   ┃   ┃   ┣━ return get_stretch(element) in ["x", "both"]
6383     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ return getattr(element, "stretch", None)
6384     ┃   ┃   ┃   ┃   ┃   ┃   ┗━ return getattr(element, "stretch", None)
6385     ┃   ┃   ┃   ┃   ┃   ┣━ return get_stretch(element) in ["x", "both"]
6386     ┃   ┃   ┃   ┃   ┃   ┗━ return get_stretch(element) in ["x", "both"]
6387     ┃   ┃   ┃   ┃   ┣━ non_stretched = filter(lambda c: not has_stretch_x(c), self.children)
6388     ┃   ┃   ┃   ┃   ┗━ non_stretched = filter(lambda c: not has_stretch_x(c), self.children)
6389     ┃   ┃   ┃   ┣━ for child in non_stretched:
6390     ┃   ┃   ┃   ┣━ child.place(self.x, self.y, max_width, max_height, None, level + 1)
6391     ┃   ┃   ┃   ┃   ┣━ indent = level * "  "
6392     ┃   ┃   ┃   ┃   ┣━ self.border.place(x, y, max_width, max_height, stretch, level + 1)
6393     ┃   ┃   ┃   ┃   ┃   ┣━ indent = level * "  "
6394     ┃   ┃   ┃   ┃   ┃   ┣━ self.x = x
6395     ┃   ┃   ┃   ┃   ┃   ┣━ self.y = y
6396     ┃   ┃   ┃   ┃   ┃   ┣━ self.content.place(x + 1, y + 1, max_width - 2, max_height - 2, stretch, level + 1)
6397     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ indent = level * "  "
6398     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ self.x = x
6399     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ self.y = y
6400     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ if stretch in ["x", "both"]:
6401     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ self.width = min(max_width, len(self.text))
6402     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ if stretch in ["y", "both"]:
6403     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ self.height = 1
6404     ┃   ┃   ┃   ┃   ┃   ┃   ┗━ self.height = 1
6405     ┃   ┃   ┃   ┃   ┃   ┣━ self.content.place(x + 1, y + 1, max_width - 2, max_height - 2, stretch, level + 1)
6406     ┃   ┃   ┃   ┃   ┃   ┣━ self.width = self.content.width + 2
6407     ┃   ┃   ┃   ┃   ┃   ┣━ self.height = self.content.height + 2
6408     ┃   ┃   ┃   ┃   ┃   ┗━ self.height = self.content.height + 2
6409     ┃   ┃   ┃   ┃   ┣━ self.border.place(x, y, max_width, max_height, stretch, level + 1)
6410     ┃   ┃   ┃   ┃   ┣━ self.x = x
6411     ┃   ┃   ┃   ┃   ┣━ self.y = y
6412     ┃   ┃   ┃   ┃   ┣━ self.width = self.border.width
6413     ┃   ┃   ┃   ┃   ┣━ self.height = self.border.height
6414     ┃   ┃   ┃   ┃   ┗━ self.height = self.border.height
6415     ┃   ┃   ┃   ┣━ child.place(self.x, self.y, max_width, max_height, None, level + 1)
6416     ┃   ┃   ┃   ┣━ non_stretch_width += child.width
6417     ┃   ┃   ┃   ┣━ for child in non_stretched:
6418     ┃   ┃   ┃   ┃   ┣━ non_stretched = filter(lambda c: not has_stretch_x(c), self.children)
6419     ┃   ┃   ┃   ┃   ┃   ┣━ return get_stretch(element) in ["x", "both"]
6420     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ return getattr(element, "stretch", None)
6421     ┃   ┃   ┃   ┃   ┃   ┃   ┗━ return getattr(element, "stretch", None)
6422     ┃   ┃   ┃   ┃   ┃   ┣━ return get_stretch(element) in ["x", "both"]
6423     ┃   ┃   ┃   ┃   ┃   ┗━ return get_stretch(element) in ["x", "both"]
6424     ┃   ┃   ┃   ┃   ┣━ non_stretched = filter(lambda c: not has_stretch_x(c), self.children)
6425     ┃   ┃   ┃   ┃   ┗━ non_stretched = filter(lambda c: not has_stretch_x(c), self.children)
6426     ┃   ┃   ┃   ┣━ for child in non_stretched:
6427     ┃   ┃   ┃   ┣━ child.place(self.x, self.y, max_width, max_height, None, level + 1)
6428     ┃   ┃   ┃   ┃   ┣━ indent = level * "  "
6429     ┃   ┃   ┃   ┃   ┣━ self.border.place(x, y, max_width, max_height, stretch, level + 1)
6430     ┃   ┃   ┃   ┃   ┃   ┣━ indent = level * "  "
6431     ┃   ┃   ┃   ┃   ┃   ┣━ self.x = x
6432     ┃   ┃   ┃   ┃   ┃   ┣━ self.y = y
6433     ┃   ┃   ┃   ┃   ┃   ┣━ self.content.place(x + 1, y + 1, max_width - 2, max_height - 2, stretch, level + 1)
6434     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ indent = level * "  "
6435     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ self.x = x
6436     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ self.y = y
6437     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ if stretch in ["x", "both"]:
6438     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ self.width = min(max_width, len(self.text))
6439     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ if stretch in ["y", "both"]:
6440     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ self.height = 1
6441     ┃   ┃   ┃   ┃   ┃   ┃   ┗━ self.height = 1
6442     ┃   ┃   ┃   ┃   ┃   ┣━ self.content.place(x + 1, y + 1, max_width - 2, max_height - 2, stretch, level + 1)
6443     ┃   ┃   ┃   ┃   ┃   ┣━ self.width = self.content.width + 2
6444     ┃   ┃   ┃   ┃   ┃   ┣━ self.height = self.content.height + 2
6445     ┃   ┃   ┃   ┃   ┃   ┗━ self.height = self.content.height + 2
6446     ┃   ┃   ┃   ┃   ┣━ self.border.place(x, y, max_width, max_height, stretch, level + 1)
6447     ┃   ┃   ┃   ┃   ┣━ self.x = x
6448     ┃   ┃   ┃   ┃   ┣━ self.y = y
6449     ┃   ┃   ┃   ┃   ┣━ self.width = self.border.width
6450     ┃   ┃   ┃   ┃   ┣━ self.height = self.border.height
6451     ┃   ┃   ┃   ┃   ┗━ self.height = self.border.height
6452     ┃   ┃   ┃   ┣━ child.place(self.x, self.y, max_width, max_height, None, level + 1)
6453     ┃   ┃   ┃   ┣━ non_stretch_width += child.width
6454     ┃   ┃   ┃   ┣━ for child in non_stretched:
6455     ┃   ┃   ┃   ┣━ stretch_width = max_width - non_stretch_width
6456     ┃   ┃   ┃   ┣━ stretch_width_per = (stretch_width // num_stretched) if num_stretched > 0 else 0
6457     ┃   ┃   ┃   ┣━ x_offset = 0
6458     ┃   ┃   ┃   ┣━ my_height = 0
6459     ┃   ┃   ┃   ┣━ for child in self.children:
6460     ┃   ┃   ┃   ┣━ if has_stretch_x(child):
6461     ┃   ┃   ┃   ┃   ┣━ return get_stretch(element) in ["x", "both"]
6462     ┃   ┃   ┃   ┃   ┃   ┣━ return getattr(element, "stretch", None)
6463     ┃   ┃   ┃   ┃   ┃   ┗━ return getattr(element, "stretch", None)
6464     ┃   ┃   ┃   ┃   ┣━ return get_stretch(element) in ["x", "both"]
6465     ┃   ┃   ┃   ┃   ┗━ return get_stretch(element) in ["x", "both"]
6466     ┃   ┃   ┃   ┣━ if has_stretch_x(child):
6467     ┃   ┃   ┃   ┣━ log(indent + "(B)")
6468     ┃   ┃   ┃   ┃   ┣━ logfile.write(text + "\n")
6469     ┃   ┃   ┃   ┃   ┣━ logfile.flush()
6470     ┃   ┃   ┃   ┃   ┗━ logfile.flush()
6471     ┃   ┃   ┃   ┣━ log(indent + "(B)")
6472     ┃   ┃   ┃   ┣━ child.place(self.x + x_offset, self.y, 
6473     ┃   ┃   ┃   ┣━ max_width - x_offset, max_height, 
6474     ┃   ┃   ┃   ┣━ get_stretch(child), level + 1)
6475     ┃   ┃   ┃   ┃   ┣━ return getattr(element, "stretch", None)
6476     ┃   ┃   ┃   ┃   ┗━ return getattr(element, "stretch", None)
6477     ┃   ┃   ┃   ┣━ get_stretch(child), level + 1)
6478     ┃   ┃   ┃   ┣━ child.place(self.x + x_offset, self.y, 
6479     ┃   ┃   ┃   ┃   ┣━ indent = level * "  "
6480     ┃   ┃   ┃   ┃   ┣━ self.border.place(x, y, max_width, max_height, stretch, level + 1)
6481     ┃   ┃   ┃   ┃   ┃   ┣━ indent = level * "  "
6482     ┃   ┃   ┃   ┃   ┃   ┣━ self.x = x
6483     ┃   ┃   ┃   ┃   ┃   ┣━ self.y = y
6484     ┃   ┃   ┃   ┃   ┃   ┣━ self.content.place(x + 1, y + 1, max_width - 2, max_height - 2, stretch, level + 1)
6485     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ indent = level * "  "
6486     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ self.x = x
6487     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ self.y = y
6488     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ if stretch in ["x", "both"]:
6489     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ self.width = min(max_width, len(self.text))
6490     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ if stretch in ["y", "both"]:
6491     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ self.height = 1
6492     ┃   ┃   ┃   ┃   ┃   ┃   ┗━ self.height = 1
6493     ┃   ┃   ┃   ┃   ┃   ┣━ self.content.place(x + 1, y + 1, max_width - 2, max_height - 2, stretch, level + 1)
6494     ┃   ┃   ┃   ┃   ┃   ┣━ self.width = self.content.width + 2
6495     ┃   ┃   ┃   ┃   ┃   ┣━ self.height = self.content.height + 2
6496     ┃   ┃   ┃   ┃   ┃   ┗━ self.height = self.content.height + 2
6497     ┃   ┃   ┃   ┃   ┣━ self.border.place(x, y, max_width, max_height, stretch, level + 1)
6498     ┃   ┃   ┃   ┃   ┣━ self.x = x
6499     ┃   ┃   ┃   ┃   ┣━ self.y = y
6500     ┃   ┃   ┃   ┃   ┣━ self.width = self.border.width
6501     ┃   ┃   ┃   ┃   ┣━ self.height = self.border.height
6502     ┃   ┃   ┃   ┃   ┗━ self.height = self.border.height
6503     ┃   ┃   ┃   ┣━ child.place(self.x + x_offset, self.y, 
6504     ┃   ┃   ┃   ┣━ x_offset += child.width
6505     ┃   ┃   ┃   ┣━ if child.height > my_height:
6506     ┃   ┃   ┃   ┣━ my_height = child.height
6507     ┃   ┃   ┃   ┣━ if x_offset >= max_width:
6508     ┃   ┃   ┃   ┣━ for child in self.children:
6509     ┃   ┃   ┃   ┣━ if has_stretch_x(child):
6510     ┃   ┃   ┃   ┃   ┣━ return get_stretch(element) in ["x", "both"]
6511     ┃   ┃   ┃   ┃   ┃   ┣━ return getattr(element, "stretch", None)
6512     ┃   ┃   ┃   ┃   ┃   ┗━ return getattr(element, "stretch", None)
6513     ┃   ┃   ┃   ┃   ┣━ return get_stretch(element) in ["x", "both"]
6514     ┃   ┃   ┃   ┃   ┗━ return get_stretch(element) in ["x", "both"]
6515     ┃   ┃   ┃   ┣━ if has_stretch_x(child):
6516     ┃   ┃   ┃   ┣━ log(indent + "(B)")
6517     ┃   ┃   ┃   ┃   ┣━ logfile.write(text + "\n")
6518     ┃   ┃   ┃   ┃   ┣━ logfile.flush()
6519     ┃   ┃   ┃   ┃   ┗━ logfile.flush()
6520     ┃   ┃   ┃   ┣━ log(indent + "(B)")
6521     ┃   ┃   ┃   ┣━ child.place(self.x + x_offset, self.y, 
6522     ┃   ┃   ┃   ┣━ max_width - x_offset, max_height, 
6523     ┃   ┃   ┃   ┣━ get_stretch(child), level + 1)
6524     ┃   ┃   ┃   ┃   ┣━ return getattr(element, "stretch", None)
6525     ┃   ┃   ┃   ┃   ┗━ return getattr(element, "stretch", None)
6526     ┃   ┃   ┃   ┣━ get_stretch(child), level + 1)
6527     ┃   ┃   ┃   ┣━ child.place(self.x + x_offset, self.y, 
6528     ┃   ┃   ┃   ┃   ┣━ indent = level * "  "
6529     ┃   ┃   ┃   ┃   ┣━ self.border.place(x, y, max_width, max_height, stretch, level + 1)
6530     ┃   ┃   ┃   ┃   ┃   ┣━ indent = level * "  "
6531     ┃   ┃   ┃   ┃   ┃   ┣━ self.x = x
6532     ┃   ┃   ┃   ┃   ┃   ┣━ self.y = y
6533     ┃   ┃   ┃   ┃   ┃   ┣━ self.content.place(x + 1, y + 1, max_width - 2, max_height - 2, stretch, level + 1)
6534     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ indent = level * "  "
6535     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ self.x = x
6536     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ self.y = y
6537     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ if stretch in ["x", "both"]:
6538     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ self.width = min(max_width, len(self.text))
6539     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ if stretch in ["y", "both"]:
6540     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ self.height = 1
6541     ┃   ┃   ┃   ┃   ┃   ┃   ┗━ self.height = 1
6542     ┃   ┃   ┃   ┃   ┃   ┣━ self.content.place(x + 1, y + 1, max_width - 2, max_height - 2, stretch, level + 1)
6543     ┃   ┃   ┃   ┃   ┃   ┣━ self.width = self.content.width + 2
6544     ┃   ┃   ┃   ┃   ┃   ┣━ self.height = self.content.height + 2
6545     ┃   ┃   ┃   ┃   ┃   ┗━ self.height = self.content.height + 2
6546     ┃   ┃   ┃   ┃   ┣━ self.border.place(x, y, max_width, max_height, stretch, level + 1)
6547     ┃   ┃   ┃   ┃   ┣━ self.x = x
6548     ┃   ┃   ┃   ┃   ┣━ self.y = y
6549     ┃   ┃   ┃   ┃   ┣━ self.width = self.border.width
6550     ┃   ┃   ┃   ┃   ┣━ self.height = self.border.height
6551     ┃   ┃   ┃   ┃   ┗━ self.height = self.border.height
6552     ┃   ┃   ┃   ┣━ child.place(self.x + x_offset, self.y, 
6553     ┃   ┃   ┃   ┣━ x_offset += child.width
6554     ┃   ┃   ┃   ┣━ if child.height > my_height:
6555     ┃   ┃   ┃   ┣━ if x_offset >= max_width:
6556     ┃   ┃   ┃   ┣━ for child in self.children:
6557     ┃   ┃   ┃   ┣━ if stretch in ["x", "both"]:
6558     ┃   ┃   ┃   ┣━ self.width = min(max_width, x_offset)
6559     ┃   ┃   ┃   ┣━ if stretch in ["y", "both"]:
6560     ┃   ┃   ┃   ┣━ self.height = min(max_height, my_height)
6561     ┃   ┃   ┃   ┗━ self.height = min(max_height, my_height)
6562     ┃   ┃   ┣━ child.place(self.x, self.y + y_offset, 
6563     ┃   ┃   ┣━ y_offset += child.height
6564     ┃   ┃   ┣━ if child.width > my_width:
6565     ┃   ┃   ┣━ my_width = child.width
6566     ┃   ┃   ┣━ if y_offset >= max_height:
6567     ┃   ┃   ┣━ for child in self.children:
6568     ┃   ┃   ┣━ if has_stretch_y(child):
6569     ┃   ┃   ┃   ┣━ return get_stretch(element) in ["y", "both"]
6570     ┃   ┃   ┃   ┃   ┣━ return getattr(element, "stretch", None)
6571     ┃   ┃   ┃   ┃   ┗━ return getattr(element, "stretch", None)
6572     ┃   ┃   ┃   ┣━ return get_stretch(element) in ["y", "both"]
6573     ┃   ┃   ┃   ┗━ return get_stretch(element) in ["y", "both"]
6574     ┃   ┃   ┣━ if has_stretch_y(child):
6575     ┃   ┃   ┣━ child.place(self.x, self.y + y_offset, 
6576     ┃   ┃   ┣━ max_width, max_height - y_offset, 
6577     ┃   ┃   ┣━ get_stretch(child), level + 1)
6578     ┃   ┃   ┃   ┣━ return getattr(element, "stretch", None)
6579     ┃   ┃   ┃   ┗━ return getattr(element, "stretch", None)
6580     ┃   ┃   ┣━ get_stretch(child), level + 1)
6581     ┃   ┃   ┣━ child.place(self.x, self.y + y_offset, 
6582     ┃   ┃   ┃   ┣━ logindent = level * "  "
6583     ┃   ┃   ┃   ┣━ self.x = x
6584     ┃   ┃   ┃   ┣━ self.y = y
6585     ┃   ┃   ┃   ┣━ self.height = max_height
6586     ┃   ┃   ┃   ┣━ y_offset = 0
6587     ┃   ┃   ┃   ┣━ indent = 2
6588     ┃   ┃   ┃   ┣━ self.label.place(x + indent, self.y, max_width - indent, max_height, stretch, level + 1)
6589     ┃   ┃   ┃   ┃   ┣━ indent = level * "  "
6590     ┃   ┃   ┃   ┃   ┣━ self.x = x
6591     ┃   ┃   ┃   ┃   ┣━ self.y = y
6592     ┃   ┃   ┃   ┃   ┣━ if stretch in ["x", "both"]:
6593     ┃   ┃   ┃   ┃   ┣━ self.width = min(max_width, len(self.text))
6594     ┃   ┃   ┃   ┃   ┣━ if stretch in ["y", "both"]:
6595     ┃   ┃   ┃   ┃   ┣━ self.height = 1
6596     ┃   ┃   ┃   ┃   ┗━ self.height = 1
6597     ┃   ┃   ┃   ┣━ self.label.place(x + indent, self.y, max_width - indent, max_height, stretch, level + 1)
6598     ┃   ┃   ┃   ┣━ self.width = self.label.width + indent
6599     ┃   ┃   ┃   ┣━ y_offset += self.label.height
6600     ┃   ┃   ┃   ┣━ if self.expanded:
6601     ┃   ┃   ┃   ┣━ for child in self.child_nodes:
6602     ┃   ┃   ┃   ┃   ┣━ return filter(lambda c: c != self.label, self.children)
6603     ┃   ┃   ┃   ┃   ┗━ return filter(lambda c: c != self.label, self.children)
6604     ┃   ┃   ┃   ┣━ for child in self.child_nodes:
6605     ┃   ┃   ┃   ┃   ┣━ return filter(lambda c: c != self.label, self.children)
6606     ┃   ┃   ┃   ┃   ┣━ return filter(lambda c: c != self.label, self.children)
6607     ┃   ┃   ┃   ┃   ┣━ return filter(lambda c: c != self.label, self.children)
6608     ┃   ┃   ┃   ┃   ┗━ return filter(lambda c: c != self.label, self.children)
6609     ┃   ┃   ┃   ┣━ for child in self.child_nodes:
6610     ┃   ┃   ┃   ┣━ unplace(child)
6611     ┃   ┃   ┃   ┃   ┣━ attrs = ["width", "height", "x", "y"]
6612     ┃   ┃   ┃   ┃   ┣━ for attr in attrs:
6613     ┃   ┃   ┃   ┃   ┣━ if hasattr(element, attr):
6614     ┃   ┃   ┃   ┃   ┣━ for attr in attrs:
6615     ┃   ┃   ┃   ┃   ┣━ if hasattr(element, attr):
6616     ┃   ┃   ┃   ┃   ┣━ for attr in attrs:
6617     ┃   ┃   ┃   ┃   ┣━ if hasattr(element, attr):
6618     ┃   ┃   ┃   ┃   ┣━ for attr in attrs:
6619     ┃   ┃   ┃   ┃   ┣━ if hasattr(element, attr):
6620     ┃   ┃   ┃   ┃   ┣━ for attr in attrs:
6621     ┃   ┃   ┃   ┃   ┗━ for attr in attrs:
6622     ┃   ┃   ┃   ┣━ unplace(child)
6623     ┃   ┃   ┃   ┣━ for child in self.child_nodes:
6624     ┃   ┃   ┃   ┃   ┣━ return filter(lambda c: c != self.label, self.children)
6625     ┃   ┃   ┃   ┃   ┗━ return filter(lambda c: c != self.label, self.children)
6626     ┃   ┃   ┃   ┣━ for child in self.child_nodes:
6627     ┃   ┃   ┃   ┣━ unplace(child)
6628     ┃   ┃   ┃   ┃   ┣━ attrs = ["width", "height", "x", "y"]
6629     ┃   ┃   ┃   ┃   ┣━ for attr in attrs:
6630     ┃   ┃   ┃   ┃   ┣━ if hasattr(element, attr):
6631     ┃   ┃   ┃   ┃   ┣━ for attr in attrs:
6632     ┃   ┃   ┃   ┃   ┣━ if hasattr(element, attr):
6633     ┃   ┃   ┃   ┃   ┣━ for attr in attrs:
6634     ┃   ┃   ┃   ┃   ┣━ if hasattr(element, attr):
6635     ┃   ┃   ┃   ┃   ┣━ for attr in attrs:
6636     ┃   ┃   ┃   ┃   ┣━ if hasattr(element, attr):
6637     ┃   ┃   ┃   ┃   ┣━ for attr in attrs:
6638     ┃   ┃   ┃   ┃   ┗━ for attr in attrs:
6639     ┃   ┃   ┃   ┣━ unplace(child)
6640     ┃   ┃   ┃   ┣━ for child in self.child_nodes:
6641     ┃   ┃   ┃   ┃   ┣━ return filter(lambda c: c != self.label, self.children)
6642     ┃   ┃   ┃   ┃   ┗━ return filter(lambda c: c != self.label, self.children)
6643     ┃   ┃   ┃   ┣━ for child in self.child_nodes:
6644     ┃   ┃   ┃   ┣━ unplace(child)
6645     ┃   ┃   ┃   ┃   ┣━ attrs = ["width", "height", "x", "y"]
6646     ┃   ┃   ┃   ┃   ┣━ for attr in attrs:
6647     ┃   ┃   ┃   ┃   ┣━ if hasattr(element, attr):
6648     ┃   ┃   ┃   ┃   ┣━ for attr in attrs:
6649     ┃   ┃   ┃   ┃   ┣━ if hasattr(element, attr):
6650     ┃   ┃   ┃   ┃   ┣━ for attr in attrs:
6651     ┃   ┃   ┃   ┃   ┣━ if hasattr(element, attr):
6652     ┃   ┃   ┃   ┃   ┣━ for attr in attrs:
6653     ┃   ┃   ┃   ┃   ┣━ if hasattr(element, attr):
6654     ┃   ┃   ┃   ┃   ┣━ for attr in attrs:
6655     ┃   ┃   ┃   ┃   ┗━ for attr in attrs:
6656     ┃   ┃   ┃   ┣━ unplace(child)
6657     ┃   ┃   ┃   ┣━ for child in self.child_nodes:
6658     ┃   ┃   ┃   ┣━ self.height = self.label.height
6659     ┃   ┃   ┃   ┗━ self.height = self.label.height
6660     ┃   ┃   ┣━ child.place(self.x, self.y + y_offset, 
6661     ┃   ┃   ┣━ y_offset += child.height
6662     ┃   ┃   ┣━ if child.width > my_width:
6663     ┃   ┃   ┣━ if y_offset >= max_height:
6664     ┃   ┃   ┣━ for child in self.children:
6665     ┃   ┃   ┣━ if has_stretch_y(child):
6666     ┃   ┃   ┃   ┣━ return get_stretch(element) in ["y", "both"]
6667     ┃   ┃   ┃   ┃   ┣━ return getattr(element, "stretch", None)
6668     ┃   ┃   ┃   ┃   ┗━ return getattr(element, "stretch", None)
6669     ┃   ┃   ┃   ┣━ return get_stretch(element) in ["y", "both"]
6670     ┃   ┃   ┃   ┗━ return get_stretch(element) in ["y", "both"]
6671     ┃   ┃   ┣━ if has_stretch_y(child):
6672     ┃   ┃   ┣━ child.place(self.x, self.y + y_offset, 
6673     ┃   ┃   ┣━ max_width, max_height - y_offset, 
6674     ┃   ┃   ┣━ get_stretch(child), level + 1)
6675     ┃   ┃   ┃   ┣━ return getattr(element, "stretch", None)
6676     ┃   ┃   ┃   ┗━ return getattr(element, "stretch", None)
6677     ┃   ┃   ┣━ get_stretch(child), level + 1)
6678     ┃   ┃   ┣━ child.place(self.x, self.y + y_offset, 
6679     ┃   ┃   ┃   ┣━ indent = level * "  "
6680     ┃   ┃   ┃   ┣━ self.x = x
6681     ┃   ┃   ┃   ┣━ self.y = y
6682     ┃   ┃   ┃   ┣━ if stretch in ["x", "both"]:
6683     ┃   ┃   ┃   ┣━ self.width = min(max_width, len(self.text))
6684     ┃   ┃   ┃   ┣━ if stretch in ["y", "both"]:
6685     ┃   ┃   ┃   ┣━ self.height = 1
6686     ┃   ┃   ┃   ┗━ self.height = 1
6687     ┃   ┃   ┣━ child.place(self.x, self.y + y_offset, 
6688     ┃   ┃   ┣━ y_offset += child.height
6689     ┃   ┃   ┣━ if child.width > my_width:
6690     ┃   ┃   ┣━ if y_offset >= max_height:
6691     ┃   ┃   ┣━ for child in self.children:
6692     ┃   ┃   ┣━ if stretch in ["x", "both"]:
6693     ┃   ┃   ┣━ self.width = min(max_width, my_width)
6694     ┃   ┃   ┣━ if stretch in ["y", "both"]:
6695     ┃   ┃   ┣━ self.height = min(max_height, y_offset)
6696     ┃   ┃   ┗━ self.height = min(max_height, y_offset)
6697     ┃   ┣━ root_element.place(1, 1, screen_width, screen_height, get_stretch(root_element), 0)
6698     ┃   ┣━ clear_rect(1, 1, screen_width, screen_height)
6699     ┃   ┃   ┣━ for i in range(height):
6700     ┃   ┃   ┣━ print_at(x, y + i, " " * width)
6701     ┃   ┃   ┃   ┣━ goto(x, y)
6702     ┃   ┃   ┃   ┃   ┣━ write('\x1B[%d;%df' % (y, x))
6703     ┃   ┃   ┃   ┃   ┃   ┣━ print(value, end = '')
6704     ┃   ┃   ┃   ┃   ┃   ┣━ sys.stdout.flush()
6705     ┃   ┃   ┃   ┃   ┃   ┗━ sys.stdout.flush()
6706     ┃   ┃   ┃   ┃   ┣━ write('\x1B[%d;%df' % (y, x))
6707     ┃   ┃   ┃   ┃   ┗━ write('\x1B[%d;%df' % (y, x))
6708     ┃   ┃   ┃   ┣━ goto(x, y)
6709     ┃   ┃   ┃   ┣━ print(text, end = '')
6710     ┃   ┃   ┃   ┣━ sys.stdout.flush()
6711     ┃   ┃   ┃   ┗━ sys.stdout.flush()
6712     ┃   ┃   ┣━ print_at(x, y + i, " " * width)
6713     ┃   ┃   ┣━ for i in range(height):
6714     ┃   ┃   ┣━ print_at(x, y + i, " " * width)
6715     ┃   ┃   ┃   ┣━ goto(x, y)
6716     ┃   ┃   ┃   ┃   ┣━ write('\x1B[%d;%df' % (y, x))
6717     ┃   ┃   ┃   ┃   ┃   ┣━ print(value, end = '')
6718     ┃   ┃   ┃   ┃   ┃   ┣━ sys.stdout.flush()
6719     ┃   ┃   ┃   ┃   ┃   ┗━ sys.stdout.flush()
6720     ┃   ┃   ┃   ┃   ┣━ write('\x1B[%d;%df' % (y, x))
6721     ┃   ┃   ┃   ┃   ┗━ write('\x1B[%d;%df' % (y, x))
6722     ┃   ┃   ┃   ┣━ goto(x, y)
6723     ┃   ┃   ┃   ┣━ print(text, end = '')
6724     ┃   ┃   ┃   ┣━ sys.stdout.flush()
6725     ┃   ┃   ┃   ┗━ sys.stdout.flush()
6726     ┃   ┃   ┣━ print_at(x, y + i, " " * width)
6727     ┃   ┃   ┣━ for i in range(height):
6728     ┃   ┃   ┣━ print_at(x, y + i, " " * width)
6729     ┃   ┃   ┃   ┣━ goto(x, y)
6730     ┃   ┃   ┃   ┃   ┣━ write('\x1B[%d;%df' % (y, x))
6731     ┃   ┃   ┃   ┃   ┃   ┣━ print(value, end = '')
6732     ┃   ┃   ┃   ┃   ┃   ┣━ sys.stdout.flush()
6733     ┃   ┃   ┃   ┃   ┃   ┗━ sys.stdout.flush()
6734     ┃   ┃   ┃   ┃   ┣━ write('\x1B[%d;%df' % (y, x))
6735     ┃   ┃   ┃   ┃   ┗━ write('\x1B[%d;%df' % (y, x))
6736     ┃   ┃   ┃   ┣━ goto(x, y)
6737     ┃   ┃   ┃   ┣━ print(text, end = '')
6738     ┃   ┃   ┃   ┣━ sys.stdout.flush()
6739     ┃   ┃   ┃   ┗━ sys.stdout.flush()
6740     ┃   ┃   ┣━ print_at(x, y + i, " " * width)
6741     ┃   ┃   ┣━ for i in range(height):
6742     ┃   ┃   ┣━ print_at(x, y + i, " " * width)
6743     ┃   ┃   ┃   ┣━ goto(x, y)
6744     ┃   ┃   ┃   ┃   ┣━ write('\x1B[%d;%df' % (y, x))
6745     ┃   ┃   ┃   ┃   ┃   ┣━ print(value, end = '')
6746     ┃   ┃   ┃   ┃   ┃   ┣━ sys.stdout.flush()
6747     ┃   ┃   ┃   ┃   ┃   ┗━ sys.stdout.flush()
6748     ┃   ┃   ┃   ┃   ┣━ write('\x1B[%d;%df' % (y, x))
6749     ┃   ┃   ┃   ┃   ┗━ write('\x1B[%d;%df' % (y, x))
6750     ┃   ┃   ┃   ┣━ goto(x, y)
6751     ┃   ┃   ┃   ┣━ print(text, end = '')
6752     ┃   ┃   ┃   ┣━ sys.stdout.flush()
6753     ┃   ┃   ┃   ┗━ sys.stdout.flush()
6754     ┃   ┃   ┣━ print_at(x, y + i, " " * width)
6755     ┃   ┃   ┣━ for i in range(height):
6756     ┃   ┃   ┣━ print_at(x, y + i, " " * width)
6757     ┃   ┃   ┃   ┣━ goto(x, y)
6758     ┃   ┃   ┃   ┃   ┣━ write('\x1B[%d;%df' % (y, x))
6759     ┃   ┃   ┃   ┃   ┃   ┣━ print(value, end = '')
6760     ┃   ┃   ┃   ┃   ┃   ┣━ sys.stdout.flush()
6761     ┃   ┃   ┃   ┃   ┃   ┗━ sys.stdout.flush()
6762     ┃   ┃   ┃   ┃   ┣━ write('\x1B[%d;%df' % (y, x))
6763     ┃   ┃   ┃   ┃   ┗━ write('\x1B[%d;%df' % (y, x))
6764     ┃   ┃   ┃   ┣━ goto(x, y)
6765     ┃   ┃   ┃   ┣━ print(text, end = '')
6766     ┃   ┃   ┃   ┣━ sys.stdout.flush()
6767     ┃   ┃   ┃   ┗━ sys.stdout.flush()
6768     ┃   ┃   ┣━ print_at(x, y + i, " " * width)
6769     ┃   ┃   ┣━ for i in range(height):
6770     ┃   ┃   ┣━ print_at(x, y + i, " " * width)
6771     ┃   ┃   ┃   ┣━ goto(x, y)
6772     ┃   ┃   ┃   ┃   ┣━ write('\x1B[%d;%df' % (y, x))
6773     ┃   ┃   ┃   ┃   ┃   ┣━ print(value, end = '')
6774     ┃   ┃   ┃   ┃   ┃   ┣━ sys.stdout.flush()
6775     ┃   ┃   ┃   ┃   ┃   ┗━ sys.stdout.flush()
6776     ┃   ┃   ┃   ┃   ┣━ write('\x1B[%d;%df' % (y, x))
6777     ┃   ┃   ┃   ┃   ┗━ write('\x1B[%d;%df' % (y, x))
6778     ┃   ┃   ┃   ┣━ goto(x, y)
6779     ┃   ┃   ┃   ┣━ print(text, end = '')
6780     ┃   ┃   ┃   ┣━ sys.stdout.flush()
6781     ┃   ┃   ┃   ┗━ sys.stdout.flush()
6782     ┃   ┃   ┣━ print_at(x, y + i, " " * width)
6783     ┃   ┃   ┣━ for i in range(height):
6784     ┃   ┃   ┣━ print_at(x, y + i, " " * width)
6785     ┃   ┃   ┃   ┣━ goto(x, y)
6786     ┃   ┃   ┃   ┃   ┣━ write('\x1B[%d;%df' % (y, x))
6787     ┃   ┃   ┃   ┃   ┃   ┣━ print(value, end = '')
6788     ┃   ┃   ┃   ┃   ┃   ┣━ sys.stdout.flush()
6789     ┃   ┃   ┃   ┃   ┃   ┗━ sys.stdout.flush()
6790     ┃   ┃   ┃   ┃   ┣━ write('\x1B[%d;%df' % (y, x))
6791     ┃   ┃   ┃   ┃   ┗━ write('\x1B[%d;%df' % (y, x))
6792     ┃   ┃   ┃   ┣━ goto(x, y)
6793     ┃   ┃   ┃   ┣━ print(text, end = '')
6794     ┃   ┃   ┃   ┣━ sys.stdout.flush()
6795     ┃   ┃   ┃   ┗━ sys.stdout.flush()
6796     ┃   ┃   ┣━ print_at(x, y + i, " " * width)
6797     ┃   ┃   ┣━ for i in range(height):
6798     ┃   ┃   ┣━ print_at(x, y + i, " " * width)
6799     ┃   ┃   ┃   ┣━ goto(x, y)
6800     ┃   ┃   ┃   ┃   ┣━ write('\x1B[%d;%df' % (y, x))
6801     ┃   ┃   ┃   ┃   ┃   ┣━ print(value, end = '')
6802     ┃   ┃   ┃   ┃   ┃   ┣━ sys.stdout.flush()
6803     ┃   ┃   ┃   ┃   ┃   ┗━ sys.stdout.flush()
6804     ┃   ┃   ┃   ┃   ┣━ write('\x1B[%d;%df' % (y, x))
6805     ┃   ┃   ┃   ┃   ┗━ write('\x1B[%d;%df' % (y, x))
6806     ┃   ┃   ┃   ┣━ goto(x, y)
6807     ┃   ┃   ┃   ┣━ print(text, end = '')
6808     ┃   ┃   ┃   ┣━ sys.stdout.flush()
6809     ┃   ┃   ┃   ┗━ sys.stdout.flush()
6810     ┃   ┃   ┣━ print_at(x, y + i, " " * width)
6811     ┃   ┃   ┣━ for i in range(height):
6812     ┃   ┃   ┣━ print_at(x, y + i, " " * width)
6813     ┃   ┃   ┃   ┣━ goto(x, y)
6814     ┃   ┃   ┃   ┃   ┣━ write('\x1B[%d;%df' % (y, x))
6815     ┃   ┃   ┃   ┃   ┃   ┣━ print(value, end = '')
6816     ┃   ┃   ┃   ┃   ┃   ┣━ sys.stdout.flush()
6817     ┃   ┃   ┃   ┃   ┃   ┗━ sys.stdout.flush()
6818     ┃   ┃   ┃   ┃   ┣━ write('\x1B[%d;%df' % (y, x))
6819     ┃   ┃   ┃   ┃   ┗━ write('\x1B[%d;%df' % (y, x))
6820     ┃   ┃   ┃   ┣━ goto(x, y)
6821     ┃   ┃   ┃   ┣━ print(text, end = '')
6822     ┃   ┃   ┃   ┣━ sys.stdout.flush()
6823     ┃   ┃   ┃   ┗━ sys.stdout.flush()
6824     ┃   ┃   ┣━ print_at(x, y + i, " " * width)
6825     ┃   ┃   ┣━ for i in range(height):
6826     ┃   ┃   ┣━ print_at(x, y + i, " " * width)
6827     ┃   ┃   ┃   ┣━ goto(x, y)
6828     ┃   ┃   ┃   ┃   ┣━ write('\x1B[%d;%df' % (y, x))
6829     ┃   ┃   ┃   ┃   ┃   ┣━ print(value, end = '')
6830     ┃   ┃   ┃   ┃   ┃   ┣━ sys.stdout.flush()
6831     ┃   ┃   ┃   ┃   ┃   ┗━ sys.stdout.flush()
6832     ┃   ┃   ┃   ┃   ┣━ write('\x1B[%d;%df' % (y, x))
6833     ┃   ┃   ┃   ┃   ┗━ write('\x1B[%d;%df' % (y, x))
6834     ┃   ┃   ┃   ┣━ goto(x, y)
6835     ┃   ┃   ┃   ┣━ print(text, end = '')
6836     ┃   ┃   ┃   ┣━ sys.stdout.flush()
6837     ┃   ┃   ┃   ┗━ sys.stdout.flush()
6838     ┃   ┃   ┣━ print_at(x, y + i, " " * width)
6839     ┃   ┃   ┣━ for i in range(height):
6840     ┃   ┃   ┣━ print_at(x, y + i, " " * width)
6841     ┃   ┃   ┃   ┣━ goto(x, y)
6842     ┃   ┃   ┃   ┃   ┣━ write('\x1B[%d;%df' % (y, x))
6843     ┃   ┃   ┃   ┃   ┃   ┣━ print(value, end = '')
6844     ┃   ┃   ┃   ┃   ┃   ┣━ sys.stdout.flush()
6845     ┃   ┃   ┃   ┃   ┃   ┗━ sys.stdout.flush()
6846     ┃   ┃   ┃   ┃   ┣━ write('\x1B[%d;%df' % (y, x))
6847     ┃   ┃   ┃   ┃   ┗━ write('\x1B[%d;%df' % (y, x))
6848     ┃   ┃   ┃   ┣━ goto(x, y)
6849     ┃   ┃   ┃   ┣━ print(text, end = '')
6850     ┃   ┃   ┃   ┣━ sys.stdout.flush()
6851     ┃   ┃   ┃   ┗━ sys.stdout.flush()
6852     ┃   ┃   ┣━ print_at(x, y + i, " " * width)
6853     ┃   ┃   ┣━ for i in range(height):
6854     ┃   ┃   ┣━ print_at(x, y + i, " " * width)
6855     ┃   ┃   ┃   ┣━ goto(x, y)
6856     ┃   ┃   ┃   ┃   ┣━ write('\x1B[%d;%df' % (y, x))
6857     ┃   ┃   ┃   ┃   ┃   ┣━ print(value, end = '')
6858     ┃   ┃   ┃   ┃   ┃   ┣━ sys.stdout.flush()
6859     ┃   ┃   ┃   ┃   ┃   ┗━ sys.stdout.flush()
6860     ┃   ┃   ┃   ┃   ┣━ write('\x1B[%d;%df' % (y, x))
6861     ┃   ┃   ┃   ┃   ┗━ write('\x1B[%d;%df' % (y, x))
6862     ┃   ┃   ┃   ┣━ goto(x, y)
6863     ┃   ┃   ┃   ┣━ print(text, end = '')
6864     ┃   ┃   ┃   ┣━ sys.stdout.flush()
6865     ┃   ┃   ┃   ┗━ sys.stdout.flush()
6866     ┃   ┃   ┣━ print_at(x, y + i, " " * width)
6867     ┃   ┃   ┣━ for i in range(height):
6868     ┃   ┃   ┣━ print_at(x, y + i, " " * width)
6869     ┃   ┃   ┃   ┣━ goto(x, y)
6870     ┃   ┃   ┃   ┃   ┣━ write('\x1B[%d;%df' % (y, x))
6871     ┃   ┃   ┃   ┃   ┃   ┣━ print(value, end = '')
6872     ┃   ┃   ┃   ┃   ┃   ┣━ sys.stdout.flush()
6873     ┃   ┃   ┃   ┃   ┃   ┗━ sys.stdout.flush()
6874     ┃   ┃   ┃   ┃   ┣━ write('\x1B[%d;%df' % (y, x))
6875     ┃   ┃   ┃   ┃   ┗━ write('\x1B[%d;%df' % (y, x))
6876     ┃   ┃   ┃   ┣━ goto(x, y)
6877     ┃   ┃   ┃   ┣━ print(text, end = '')
6878     ┃   ┃   ┃   ┣━ sys.stdout.flush()
6879     ┃   ┃   ┃   ┗━ sys.stdout.flush()
6880     ┃   ┃   ┣━ print_at(x, y + i, " " * width)
6881     ┃   ┃   ┣━ for i in range(height):
6882     ┃   ┃   ┣━ print_at(x, y + i, " " * width)
6883     ┃   ┃   ┃   ┣━ goto(x, y)
6884     ┃   ┃   ┃   ┃   ┣━ write('\x1B[%d;%df' % (y, x))
6885     ┃   ┃   ┃   ┃   ┃   ┣━ print(value, end = '')
6886     ┃   ┃   ┃   ┃   ┃   ┣━ sys.stdout.flush()
6887     ┃   ┃   ┃   ┃   ┃   ┗━ sys.stdout.flush()
6888     ┃   ┃   ┃   ┃   ┣━ write('\x1B[%d;%df' % (y, x))
6889     ┃   ┃   ┃   ┃   ┗━ write('\x1B[%d;%df' % (y, x))
6890     ┃   ┃   ┃   ┣━ goto(x, y)
6891     ┃   ┃   ┃   ┣━ print(text, end = '')
6892     ┃   ┃   ┃   ┣━ sys.stdout.flush()
6893     ┃   ┃   ┃   ┗━ sys.stdout.flush()
6894     ┃   ┃   ┣━ print_at(x, y + i, " " * width)
6895     ┃   ┃   ┣━ for i in range(height):
6896     ┃   ┃   ┣━ print_at(x, y + i, " " * width)
6897     ┃   ┃   ┃   ┣━ goto(x, y)
6898     ┃   ┃   ┃   ┃   ┣━ write('\x1B[%d;%df' % (y, x))
6899     ┃   ┃   ┃   ┃   ┃   ┣━ print(value, end = '')
6900     ┃   ┃   ┃   ┃   ┃   ┣━ sys.stdout.flush()
6901     ┃   ┃   ┃   ┃   ┃   ┗━ sys.stdout.flush()
6902     ┃   ┃   ┃   ┃   ┣━ write('\x1B[%d;%df' % (y, x))
6903     ┃   ┃   ┃   ┃   ┗━ write('\x1B[%d;%df' % (y, x))
6904     ┃   ┃   ┃   ┣━ goto(x, y)
6905     ┃   ┃   ┃   ┣━ print(text, end = '')
6906     ┃   ┃   ┃   ┣━ sys.stdout.flush()
6907     ┃   ┃   ┃   ┗━ sys.stdout.flush()
6908     ┃   ┃   ┣━ print_at(x, y + i, " " * width)
6909     ┃   ┃   ┣━ for i in range(height):
6910     ┃   ┃   ┣━ print_at(x, y + i, " " * width)
6911     ┃   ┃   ┃   ┣━ goto(x, y)
6912     ┃   ┃   ┃   ┃   ┣━ write('\x1B[%d;%df' % (y, x))
6913     ┃   ┃   ┃   ┃   ┃   ┣━ print(value, end = '')
6914     ┃   ┃   ┃   ┃   ┃   ┣━ sys.stdout.flush()
6915     ┃   ┃   ┃   ┃   ┃   ┗━ sys.stdout.flush()
6916     ┃   ┃   ┃   ┃   ┣━ write('\x1B[%d;%df' % (y, x))
6917     ┃   ┃   ┃   ┃   ┗━ write('\x1B[%d;%df' % (y, x))
6918     ┃   ┃   ┃   ┣━ goto(x, y)
6919     ┃   ┃   ┃   ┣━ print(text, end = '')
6920     ┃   ┃   ┃   ┣━ sys.stdout.flush()
6921     ┃   ┃   ┃   ┗━ sys.stdout.flush()
6922     ┃   ┃   ┣━ print_at(x, y + i, " " * width)
6923     ┃   ┃   ┣━ for i in range(height):
6924     ┃   ┃   ┣━ print_at(x, y + i, " " * width)
6925     ┃   ┃   ┃   ┣━ goto(x, y)
6926     ┃   ┃   ┃   ┃   ┣━ write('\x1B[%d;%df' % (y, x))
6927     ┃   ┃   ┃   ┃   ┃   ┣━ print(value, end = '')
6928     ┃   ┃   ┃   ┃   ┃   ┣━ sys.stdout.flush()
6929     ┃   ┃   ┃   ┃   ┃   ┗━ sys.stdout.flush()
6930     ┃   ┃   ┃   ┃   ┣━ write('\x1B[%d;%df' % (y, x))
6931     ┃   ┃   ┃   ┃   ┗━ write('\x1B[%d;%df' % (y, x))
6932     ┃   ┃   ┃   ┣━ goto(x, y)
6933     ┃   ┃   ┃   ┣━ print(text, end = '')
6934     ┃   ┃   ┃   ┣━ sys.stdout.flush()
6935     ┃   ┃   ┃   ┗━ sys.stdout.flush()
6936     ┃   ┃   ┣━ print_at(x, y + i, " " * width)
6937     ┃   ┃   ┣━ for i in range(height):
6938     ┃   ┃   ┣━ print_at(x, y + i, " " * width)
6939     ┃   ┃   ┃   ┣━ goto(x, y)
6940     ┃   ┃   ┃   ┃   ┣━ write('\x1B[%d;%df' % (y, x))
6941     ┃   ┃   ┃   ┃   ┃   ┣━ print(value, end = '')
6942     ┃   ┃   ┃   ┃   ┃   ┣━ sys.stdout.flush()
6943     ┃   ┃   ┃   ┃   ┃   ┗━ sys.stdout.flush()
6944     ┃   ┃   ┃   ┃   ┣━ write('\x1B[%d;%df' % (y, x))
6945     ┃   ┃   ┃   ┃   ┗━ write('\x1B[%d;%df' % (y, x))
6946     ┃   ┃   ┃   ┣━ goto(x, y)
6947     ┃   ┃   ┃   ┣━ print(text, end = '')
6948     ┃   ┃   ┃   ┣━ sys.stdout.flush()
6949     ┃   ┃   ┃   ┗━ sys.stdout.flush()
6950     ┃   ┃   ┣━ print_at(x, y + i, " " * width)
6951     ┃   ┃   ┣━ for i in range(height):
6952     ┃   ┃   ┣━ print_at(x, y + i, " " * width)
6953     ┃   ┃   ┃   ┣━ goto(x, y)
6954     ┃   ┃   ┃   ┃   ┣━ write('\x1B[%d;%df' % (y, x))
6955     ┃   ┃   ┃   ┃   ┃   ┣━ print(value, end = '')
6956     ┃   ┃   ┃   ┃   ┃   ┣━ sys.stdout.flush()
6957     ┃   ┃   ┃   ┃   ┃   ┗━ sys.stdout.flush()
6958     ┃   ┃   ┃   ┃   ┣━ write('\x1B[%d;%df' % (y, x))
6959     ┃   ┃   ┃   ┃   ┗━ write('\x1B[%d;%df' % (y, x))
6960     ┃   ┃   ┃   ┣━ goto(x, y)
6961     ┃   ┃   ┃   ┣━ print(text, end = '')
6962     ┃   ┃   ┃   ┣━ sys.stdout.flush()
6963     ┃   ┃   ┃   ┗━ sys.stdout.flush()
6964     ┃   ┃   ┣━ print_at(x, y + i, " " * width)
6965     ┃   ┃   ┣━ for i in range(height):
6966     ┃   ┃   ┣━ print_at(x, y + i, " " * width)
6967     ┃   ┃   ┃   ┣━ goto(x, y)
6968     ┃   ┃   ┃   ┃   ┣━ write('\x1B[%d;%df' % (y, x))
6969     ┃   ┃   ┃   ┃   ┃   ┣━ print(value, end = '')
6970     ┃   ┃   ┃   ┃   ┃   ┣━ sys.stdout.flush()
6971     ┃   ┃   ┃   ┃   ┃   ┗━ sys.stdout.flush()
6972     ┃   ┃   ┃   ┃   ┣━ write('\x1B[%d;%df' % (y, x))
6973     ┃   ┃   ┃   ┃   ┗━ write('\x1B[%d;%df' % (y, x))
6974     ┃   ┃   ┃   ┣━ goto(x, y)
6975     ┃   ┃   ┃   ┣━ print(text, end = '')
6976     ┃   ┃   ┃   ┣━ sys.stdout.flush()
6977     ┃   ┃   ┃   ┗━ sys.stdout.flush()
6978     ┃   ┃   ┣━ print_at(x, y + i, " " * width)
6979     ┃   ┃   ┣━ for i in range(height):
6980     ┃   ┃   ┣━ print_at(x, y + i, " " * width)
6981     ┃   ┃   ┃   ┣━ goto(x, y)
6982     ┃   ┃   ┃   ┃   ┣━ write('\x1B[%d;%df' % (y, x))
6983     ┃   ┃   ┃   ┃   ┃   ┣━ print(value, end = '')
6984     ┃   ┃   ┃   ┃   ┃   ┣━ sys.stdout.flush()
6985     ┃   ┃   ┃   ┃   ┃   ┗━ sys.stdout.flush()
6986     ┃   ┃   ┃   ┃   ┣━ write('\x1B[%d;%df' % (y, x))
6987     ┃   ┃   ┃   ┃   ┗━ write('\x1B[%d;%df' % (y, x))
6988     ┃   ┃   ┃   ┣━ goto(x, y)
6989     ┃   ┃   ┃   ┣━ print(text, end = '')
6990     ┃   ┃   ┃   ┣━ sys.stdout.flush()
6991     ┃   ┃   ┃   ┗━ sys.stdout.flush()
6992     ┃   ┃   ┣━ print_at(x, y + i, " " * width)
6993     ┃   ┃   ┣━ for i in range(height):
6994     ┃   ┃   ┣━ print_at(x, y + i, " " * width)
6995     ┃   ┃   ┃   ┣━ goto(x, y)
6996     ┃   ┃   ┃   ┃   ┣━ write('\x1B[%d;%df' % (y, x))
6997     ┃   ┃   ┃   ┃   ┃   ┣━ print(value, end = '')
6998     ┃   ┃   ┃   ┃   ┃   ┣━ sys.stdout.flush()
6999     ┃   ┃   ┃   ┃   ┃   ┗━ sys.stdout.flush()
7000     ┃   ┃   ┃   ┃   ┣━ write('\x1B[%d;%df' % (y, x))
7001     ┃   ┃   ┃   ┃   ┗━ write('\x1B[%d;%df' % (y, x))
7002     ┃   ┃   ┃   ┣━ goto(x, y)
7003     ┃   ┃   ┃   ┣━ print(text, end = '')
7004     ┃   ┃   ┃   ┣━ sys.stdout.flush()
7005     ┃   ┃   ┃   ┗━ sys.stdout.flush()
7006     ┃   ┃   ┣━ print_at(x, y + i, " " * width)
7007     ┃   ┃   ┣━ for i in range(height):
7008     ┃   ┃   ┣━ print_at(x, y + i, " " * width)
7009     ┃   ┃   ┃   ┣━ goto(x, y)
7010     ┃   ┃   ┃   ┃   ┣━ write('\x1B[%d;%df' % (y, x))
7011     ┃   ┃   ┃   ┃   ┃   ┣━ print(value, end = '')
7012     ┃   ┃   ┃   ┃   ┃   ┣━ sys.stdout.flush()
7013     ┃   ┃   ┃   ┃   ┃   ┗━ sys.stdout.flush()
7014     ┃   ┃   ┃   ┃   ┣━ write('\x1B[%d;%df' % (y, x))
7015     ┃   ┃   ┃   ┃   ┗━ write('\x1B[%d;%df' % (y, x))
7016     ┃   ┃   ┃   ┣━ goto(x, y)
7017     ┃   ┃   ┃   ┣━ print(text, end = '')
7018     ┃   ┃   ┃   ┣━ sys.stdout.flush()
7019     ┃   ┃   ┃   ┗━ sys.stdout.flush()
7020     ┃   ┃   ┣━ print_at(x, y + i, " " * width)
7021     ┃   ┃   ┣━ for i in range(height):
7022     ┃   ┃   ┣━ print_at(x, y + i, " " * width)
7023     ┃   ┃   ┃   ┣━ goto(x, y)
7024     ┃   ┃   ┃   ┃   ┣━ write('\x1B[%d;%df' % (y, x))
7025     ┃   ┃   ┃   ┃   ┃   ┣━ print(value, end = '')
7026     ┃   ┃   ┃   ┃   ┃   ┣━ sys.stdout.flush()
7027     ┃   ┃   ┃   ┃   ┃   ┗━ sys.stdout.flush()
7028     ┃   ┃   ┃   ┃   ┣━ write('\x1B[%d;%df' % (y, x))
7029     ┃   ┃   ┃   ┃   ┗━ write('\x1B[%d;%df' % (y, x))
7030     ┃   ┃   ┃   ┣━ goto(x, y)
7031     ┃   ┃   ┃   ┣━ print(text, end = '')
7032     ┃   ┃   ┃   ┣━ sys.stdout.flush()
7033     ┃   ┃   ┃   ┗━ sys.stdout.flush()
7034     ┃   ┃   ┣━ print_at(x, y + i, " " * width)
7035     ┃   ┃   ┣━ for i in range(height):
7036     ┃   ┃   ┣━ print_at(x, y + i, " " * width)
7037     ┃   ┃   ┃   ┣━ goto(x, y)
7038     ┃   ┃   ┃   ┃   ┣━ write('\x1B[%d;%df' % (y, x))
7039     ┃   ┃   ┃   ┃   ┃   ┣━ print(value, end = '')
7040     ┃   ┃   ┃   ┃   ┃   ┣━ sys.stdout.flush()
7041     ┃   ┃   ┃   ┃   ┃   ┗━ sys.stdout.flush()
7042     ┃   ┃   ┃   ┃   ┣━ write('\x1B[%d;%df' % (y, x))
7043     ┃   ┃   ┃   ┃   ┗━ write('\x1B[%d;%df' % (y, x))
7044     ┃   ┃   ┃   ┣━ goto(x, y)
7045     ┃   ┃   ┃   ┣━ print(text, end = '')
7046     ┃   ┃   ┃   ┣━ sys.stdout.flush()
7047     ┃   ┃   ┃   ┗━ sys.stdout.flush()
7048     ┃   ┃   ┣━ print_at(x, y + i, " " * width)
7049     ┃   ┃   ┣━ for i in range(height):
7050     ┃   ┃   ┣━ print_at(x, y + i, " " * width)
7051     ┃   ┃   ┃   ┣━ goto(x, y)
7052     ┃   ┃   ┃   ┃   ┣━ write('\x1B[%d;%df' % (y, x))
7053     ┃   ┃   ┃   ┃   ┃   ┣━ print(value, end = '')
7054     ┃   ┃   ┃   ┃   ┃   ┣━ sys.stdout.flush()
7055     ┃   ┃   ┃   ┃   ┃   ┗━ sys.stdout.flush()
7056     ┃   ┃   ┃   ┃   ┣━ write('\x1B[%d;%df' % (y, x))
7057     ┃   ┃   ┃   ┃   ┗━ write('\x1B[%d;%df' % (y, x))
7058     ┃   ┃   ┃   ┣━ goto(x, y)
7059     ┃   ┃   ┃   ┣━ print(text, end = '')
7060     ┃   ┃   ┃   ┣━ sys.stdout.flush()
7061     ┃   ┃   ┃   ┗━ sys.stdout.flush()
7062     ┃   ┃   ┣━ print_at(x, y + i, " " * width)
7063     ┃   ┃   ┣━ for i in range(height):
7064     ┃   ┃   ┣━ print_at(x, y + i, " " * width)
7065     ┃   ┃   ┃   ┣━ goto(x, y)
7066     ┃   ┃   ┃   ┃   ┣━ write('\x1B[%d;%df' % (y, x))
7067     ┃   ┃   ┃   ┃   ┃   ┣━ print(value, end = '')
7068     ┃   ┃   ┃   ┃   ┃   ┣━ sys.stdout.flush()
7069     ┃   ┃   ┃   ┃   ┃   ┗━ sys.stdout.flush()
7070     ┃   ┃   ┃   ┃   ┣━ write('\x1B[%d;%df' % (y, x))
7071     ┃   ┃   ┃   ┃   ┗━ write('\x1B[%d;%df' % (y, x))
7072     ┃   ┃   ┃   ┣━ goto(x, y)
7073     ┃   ┃   ┃   ┣━ print(text, end = '')
7074     ┃   ┃   ┃   ┣━ sys.stdout.flush()
7075     ┃   ┃   ┃   ┗━ sys.stdout.flush()
7076     ┃   ┃   ┣━ print_at(x, y + i, " " * width)
7077     ┃   ┃   ┣━ for i in range(height):
7078     ┃   ┃   ┣━ print_at(x, y + i, " " * width)
7079     ┃   ┃   ┃   ┣━ goto(x, y)
7080     ┃   ┃   ┃   ┃   ┣━ write('\x1B[%d;%df' % (y, x))
7081     ┃   ┃   ┃   ┃   ┃   ┣━ print(value, end = '')
7082     ┃   ┃   ┃   ┃   ┃   ┣━ sys.stdout.flush()
7083     ┃   ┃   ┃   ┃   ┃   ┗━ sys.stdout.flush()
7084     ┃   ┃   ┃   ┃   ┣━ write('\x1B[%d;%df' % (y, x))
7085     ┃   ┃   ┃   ┃   ┗━ write('\x1B[%d;%df' % (y, x))
7086     ┃   ┃   ┃   ┣━ goto(x, y)
7087     ┃   ┃   ┃   ┣━ print(text, end = '')
7088     ┃   ┃   ┃   ┣━ sys.stdout.flush()
7089     ┃   ┃   ┃   ┗━ sys.stdout.flush()
7090     ┃   ┃   ┣━ print_at(x, y + i, " " * width)
7091     ┃   ┃   ┣━ for i in range(height):
7092     ┃   ┃   ┣━ print_at(x, y + i, " " * width)
7093     ┃   ┃   ┃   ┣━ goto(x, y)
7094     ┃   ┃   ┃   ┃   ┣━ write('\x1B[%d;%df' % (y, x))
7095     ┃   ┃   ┃   ┃   ┃   ┣━ print(value, end = '')
7096     ┃   ┃   ┃   ┃   ┃   ┣━ sys.stdout.flush()
7097     ┃   ┃   ┃   ┃   ┃   ┗━ sys.stdout.flush()
7098     ┃   ┃   ┃   ┃   ┣━ write('\x1B[%d;%df' % (y, x))
7099     ┃   ┃   ┃   ┃   ┗━ write('\x1B[%d;%df' % (y, x))
7100     ┃   ┃   ┃   ┣━ goto(x, y)
7101     ┃   ┃   ┃   ┣━ print(text, end = '')
7102     ┃   ┃   ┃   ┣━ sys.stdout.flush()
7103     ┃   ┃   ┃   ┗━ sys.stdout.flush()
7104     ┃   ┃   ┣━ print_at(x, y + i, " " * width)
7105     ┃   ┃   ┣━ for i in range(height):
7106     ┃   ┃   ┗━ for i in range(height):
7107     ┃   ┣━ clear_rect(1, 1, screen_width, screen_height)
7108     ┃   ┣━ draw(root_element)
7109     ┃   ┃   ┣━ termsize = os.get_terminal_size()
7110     ┃   ┃   ┣━ screen_width = termsize.columns
7111     ┃   ┃   ┣━ screen_height = termsize.lines
7112     ┃   ┃   ┣━ indent = "  " * level
7113     ┃   ┃   ┣━ if not is_placed(element):
7114     ┃   ┃   ┃   ┣━ return hasattr(element, "x") and hasattr(element, "y") \
7115     ┃   ┃   ┃   ┣━ and hasattr(element, "width") and hasattr(element, "height")
7116     ┃   ┃   ┃   ┣━ return hasattr(element, "x") and hasattr(element, "y") \
7117     ┃   ┃   ┃   ┣━ and hasattr(element, "width") and hasattr(element, "height")
7118     ┃   ┃   ┃   ┣━ return hasattr(element, "x") and hasattr(element, "y") \
7119     ┃   ┃   ┃   ┗━ return hasattr(element, "x") and hasattr(element, "y") \
7120     ┃   ┃   ┣━ if not is_placed(element):
7121     ┃   ┃   ┣━ elif element.x <= screen_width and element.y <= screen_height:
7122     ┃   ┃   ┣━ if hasattr(element, "draw"):
7123     ┃   ┃   ┣━ element.draw()
7124     ┃   ┃   ┃   ┣━ clear_rect(self.x, self.y, self.width, self.height)
7125     ┃   ┃   ┃   ┃   ┣━ for i in range(height):
7126     ┃   ┃   ┃   ┃   ┣━ print_at(x, y + i, " " * width)
7127     ┃   ┃   ┃   ┃   ┃   ┣━ goto(x, y)
7128     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ write('\x1B[%d;%df' % (y, x))
7129     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ print(value, end = '')
7130     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ sys.stdout.flush()
7131     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ sys.stdout.flush()
7132     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ write('\x1B[%d;%df' % (y, x))
7133     ┃   ┃   ┃   ┃   ┃   ┃   ┗━ write('\x1B[%d;%df' % (y, x))
7134     ┃   ┃   ┃   ┃   ┃   ┣━ goto(x, y)
7135     ┃   ┃   ┃   ┃   ┃   ┣━ print(text, end = '')
7136     ┃   ┃   ┃   ┃   ┃   ┣━ sys.stdout.flush()
7137     ┃   ┃   ┃   ┃   ┃   ┗━ sys.stdout.flush()
7138     ┃   ┃   ┃   ┃   ┣━ print_at(x, y + i, " " * width)
7139     ┃   ┃   ┃   ┃   ┣━ for i in range(height):
7140     ┃   ┃   ┃   ┃   ┣━ print_at(x, y + i, " " * width)
7141     ┃   ┃   ┃   ┃   ┃   ┣━ goto(x, y)
7142     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ write('\x1B[%d;%df' % (y, x))
7143     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ print(value, end = '')
7144     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ sys.stdout.flush()
7145     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ sys.stdout.flush()
7146     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ write('\x1B[%d;%df' % (y, x))
7147     ┃   ┃   ┃   ┃   ┃   ┃   ┗━ write('\x1B[%d;%df' % (y, x))
7148     ┃   ┃   ┃   ┃   ┃   ┣━ goto(x, y)
7149     ┃   ┃   ┃   ┃   ┃   ┣━ print(text, end = '')
7150     ┃   ┃   ┃   ┃   ┃   ┣━ sys.stdout.flush()
7151     ┃   ┃   ┃   ┃   ┃   ┗━ sys.stdout.flush()
7152     ┃   ┃   ┃   ┃   ┣━ print_at(x, y + i, " " * width)
7153     ┃   ┃   ┃   ┃   ┣━ for i in range(height):
7154     ┃   ┃   ┃   ┃   ┣━ print_at(x, y + i, " " * width)
7155     ┃   ┃   ┃   ┃   ┃   ┣━ goto(x, y)
7156     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ write('\x1B[%d;%df' % (y, x))
7157     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ print(value, end = '')
7158     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ sys.stdout.flush()
7159     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ sys.stdout.flush()
7160     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ write('\x1B[%d;%df' % (y, x))
7161     ┃   ┃   ┃   ┃   ┃   ┃   ┗━ write('\x1B[%d;%df' % (y, x))
7162     ┃   ┃   ┃   ┃   ┃   ┣━ goto(x, y)
7163     ┃   ┃   ┃   ┃   ┃   ┣━ print(text, end = '')
7164     ┃   ┃   ┃   ┃   ┃   ┣━ sys.stdout.flush()
7165     ┃   ┃   ┃   ┃   ┃   ┗━ sys.stdout.flush()
7166     ┃   ┃   ┃   ┃   ┣━ print_at(x, y + i, " " * width)
7167     ┃   ┃   ┃   ┃   ┣━ for i in range(height):
7168     ┃   ┃   ┃   ┃   ┣━ print_at(x, y + i, " " * width)
7169     ┃   ┃   ┃   ┃   ┃   ┣━ goto(x, y)
7170     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ write('\x1B[%d;%df' % (y, x))
7171     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ print(value, end = '')
7172     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ sys.stdout.flush()
7173     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ sys.stdout.flush()
7174     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ write('\x1B[%d;%df' % (y, x))
7175     ┃   ┃   ┃   ┃   ┃   ┃   ┗━ write('\x1B[%d;%df' % (y, x))
7176     ┃   ┃   ┃   ┃   ┃   ┣━ goto(x, y)
7177     ┃   ┃   ┃   ┃   ┃   ┣━ print(text, end = '')
7178     ┃   ┃   ┃   ┃   ┃   ┣━ sys.stdout.flush()
7179     ┃   ┃   ┃   ┃   ┃   ┗━ sys.stdout.flush()
7180     ┃   ┃   ┃   ┃   ┣━ print_at(x, y + i, " " * width)
7181     ┃   ┃   ┃   ┃   ┣━ for i in range(height):
7182     ┃   ┃   ┃   ┃   ┣━ print_at(x, y + i, " " * width)
7183     ┃   ┃   ┃   ┃   ┃   ┣━ goto(x, y)
7184     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ write('\x1B[%d;%df' % (y, x))
7185     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ print(value, end = '')
7186     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ sys.stdout.flush()
7187     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ sys.stdout.flush()
7188     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ write('\x1B[%d;%df' % (y, x))
7189     ┃   ┃   ┃   ┃   ┃   ┃   ┗━ write('\x1B[%d;%df' % (y, x))
7190     ┃   ┃   ┃   ┃   ┃   ┣━ goto(x, y)
7191     ┃   ┃   ┃   ┃   ┃   ┣━ print(text, end = '')
7192     ┃   ┃   ┃   ┃   ┃   ┣━ sys.stdout.flush()
7193     ┃   ┃   ┃   ┃   ┃   ┗━ sys.stdout.flush()
7194     ┃   ┃   ┃   ┃   ┣━ print_at(x, y + i, " " * width)
7195     ┃   ┃   ┃   ┃   ┣━ for i in range(height):
7196     ┃   ┃   ┃   ┃   ┣━ print_at(x, y + i, " " * width)
7197     ┃   ┃   ┃   ┃   ┃   ┣━ goto(x, y)
7198     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ write('\x1B[%d;%df' % (y, x))
7199     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ print(value, end = '')
7200     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ sys.stdout.flush()
7201     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ sys.stdout.flush()
7202     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ write('\x1B[%d;%df' % (y, x))
7203     ┃   ┃   ┃   ┃   ┃   ┃   ┗━ write('\x1B[%d;%df' % (y, x))
7204     ┃   ┃   ┃   ┃   ┃   ┣━ goto(x, y)
7205     ┃   ┃   ┃   ┃   ┃   ┣━ print(text, end = '')
7206     ┃   ┃   ┃   ┃   ┃   ┣━ sys.stdout.flush()
7207     ┃   ┃   ┃   ┃   ┃   ┗━ sys.stdout.flush()
7208     ┃   ┃   ┃   ┃   ┣━ print_at(x, y + i, " " * width)
7209     ┃   ┃   ┃   ┃   ┣━ for i in range(height):
7210     ┃   ┃   ┃   ┃   ┗━ for i in range(height):
7211     ┃   ┃   ┃   ┣━ clear_rect(self.x, self.y, self.width, self.height)
7212     ┃   ┃   ┃   ┗━ clear_rect(self.x, self.y, self.width, self.height)
7213     ┃   ┃   ┣━ element.draw()
7214     ┃   ┃   ┣━ if hasattr(element, "children"):
7215     ┃   ┃   ┣━ for child in element.children:
7216     ┃   ┃   ┣━ draw(child, level + 1)
7217     ┃   ┃   ┃   ┣━ termsize = os.get_terminal_size()
7218     ┃   ┃   ┃   ┣━ screen_width = termsize.columns
7219     ┃   ┃   ┃   ┣━ screen_height = termsize.lines
7220     ┃   ┃   ┃   ┣━ indent = "  " * level
7221     ┃   ┃   ┃   ┣━ if not is_placed(element):
7222     ┃   ┃   ┃   ┃   ┣━ return hasattr(element, "x") and hasattr(element, "y") \
7223     ┃   ┃   ┃   ┃   ┣━ and hasattr(element, "width") and hasattr(element, "height")
7224     ┃   ┃   ┃   ┃   ┣━ return hasattr(element, "x") and hasattr(element, "y") \
7225     ┃   ┃   ┃   ┃   ┣━ and hasattr(element, "width") and hasattr(element, "height")
7226     ┃   ┃   ┃   ┃   ┣━ return hasattr(element, "x") and hasattr(element, "y") \
7227     ┃   ┃   ┃   ┃   ┗━ return hasattr(element, "x") and hasattr(element, "y") \
7228     ┃   ┃   ┃   ┣━ if not is_placed(element):
7229     ┃   ┃   ┃   ┣━ elif element.x <= screen_width and element.y <= screen_height:
7230     ┃   ┃   ┃   ┣━ if hasattr(element, "draw"):
7231     ┃   ┃   ┃   ┣━ element.draw()
7232     ┃   ┃   ┃   ┃   ┣━ display = self.text[0:self.width].ljust(self.width, " ")
7233     ┃   ┃   ┃   ┃   ┣━ print_at(self.x, self.y, display)
7234     ┃   ┃   ┃   ┃   ┃   ┣━ goto(x, y)
7235     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ write('\x1B[%d;%df' % (y, x))
7236     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ print(value, end = '')
7237     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ sys.stdout.flush()
7238     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ sys.stdout.flush()
7239     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ write('\x1B[%d;%df' % (y, x))
7240     ┃   ┃   ┃   ┃   ┃   ┃   ┗━ write('\x1B[%d;%df' % (y, x))
7241     ┃   ┃   ┃   ┃   ┃   ┣━ goto(x, y)
7242     ┃   ┃   ┃   ┃   ┃   ┣━ print(text, end = '')
7243     ┃   ┃   ┃   ┃   ┃   ┣━ sys.stdout.flush()
7244     ┃   ┃   ┃   ┃   ┃   ┗━ sys.stdout.flush()
7245     ┃   ┃   ┃   ┃   ┣━ print_at(self.x, self.y, display)
7246     ┃   ┃   ┃   ┃   ┗━ print_at(self.x, self.y, display)
7247     ┃   ┃   ┃   ┣━ element.draw()
7248     ┃   ┃   ┃   ┣━ if hasattr(element, "children"):
7249     ┃   ┃   ┃   ┣━ draw(child, level + 1)
7250     ┃   ┃   ┃   ┗━ draw(child, level + 1)
7251     ┃   ┃   ┣━ for child in element.children:
7252     ┃   ┃   ┣━ draw(child, level + 1)
7253     ┃   ┃   ┃   ┣━ termsize = os.get_terminal_size()
7254     ┃   ┃   ┃   ┣━ screen_width = termsize.columns
7255     ┃   ┃   ┃   ┣━ screen_height = termsize.lines
7256     ┃   ┃   ┃   ┣━ indent = "  " * level
7257     ┃   ┃   ┃   ┣━ if not is_placed(element):
7258     ┃   ┃   ┃   ┃   ┣━ return hasattr(element, "x") and hasattr(element, "y") \
7259     ┃   ┃   ┃   ┃   ┣━ and hasattr(element, "width") and hasattr(element, "height")
7260     ┃   ┃   ┃   ┃   ┣━ return hasattr(element, "x") and hasattr(element, "y") \
7261     ┃   ┃   ┃   ┃   ┣━ and hasattr(element, "width") and hasattr(element, "height")
7262     ┃   ┃   ┃   ┃   ┣━ return hasattr(element, "x") and hasattr(element, "y") \
7263     ┃   ┃   ┃   ┃   ┗━ return hasattr(element, "x") and hasattr(element, "y") \
7264     ┃   ┃   ┃   ┣━ if not is_placed(element):
7265     ┃   ┃   ┃   ┣━ elif element.x <= screen_width and element.y <= screen_height:
7266     ┃   ┃   ┃   ┣━ if hasattr(element, "draw"):
7267     ┃   ┃   ┃   ┣━ element.draw()
7268     ┃   ┃   ┃   ┃   ┣━ clear_rect(self.x, self.y, self.width, self.height)
7269     ┃   ┃   ┃   ┃   ┃   ┣━ for i in range(height):
7270     ┃   ┃   ┃   ┃   ┃   ┣━ print_at(x, y + i, " " * width)
7271     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ goto(x, y)
7272     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ write('\x1B[%d;%df' % (y, x))
7273     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ print(value, end = '')
7274     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ sys.stdout.flush()
7275     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ sys.stdout.flush()
7276     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ write('\x1B[%d;%df' % (y, x))
7277     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ write('\x1B[%d;%df' % (y, x))
7278     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ goto(x, y)
7279     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ print(text, end = '')
7280     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ sys.stdout.flush()
7281     ┃   ┃   ┃   ┃   ┃   ┃   ┗━ sys.stdout.flush()
7282     ┃   ┃   ┃   ┃   ┃   ┣━ print_at(x, y + i, " " * width)
7283     ┃   ┃   ┃   ┃   ┃   ┣━ for i in range(height):
7284     ┃   ┃   ┃   ┃   ┃   ┣━ print_at(x, y + i, " " * width)
7285     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ goto(x, y)
7286     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ write('\x1B[%d;%df' % (y, x))
7287     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ print(value, end = '')
7288     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ sys.stdout.flush()
7289     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ sys.stdout.flush()
7290     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ write('\x1B[%d;%df' % (y, x))
7291     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ write('\x1B[%d;%df' % (y, x))
7292     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ goto(x, y)
7293     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ print(text, end = '')
7294     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ sys.stdout.flush()
7295     ┃   ┃   ┃   ┃   ┃   ┃   ┗━ sys.stdout.flush()
7296     ┃   ┃   ┃   ┃   ┃   ┣━ print_at(x, y + i, " " * width)
7297     ┃   ┃   ┃   ┃   ┃   ┣━ for i in range(height):
7298     ┃   ┃   ┃   ┃   ┃   ┣━ print_at(x, y + i, " " * width)
7299     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ goto(x, y)
7300     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ write('\x1B[%d;%df' % (y, x))
7301     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ print(value, end = '')
7302     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ sys.stdout.flush()
7303     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ sys.stdout.flush()
7304     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ write('\x1B[%d;%df' % (y, x))
7305     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ write('\x1B[%d;%df' % (y, x))
7306     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ goto(x, y)
7307     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ print(text, end = '')
7308     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ sys.stdout.flush()
7309     ┃   ┃   ┃   ┃   ┃   ┃   ┗━ sys.stdout.flush()
7310     ┃   ┃   ┃   ┃   ┃   ┣━ print_at(x, y + i, " " * width)
7311     ┃   ┃   ┃   ┃   ┃   ┣━ for i in range(height):
7312     ┃   ┃   ┃   ┃   ┃   ┗━ for i in range(height):
7313     ┃   ┃   ┃   ┃   ┣━ clear_rect(self.x, self.y, self.width, self.height)
7314     ┃   ┃   ┃   ┃   ┗━ clear_rect(self.x, self.y, self.width, self.height)
7315     ┃   ┃   ┃   ┣━ element.draw()
7316     ┃   ┃   ┃   ┣━ if hasattr(element, "children"):
7317     ┃   ┃   ┃   ┣━ for child in element.children:
7318     ┃   ┃   ┃   ┣━ draw(child, level + 1)
7319     ┃   ┃   ┃   ┃   ┣━ termsize = os.get_terminal_size()
7320     ┃   ┃   ┃   ┃   ┣━ screen_width = termsize.columns
7321     ┃   ┃   ┃   ┃   ┣━ screen_height = termsize.lines
7322     ┃   ┃   ┃   ┃   ┣━ indent = "  " * level
7323     ┃   ┃   ┃   ┃   ┣━ if not is_placed(element):
7324     ┃   ┃   ┃   ┃   ┃   ┣━ return hasattr(element, "x") and hasattr(element, "y") \
7325     ┃   ┃   ┃   ┃   ┃   ┣━ and hasattr(element, "width") and hasattr(element, "height")
7326     ┃   ┃   ┃   ┃   ┃   ┣━ return hasattr(element, "x") and hasattr(element, "y") \
7327     ┃   ┃   ┃   ┃   ┃   ┣━ and hasattr(element, "width") and hasattr(element, "height")
7328     ┃   ┃   ┃   ┃   ┃   ┣━ return hasattr(element, "x") and hasattr(element, "y") \
7329     ┃   ┃   ┃   ┃   ┃   ┗━ return hasattr(element, "x") and hasattr(element, "y") \
7330     ┃   ┃   ┃   ┃   ┣━ if not is_placed(element):
7331     ┃   ┃   ┃   ┃   ┣━ elif element.x <= screen_width and element.y <= screen_height:
7332     ┃   ┃   ┃   ┃   ┣━ if hasattr(element, "draw"):
7333     ┃   ┃   ┃   ┃   ┣━ pass
7334     ┃   ┃   ┃   ┃   ┣━ if hasattr(element, "children"):
7335     ┃   ┃   ┃   ┃   ┣━ for child in element.children:
7336     ┃   ┃   ┃   ┃   ┣━ draw(child, level + 1)
7337     ┃   ┃   ┃   ┃   ┃   ┣━ termsize = os.get_terminal_size()
7338     ┃   ┃   ┃   ┃   ┃   ┣━ screen_width = termsize.columns
7339     ┃   ┃   ┃   ┃   ┃   ┣━ screen_height = termsize.lines
7340     ┃   ┃   ┃   ┃   ┃   ┣━ indent = "  " * level
7341     ┃   ┃   ┃   ┃   ┃   ┣━ if not is_placed(element):
7342     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ return hasattr(element, "x") and hasattr(element, "y") \
7343     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ and hasattr(element, "width") and hasattr(element, "height")
7344     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ return hasattr(element, "x") and hasattr(element, "y") \
7345     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ and hasattr(element, "width") and hasattr(element, "height")
7346     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ return hasattr(element, "x") and hasattr(element, "y") \
7347     ┃   ┃   ┃   ┃   ┃   ┃   ┗━ return hasattr(element, "x") and hasattr(element, "y") \
7348     ┃   ┃   ┃   ┃   ┃   ┣━ if not is_placed(element):
7349     ┃   ┃   ┃   ┃   ┃   ┣━ elif element.x <= screen_width and element.y <= screen_height:
7350     ┃   ┃   ┃   ┃   ┃   ┣━ if hasattr(element, "draw"):
7351     ┃   ┃   ┃   ┃   ┃   ┣━ element.draw()
7352     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ if self.color:
7353     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ print_at(self.x, self.y, "┏" + ("━" * (self.width - 2)) + "┓")
7354     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ goto(x, y)
7355     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ write('\x1B[%d;%df' % (y, x))
7356     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ print(value, end = '')
7357     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ sys.stdout.flush()
7358     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ sys.stdout.flush()
7359     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ write('\x1B[%d;%df' % (y, x))
7360     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ write('\x1B[%d;%df' % (y, x))
7361     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ goto(x, y)
7362     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ print(text, end = '')
7363     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ sys.stdout.flush()
7364     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ sys.stdout.flush()
7365     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ print_at(self.x, self.y, "┏" + ("━" * (self.width - 2)) + "┓")
7366     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ for i in range(self.height - 2):
7367     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ print_at(self.x, self.y + i + 1, "┃")
7368     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ goto(x, y)
7369     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ write('\x1B[%d;%df' % (y, x))
7370     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ print(value, end = '')
7371     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ sys.stdout.flush()
7372     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ sys.stdout.flush()
7373     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ write('\x1B[%d;%df' % (y, x))
7374     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ write('\x1B[%d;%df' % (y, x))
7375     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ goto(x, y)
7376     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ print(text, end = '')
7377     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ sys.stdout.flush()
7378     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ sys.stdout.flush()
7379     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ print_at(self.x, self.y + i + 1, "┃")
7380     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ print_at(self.x + self.width - 1, self.y + i + 1, "┃")
7381     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ goto(x, y)
7382     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ write('\x1B[%d;%df' % (y, x))
7383     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ print(value, end = '')
7384     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ sys.stdout.flush()
7385     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ sys.stdout.flush()
7386     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ write('\x1B[%d;%df' % (y, x))
7387     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ write('\x1B[%d;%df' % (y, x))
7388     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ goto(x, y)
7389     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ print(text, end = '')
7390     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ sys.stdout.flush()
7391     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ sys.stdout.flush()
7392     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ print_at(self.x + self.width - 1, self.y + i + 1, "┃")
7393     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ for i in range(self.height - 2):
7394     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ print_at(self.x, self.y + self.height - 1, "┗" + ("━" * (self.width - 2)) + "┛")
7395     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ goto(x, y)
7396     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ write('\x1B[%d;%df' % (y, x))
7397     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ print(value, end = '')
7398     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ sys.stdout.flush()
7399     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ sys.stdout.flush()
7400     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ write('\x1B[%d;%df' % (y, x))
7401     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ write('\x1B[%d;%df' % (y, x))
7402     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ goto(x, y)
7403     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ print(text, end = '')
7404     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ sys.stdout.flush()
7405     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ sys.stdout.flush()
7406     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ print_at(self.x, self.y + self.height - 1, "┗" + ("━" * (self.width - 2)) + "┛")
7407     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ if self.color:
7408     ┃   ┃   ┃   ┃   ┃   ┃   ┗━ if self.color:
7409     ┃   ┃   ┃   ┃   ┃   ┣━ element.draw()
7410     ┃   ┃   ┃   ┃   ┃   ┣━ if hasattr(element, "children"):
7411     ┃   ┃   ┃   ┃   ┃   ┣━ for child in element.children:
7412     ┃   ┃   ┃   ┃   ┃   ┣━ draw(child, level + 1)
7413     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ termsize = os.get_terminal_size()
7414     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ screen_width = termsize.columns
7415     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ screen_height = termsize.lines
7416     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ indent = "  " * level
7417     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ if not is_placed(element):
7418     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ return hasattr(element, "x") and hasattr(element, "y") \
7419     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ and hasattr(element, "width") and hasattr(element, "height")
7420     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ return hasattr(element, "x") and hasattr(element, "y") \
7421     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ and hasattr(element, "width") and hasattr(element, "height")
7422     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ return hasattr(element, "x") and hasattr(element, "y") \
7423     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ return hasattr(element, "x") and hasattr(element, "y") \
7424     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ if not is_placed(element):
7425     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ elif element.x <= screen_width and element.y <= screen_height:
7426     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ if hasattr(element, "draw"):
7427     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ element.draw()
7428     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ display = self.text[0:self.width].ljust(self.width, " ")
7429     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ print_at(self.x, self.y, display)
7430     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ goto(x, y)
7431     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ write('\x1B[%d;%df' % (y, x))
7432     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ print(value, end = '')
7433     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ sys.stdout.flush()
7434     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ sys.stdout.flush()
7435     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ write('\x1B[%d;%df' % (y, x))
7436     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ write('\x1B[%d;%df' % (y, x))
7437     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ goto(x, y)
7438     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ print(text, end = '')
7439     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ sys.stdout.flush()
7440     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ sys.stdout.flush()
7441     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ print_at(self.x, self.y, display)
7442     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ print_at(self.x, self.y, display)
7443     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ element.draw()
7444     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ if hasattr(element, "children"):
7445     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ draw(child, level + 1)
7446     ┃   ┃   ┃   ┃   ┃   ┃   ┗━ draw(child, level + 1)
7447     ┃   ┃   ┃   ┃   ┃   ┣━ for child in element.children:
7448     ┃   ┃   ┃   ┃   ┃   ┣━ draw(child, level + 1)
7449     ┃   ┃   ┃   ┃   ┃   ┗━ draw(child, level + 1)
7450     ┃   ┃   ┃   ┃   ┣━ for child in element.children:
7451     ┃   ┃   ┃   ┃   ┣━ draw(child, level + 1)
7452     ┃   ┃   ┃   ┃   ┗━ draw(child, level + 1)
7453     ┃   ┃   ┃   ┣━ for child in element.children:
7454     ┃   ┃   ┃   ┣━ draw(child, level + 1)
7455     ┃   ┃   ┃   ┃   ┣━ termsize = os.get_terminal_size()
7456     ┃   ┃   ┃   ┃   ┣━ screen_width = termsize.columns
7457     ┃   ┃   ┃   ┃   ┣━ screen_height = termsize.lines
7458     ┃   ┃   ┃   ┃   ┣━ indent = "  " * level
7459     ┃   ┃   ┃   ┃   ┣━ if not is_placed(element):
7460     ┃   ┃   ┃   ┃   ┃   ┣━ return hasattr(element, "x") and hasattr(element, "y") \
7461     ┃   ┃   ┃   ┃   ┃   ┣━ and hasattr(element, "width") and hasattr(element, "height")
7462     ┃   ┃   ┃   ┃   ┃   ┣━ return hasattr(element, "x") and hasattr(element, "y") \
7463     ┃   ┃   ┃   ┃   ┃   ┣━ and hasattr(element, "width") and hasattr(element, "height")
7464     ┃   ┃   ┃   ┃   ┃   ┣━ return hasattr(element, "x") and hasattr(element, "y") \
7465     ┃   ┃   ┃   ┃   ┃   ┗━ return hasattr(element, "x") and hasattr(element, "y") \
7466     ┃   ┃   ┃   ┃   ┣━ if not is_placed(element):
7467     ┃   ┃   ┃   ┃   ┣━ elif element.x <= screen_width and element.y <= screen_height:
7468     ┃   ┃   ┃   ┃   ┣━ if hasattr(element, "draw"):
7469     ┃   ┃   ┃   ┃   ┣━ pass
7470     ┃   ┃   ┃   ┃   ┣━ if hasattr(element, "children"):
7471     ┃   ┃   ┃   ┃   ┣━ for child in element.children:
7472     ┃   ┃   ┃   ┃   ┣━ draw(child, level + 1)
7473     ┃   ┃   ┃   ┃   ┃   ┣━ termsize = os.get_terminal_size()
7474     ┃   ┃   ┃   ┃   ┃   ┣━ screen_width = termsize.columns
7475     ┃   ┃   ┃   ┃   ┃   ┣━ screen_height = termsize.lines
7476     ┃   ┃   ┃   ┃   ┃   ┣━ indent = "  " * level
7477     ┃   ┃   ┃   ┃   ┃   ┣━ if not is_placed(element):
7478     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ return hasattr(element, "x") and hasattr(element, "y") \
7479     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ and hasattr(element, "width") and hasattr(element, "height")
7480     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ return hasattr(element, "x") and hasattr(element, "y") \
7481     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ and hasattr(element, "width") and hasattr(element, "height")
7482     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ return hasattr(element, "x") and hasattr(element, "y") \
7483     ┃   ┃   ┃   ┃   ┃   ┃   ┗━ return hasattr(element, "x") and hasattr(element, "y") \
7484     ┃   ┃   ┃   ┃   ┃   ┣━ if not is_placed(element):
7485     ┃   ┃   ┃   ┃   ┃   ┣━ elif element.x <= screen_width and element.y <= screen_height:
7486     ┃   ┃   ┃   ┃   ┃   ┣━ if hasattr(element, "draw"):
7487     ┃   ┃   ┃   ┃   ┃   ┣━ element.draw()
7488     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ if self.color:
7489     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ print_at(self.x, self.y, "┏" + ("━" * (self.width - 2)) + "┓")
7490     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ goto(x, y)
7491     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ write('\x1B[%d;%df' % (y, x))
7492     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ print(value, end = '')
7493     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ sys.stdout.flush()
7494     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ sys.stdout.flush()
7495     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ write('\x1B[%d;%df' % (y, x))
7496     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ write('\x1B[%d;%df' % (y, x))
7497     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ goto(x, y)
7498     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ print(text, end = '')
7499     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ sys.stdout.flush()
7500     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ sys.stdout.flush()
7501     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ print_at(self.x, self.y, "┏" + ("━" * (self.width - 2)) + "┓")
7502     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ for i in range(self.height - 2):
7503     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ print_at(self.x, self.y + i + 1, "┃")
7504     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ goto(x, y)
7505     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ write('\x1B[%d;%df' % (y, x))
7506     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ print(value, end = '')
7507     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ sys.stdout.flush()
7508     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ sys.stdout.flush()
7509     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ write('\x1B[%d;%df' % (y, x))
7510     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ write('\x1B[%d;%df' % (y, x))
7511     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ goto(x, y)
7512     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ print(text, end = '')
7513     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ sys.stdout.flush()
7514     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ sys.stdout.flush()
7515     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ print_at(self.x, self.y + i + 1, "┃")
7516     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ print_at(self.x + self.width - 1, self.y + i + 1, "┃")
7517     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ goto(x, y)
7518     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ write('\x1B[%d;%df' % (y, x))
7519     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ print(value, end = '')
7520     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ sys.stdout.flush()
7521     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ sys.stdout.flush()
7522     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ write('\x1B[%d;%df' % (y, x))
7523     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ write('\x1B[%d;%df' % (y, x))
7524     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ goto(x, y)
7525     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ print(text, end = '')
7526     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ sys.stdout.flush()
7527     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ sys.stdout.flush()
7528     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ print_at(self.x + self.width - 1, self.y + i + 1, "┃")
7529     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ for i in range(self.height - 2):
7530     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ print_at(self.x, self.y + self.height - 1, "┗" + ("━" * (self.width - 2)) + "┛")
7531     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ goto(x, y)
7532     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ write('\x1B[%d;%df' % (y, x))
7533     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ print(value, end = '')
7534     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ sys.stdout.flush()
7535     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ sys.stdout.flush()
7536     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ write('\x1B[%d;%df' % (y, x))
7537     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ write('\x1B[%d;%df' % (y, x))
7538     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ goto(x, y)
7539     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ print(text, end = '')
7540     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ sys.stdout.flush()
7541     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ sys.stdout.flush()
7542     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ print_at(self.x, self.y + self.height - 1, "┗" + ("━" * (self.width - 2)) + "┛")
7543     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ if self.color:
7544     ┃   ┃   ┃   ┃   ┃   ┃   ┗━ if self.color:
7545     ┃   ┃   ┃   ┃   ┃   ┣━ element.draw()
7546     ┃   ┃   ┃   ┃   ┃   ┣━ if hasattr(element, "children"):
7547     ┃   ┃   ┃   ┃   ┃   ┣━ for child in element.children:
7548     ┃   ┃   ┃   ┃   ┃   ┣━ draw(child, level + 1)
7549     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ termsize = os.get_terminal_size()
7550     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ screen_width = termsize.columns
7551     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ screen_height = termsize.lines
7552     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ indent = "  " * level
7553     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ if not is_placed(element):
7554     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ return hasattr(element, "x") and hasattr(element, "y") \
7555     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ and hasattr(element, "width") and hasattr(element, "height")
7556     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ return hasattr(element, "x") and hasattr(element, "y") \
7557     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ and hasattr(element, "width") and hasattr(element, "height")
7558     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ return hasattr(element, "x") and hasattr(element, "y") \
7559     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ return hasattr(element, "x") and hasattr(element, "y") \
7560     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ if not is_placed(element):
7561     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ elif element.x <= screen_width and element.y <= screen_height:
7562     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ if hasattr(element, "draw"):
7563     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ element.draw()
7564     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ display = self.text[0:self.width].ljust(self.width, " ")
7565     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ print_at(self.x, self.y, display)
7566     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ goto(x, y)
7567     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ write('\x1B[%d;%df' % (y, x))
7568     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ print(value, end = '')
7569     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ sys.stdout.flush()
7570     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ sys.stdout.flush()
7571     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ write('\x1B[%d;%df' % (y, x))
7572     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ write('\x1B[%d;%df' % (y, x))
7573     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ goto(x, y)
7574     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ print(text, end = '')
7575     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ sys.stdout.flush()
7576     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ sys.stdout.flush()
7577     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ print_at(self.x, self.y, display)
7578     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ print_at(self.x, self.y, display)
7579     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ element.draw()
7580     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ if hasattr(element, "children"):
7581     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ draw(child, level + 1)
7582     ┃   ┃   ┃   ┃   ┃   ┃   ┗━ draw(child, level + 1)
7583     ┃   ┃   ┃   ┃   ┃   ┣━ for child in element.children:
7584     ┃   ┃   ┃   ┃   ┃   ┣━ draw(child, level + 1)
7585     ┃   ┃   ┃   ┃   ┃   ┗━ draw(child, level + 1)
7586     ┃   ┃   ┃   ┃   ┣━ for child in element.children:
7587     ┃   ┃   ┃   ┃   ┣━ draw(child, level + 1)
7588     ┃   ┃   ┃   ┃   ┗━ draw(child, level + 1)
7589     ┃   ┃   ┃   ┣━ for child in element.children:
7590     ┃   ┃   ┃   ┣━ draw(child, level + 1)
7591     ┃   ┃   ┃   ┗━ draw(child, level + 1)
7592     ┃   ┃   ┣━ for child in element.children:
7593     ┃   ┃   ┣━ draw(child, level + 1)
7594     ┃   ┃   ┃   ┣━ termsize = os.get_terminal_size()
7595     ┃   ┃   ┃   ┣━ screen_width = termsize.columns
7596     ┃   ┃   ┃   ┣━ screen_height = termsize.lines
7597     ┃   ┃   ┃   ┣━ indent = "  " * level
7598     ┃   ┃   ┃   ┣━ if not is_placed(element):
7599     ┃   ┃   ┃   ┃   ┣━ return hasattr(element, "x") and hasattr(element, "y") \
7600     ┃   ┃   ┃   ┃   ┣━ and hasattr(element, "width") and hasattr(element, "height")
7601     ┃   ┃   ┃   ┃   ┣━ return hasattr(element, "x") and hasattr(element, "y") \
7602     ┃   ┃   ┃   ┃   ┣━ and hasattr(element, "width") and hasattr(element, "height")
7603     ┃   ┃   ┃   ┃   ┣━ return hasattr(element, "x") and hasattr(element, "y") \
7604     ┃   ┃   ┃   ┃   ┗━ return hasattr(element, "x") and hasattr(element, "y") \
7605     ┃   ┃   ┃   ┣━ if not is_placed(element):
7606     ┃   ┃   ┃   ┣━ elif element.x <= screen_width and element.y <= screen_height:
7607     ┃   ┃   ┃   ┣━ if hasattr(element, "draw"):
7608     ┃   ┃   ┃   ┣━ element.draw()
7609     ┃   ┃   ┃   ┃   ┣━ if len(list(self.child_nodes)) == 0:
7610     ┃   ┃   ┃   ┃   ┃   ┣━ return filter(lambda c: c != self.label, self.children)
7611     ┃   ┃   ┃   ┃   ┃   ┗━ return filter(lambda c: c != self.label, self.children)
7612     ┃   ┃   ┃   ┃   ┣━ if len(list(self.child_nodes)) == 0:
7613     ┃   ┃   ┃   ┃   ┃   ┣━ return filter(lambda c: c != self.label, self.children)
7614     ┃   ┃   ┃   ┃   ┃   ┣━ return filter(lambda c: c != self.label, self.children)
7615     ┃   ┃   ┃   ┃   ┃   ┣━ return filter(lambda c: c != self.label, self.children)
7616     ┃   ┃   ┃   ┃   ┃   ┣━ return filter(lambda c: c != self.label, self.children)
7617     ┃   ┃   ┃   ┃   ┃   ┣━ return filter(lambda c: c != self.label, self.children)
7618     ┃   ┃   ┃   ┃   ┃   ┣━ return filter(lambda c: c != self.label, self.children)
7619     ┃   ┃   ┃   ┃   ┃   ┣━ return filter(lambda c: c != self.label, self.children)
7620     ┃   ┃   ┃   ┃   ┃   ┗━ return filter(lambda c: c != self.label, self.children)
7621     ┃   ┃   ┃   ┃   ┣━ if len(list(self.child_nodes)) == 0:
7622     ┃   ┃   ┃   ┃   ┣━ elif self.expanded:
7623     ┃   ┃   ┃   ┃   ┣━ print_at(self.x, self.y, "▶")
7624     ┃   ┃   ┃   ┃   ┃   ┣━ goto(x, y)
7625     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ write('\x1B[%d;%df' % (y, x))
7626     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ print(value, end = '')
7627     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ sys.stdout.flush()
7628     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ sys.stdout.flush()
7629     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ write('\x1B[%d;%df' % (y, x))
7630     ┃   ┃   ┃   ┃   ┃   ┃   ┗━ write('\x1B[%d;%df' % (y, x))
7631     ┃   ┃   ┃   ┃   ┃   ┣━ goto(x, y)
7632     ┃   ┃   ┃   ┃   ┃   ┣━ print(text, end = '')
7633     ┃   ┃   ┃   ┃   ┃   ┣━ sys.stdout.flush()
7634     ┃   ┃   ┃   ┃   ┃   ┗━ sys.stdout.flush()
7635     ┃   ┃   ┃   ┃   ┣━ print_at(self.x, self.y, "▶")
7636     ┃   ┃   ┃   ┃   ┣━ 
7637     ┃   ┃   ┃   ┃   ┗━ 
7638     ┃   ┃   ┃   ┣━ element.draw()
7639     ┃   ┃   ┃   ┣━ if hasattr(element, "children"):
7640     ┃   ┃   ┃   ┣━ for child in element.children:
7641     ┃   ┃   ┃   ┣━ draw(child, level + 1)
7642     ┃   ┃   ┃   ┃   ┣━ termsize = os.get_terminal_size()
7643     ┃   ┃   ┃   ┃   ┣━ screen_width = termsize.columns
7644     ┃   ┃   ┃   ┃   ┣━ screen_height = termsize.lines
7645     ┃   ┃   ┃   ┃   ┣━ indent = "  " * level
7646     ┃   ┃   ┃   ┃   ┣━ if not is_placed(element):
7647     ┃   ┃   ┃   ┃   ┃   ┣━ return hasattr(element, "x") and hasattr(element, "y") \
7648     ┃   ┃   ┃   ┃   ┃   ┣━ and hasattr(element, "width") and hasattr(element, "height")
7649     ┃   ┃   ┃   ┃   ┃   ┣━ return hasattr(element, "x") and hasattr(element, "y") \
7650     ┃   ┃   ┃   ┃   ┃   ┣━ and hasattr(element, "width") and hasattr(element, "height")
7651     ┃   ┃   ┃   ┃   ┃   ┣━ return hasattr(element, "x") and hasattr(element, "y") \
7652     ┃   ┃   ┃   ┃   ┃   ┗━ return hasattr(element, "x") and hasattr(element, "y") \
7653     ┃   ┃   ┃   ┃   ┣━ if not is_placed(element):
7654     ┃   ┃   ┃   ┃   ┣━ elif element.x <= screen_width and element.y <= screen_height:
7655     ┃   ┃   ┃   ┃   ┣━ if hasattr(element, "draw"):
7656     ┃   ┃   ┃   ┃   ┣━ element.draw()
7657     ┃   ┃   ┃   ┃   ┃   ┣━ display = self.text[0:self.width].ljust(self.width, " ")
7658     ┃   ┃   ┃   ┃   ┃   ┣━ print_at(self.x, self.y, display)
7659     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ goto(x, y)
7660     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ write('\x1B[%d;%df' % (y, x))
7661     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ print(value, end = '')
7662     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ sys.stdout.flush()
7663     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ sys.stdout.flush()
7664     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ write('\x1B[%d;%df' % (y, x))
7665     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ write('\x1B[%d;%df' % (y, x))
7666     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ goto(x, y)
7667     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ print(text, end = '')
7668     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ sys.stdout.flush()
7669     ┃   ┃   ┃   ┃   ┃   ┃   ┗━ sys.stdout.flush()
7670     ┃   ┃   ┃   ┃   ┃   ┣━ print_at(self.x, self.y, display)
7671     ┃   ┃   ┃   ┃   ┃   ┗━ print_at(self.x, self.y, display)
7672     ┃   ┃   ┃   ┃   ┣━ element.draw()
7673     ┃   ┃   ┃   ┃   ┣━ if hasattr(element, "children"):
7674     ┃   ┃   ┃   ┃   ┣━ draw(child, level + 1)
7675     ┃   ┃   ┃   ┃   ┗━ draw(child, level + 1)
7676     ┃   ┃   ┃   ┣━ for child in element.children:
7677     ┃   ┃   ┃   ┣━ draw(child, level + 1)
7678     ┃   ┃   ┃   ┃   ┣━ termsize = os.get_terminal_size()
7679     ┃   ┃   ┃   ┃   ┣━ screen_width = termsize.columns
7680     ┃   ┃   ┃   ┃   ┣━ screen_height = termsize.lines
7681     ┃   ┃   ┃   ┃   ┣━ indent = "  " * level
7682     ┃   ┃   ┃   ┃   ┣━ if not is_placed(element):
7683     ┃   ┃   ┃   ┃   ┃   ┣━ return hasattr(element, "x") and hasattr(element, "y") \
7684     ┃   ┃   ┃   ┃   ┃   ┗━ return hasattr(element, "x") and hasattr(element, "y") \
7685     ┃   ┃   ┃   ┃   ┣━ if not is_placed(element):
7686     ┃   ┃   ┃   ┃   ┣━ log(indent + "not placed")
7687     ┃   ┃   ┃   ┃   ┃   ┣━ logfile.write(text + "\n")
7688     ┃   ┃   ┃   ┃   ┃   ┣━ logfile.flush()
7689     ┃   ┃   ┃   ┃   ┃   ┗━ logfile.flush()
7690     ┃   ┃   ┃   ┃   ┣━ log(indent + "not placed")
7691     ┃   ┃   ┃   ┃   ┣━ pass
7692     ┃   ┃   ┃   ┃   ┗━ pass
7693     ┃   ┃   ┃   ┣━ draw(child, level + 1)
7694     ┃   ┃   ┃   ┣━ for child in element.children:
7695     ┃   ┃   ┃   ┣━ draw(child, level + 1)
7696     ┃   ┃   ┃   ┃   ┣━ termsize = os.get_terminal_size()
7697     ┃   ┃   ┃   ┃   ┣━ screen_width = termsize.columns
7698     ┃   ┃   ┃   ┃   ┣━ screen_height = termsize.lines
7699     ┃   ┃   ┃   ┃   ┣━ indent = "  " * level
7700     ┃   ┃   ┃   ┃   ┣━ if not is_placed(element):
7701     ┃   ┃   ┃   ┃   ┃   ┣━ return hasattr(element, "x") and hasattr(element, "y") \
7702     ┃   ┃   ┃   ┃   ┃   ┗━ return hasattr(element, "x") and hasattr(element, "y") \
7703     ┃   ┃   ┃   ┃   ┣━ if not is_placed(element):
7704     ┃   ┃   ┃   ┃   ┣━ log(indent + "not placed")
7705     ┃   ┃   ┃   ┃   ┃   ┣━ logfile.write(text + "\n")
7706     ┃   ┃   ┃   ┃   ┃   ┣━ logfile.flush()
7707     ┃   ┃   ┃   ┃   ┃   ┗━ logfile.flush()
7708     ┃   ┃   ┃   ┃   ┣━ log(indent + "not placed")
7709     ┃   ┃   ┃   ┃   ┣━ pass
7710     ┃   ┃   ┃   ┃   ┗━ pass
7711     ┃   ┃   ┃   ┣━ draw(child, level + 1)
7712     ┃   ┃   ┃   ┣━ for child in element.children:
7713     ┃   ┃   ┃   ┣━ draw(child, level + 1)
7714     ┃   ┃   ┃   ┃   ┣━ termsize = os.get_terminal_size()
7715     ┃   ┃   ┃   ┃   ┣━ screen_width = termsize.columns
7716     ┃   ┃   ┃   ┃   ┣━ screen_height = termsize.lines
7717     ┃   ┃   ┃   ┃   ┣━ indent = "  " * level
7718     ┃   ┃   ┃   ┃   ┣━ if not is_placed(element):
7719     ┃   ┃   ┃   ┃   ┃   ┣━ return hasattr(element, "x") and hasattr(element, "y") \
7720     ┃   ┃   ┃   ┃   ┃   ┗━ return hasattr(element, "x") and hasattr(element, "y") \
7721     ┃   ┃   ┃   ┃   ┣━ if not is_placed(element):
7722     ┃   ┃   ┃   ┃   ┣━ log(indent + "not placed")
7723     ┃   ┃   ┃   ┃   ┃   ┣━ logfile.write(text + "\n")
7724     ┃   ┃   ┃   ┃   ┃   ┣━ logfile.flush()
7725     ┃   ┃   ┃   ┃   ┃   ┗━ logfile.flush()
7726     ┃   ┃   ┃   ┃   ┣━ log(indent + "not placed")
7727     ┃   ┃   ┃   ┃   ┣━ pass
7728     ┃   ┃   ┃   ┃   ┗━ pass
7729     ┃   ┃   ┃   ┣━ draw(child, level + 1)
7730     ┃   ┃   ┃   ┣━ for child in element.children:
7731     ┃   ┃   ┃   ┣━ draw(child, level + 1)
7732     ┃   ┃   ┃   ┗━ draw(child, level + 1)
7733     ┃   ┃   ┣━ for child in element.children:
7734     ┃   ┃   ┣━ draw(child, level + 1)
7735     ┃   ┃   ┃   ┣━ termsize = os.get_terminal_size()
7736     ┃   ┃   ┃   ┣━ screen_width = termsize.columns
7737     ┃   ┃   ┃   ┣━ screen_height = termsize.lines
7738     ┃   ┃   ┃   ┣━ indent = "  " * level
7739     ┃   ┃   ┃   ┣━ if not is_placed(element):
7740     ┃   ┃   ┃   ┃   ┣━ return hasattr(element, "x") and hasattr(element, "y") \
7741     ┃   ┃   ┃   ┃   ┣━ and hasattr(element, "width") and hasattr(element, "height")
7742     ┃   ┃   ┃   ┃   ┣━ return hasattr(element, "x") and hasattr(element, "y") \
7743     ┃   ┃   ┃   ┃   ┣━ and hasattr(element, "width") and hasattr(element, "height")
7744     ┃   ┃   ┃   ┃   ┣━ return hasattr(element, "x") and hasattr(element, "y") \
7745     ┃   ┃   ┃   ┃   ┗━ return hasattr(element, "x") and hasattr(element, "y") \
7746     ┃   ┃   ┃   ┣━ if not is_placed(element):
7747     ┃   ┃   ┃   ┣━ elif element.x <= screen_width and element.y <= screen_height:
7748     ┃   ┃   ┃   ┣━ if hasattr(element, "draw"):
7749     ┃   ┃   ┃   ┣━ element.draw()
7750     ┃   ┃   ┃   ┃   ┣━ display = self.text[0:self.width].ljust(self.width, " ")
7751     ┃   ┃   ┃   ┃   ┣━ print_at(self.x, self.y, display)
7752     ┃   ┃   ┃   ┃   ┃   ┣━ goto(x, y)
7753     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ write('\x1B[%d;%df' % (y, x))
7754     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ print(value, end = '')
7755     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ sys.stdout.flush()
7756     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ sys.stdout.flush()
7757     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ write('\x1B[%d;%df' % (y, x))
7758     ┃   ┃   ┃   ┃   ┃   ┃   ┗━ write('\x1B[%d;%df' % (y, x))
7759     ┃   ┃   ┃   ┃   ┃   ┣━ goto(x, y)
7760     ┃   ┃   ┃   ┃   ┃   ┣━ print(text, end = '')
7761     ┃   ┃   ┃   ┃   ┃   ┣━ sys.stdout.flush()
7762     ┃   ┃   ┃   ┃   ┃   ┗━ sys.stdout.flush()
7763     ┃   ┃   ┃   ┃   ┣━ print_at(self.x, self.y, display)
7764     ┃   ┃   ┃   ┃   ┗━ print_at(self.x, self.y, display)
7765     ┃   ┃   ┃   ┣━ element.draw()
7766     ┃   ┃   ┃   ┣━ if hasattr(element, "children"):
7767     ┃   ┃   ┃   ┣━ draw(child, level + 1)
7768     ┃   ┃   ┃   ┗━ draw(child, level + 1)
7769     ┃   ┃   ┣━ for child in element.children:
7770     ┃   ┃   ┣━ draw(child, level + 1)
7771     ┃   ┃   ┗━ draw(child, level + 1)
7772     ┃   ┣━ draw(root_element)
7773     ┃   ┣━ inp = get_input()
7774     ┃   ┃   ┣━ fl_state = fcntl.fcntl(sys.stdin.fileno(), fcntl.F_GETFL)
7775     ┃   ┃   ┣━ data = sys.stdin.read(1)
7776     ┃   ┃   ┃   ┣━ return (self.buffer, 0)
7777     ┃   ┃   ┃   ┣━ return (self.buffer, 0)
7778     ┃   ┃   ┃   ┣━ data = self.buffer + input
7779     ┃   ┃   ┃   ┣━ (result, consumed) = self._buffer_decode(data, self.errors, final)
7780     ┃   ┃   ┃   ┣━ self.buffer = data[consumed:]
7781     ┃   ┃   ┃   ┣━ return result
7782     ┃   ┃   ┃   ┗━ return result
7783     ┃   ┃   ┣━ data = sys.stdin.read(1)
7784     ┃   ┃   ┣━ if data == '\x1b':
7785     ┃   ┃   ┣━ fcntl.fcntl(sys.stdin.fileno(), fcntl.F_SETFL, fl_state | os.O_NONBLOCK)
7786     ┃   ┃   ┣━ codes = ""
7787     ┃   ┃   ┣━ ch = sys.stdin.read(1)
7788     ┃   ┃   ┣━ if ch == '':
7789     ┃   ┃   ┣━ codes += ch
7790     ┃   ┃   ┣━ ch = sys.stdin.read(1)
7791     ┃   ┃   ┣━ if ch == '':
7792     ┃   ┃   ┣━ codes += ch
7793     ┃   ┃   ┣━ ch = sys.stdin.read(1)
7794     ┃   ┃   ┣━ if ch == '':
7795     ┃   ┃   ┣━ codes += ch
7796     ┃   ┃   ┣━ ch = sys.stdin.read(1)
7797     ┃   ┃   ┣━ if ch == '':
7798     ┃   ┃   ┣━ codes += ch
7799     ┃   ┃   ┣━ ch = sys.stdin.read(1)
7800     ┃   ┃   ┣━ if ch == '':
7801     ┃   ┃   ┣━ codes += ch
7802     ┃   ┃   ┣━ ch = sys.stdin.read(1)
7803     ┃   ┃   ┃   ┣━ return (self.buffer, 0)
7804     ┃   ┃   ┃   ┣━ return (self.buffer, 0)
7805     ┃   ┃   ┃   ┣━ data = self.buffer + input
7806     ┃   ┃   ┃   ┣━ (result, consumed) = self._buffer_decode(data, self.errors, final)
7807     ┃   ┃   ┃   ┣━ self.buffer = data[consumed:]
7808     ┃   ┃   ┃   ┣━ return result
7809     ┃   ┃   ┃   ┗━ return result
7810     ┃   ┃   ┣━ ch = sys.stdin.read(1)
7811     ┃   ┃   ┣━ if ch == '':
7812     ┃   ┃   ┣━ codes += ch
7813     ┃   ┃   ┣━ ch = sys.stdin.read(1)
7814     ┃   ┃   ┣━ if ch == '':
7815     ┃   ┃   ┣━ codes += ch
7816     ┃   ┃   ┣━ ch = sys.stdin.read(1)
7817     ┃   ┃   ┣━ if ch == '':
7818     ┃   ┃   ┣━ codes += ch
7819     ┃   ┃   ┣━ ch = sys.stdin.read(1)
7820     ┃   ┃   ┣━ if ch == '':
7821     ┃   ┃   ┣━ codes += ch
7822     ┃   ┃   ┣━ ch = sys.stdin.read(1)
7823     ┃   ┃   ┣━ if ch == '':
7824     ┃   ┃   ┣━ codes += ch
7825     ┃   ┃   ┣━ ch = sys.stdin.read(1)
7826     ┃   ┃   ┣━ if ch == '':
7827     ┃   ┃   ┣━ codes += ch
7828     ┃   ┃   ┣━ ch = sys.stdin.read(1)
7829     ┃   ┃   ┃   ┣━ return (self.buffer, 0)
7830     ┃   ┃   ┃   ┣━ return (self.buffer, 0)
7831     ┃   ┃   ┃   ┣━ data = self.buffer + input
7832     ┃   ┃   ┃   ┣━ (result, consumed) = self._buffer_decode(data, self.errors, final)
7833     ┃   ┃   ┃   ┣━ self.buffer = data[consumed:]
7834     ┃   ┃   ┃   ┣━ return result
7835     ┃   ┃   ┃   ┗━ return result
7836     ┃   ┃   ┣━ ch = sys.stdin.read(1)
7837     ┃   ┃   ┣━ if ch == '':
7838     ┃   ┃   ┣━ fcntl.fcntl(sys.stdin.fileno(), fcntl.F_SETFL, fl_state)
7839     ┃   ┃   ┣━ break
7840     ┃   ┃   ┣━ data += codes
7841     ┃   ┃   ┣━ return data
7842     ┃   ┃   ┗━ return data
7843     ┃   ┣━ inp = get_input()
7844     ┃   ┣━ if inp == "\r":
7845     ┃   ┣━ if inp == "q":
7846     ┃   ┣━ events = decode_input(inp)
7847     ┃   ┃   ┣━ events = []
7848     ┃   ┃   ┣━ codes = list(map(ord, an_input))
7849     ┃   ┃   ┣━ while len(codes) > 0:
7850     ┃   ┃   ┣━ if codes[0:3] == [27, 91, 77]:
7851     ┃   ┃   ┣━ if codes[3] == 32:
7852     ┃   ┃   ┣━ event = Event("mousedown", x = codes[4] - 32, y = codes[5] - 32)
7853     ┃   ┃   ┃   ┣━ self.type = etype
7854     ┃   ┃   ┃   ┣━ self.__dict__.update(kwargs)
7855     ┃   ┃   ┃   ┗━ self.__dict__.update(kwargs)
7856     ┃   ┃   ┣━ event = Event("mousedown", x = codes[4] - 32, y = codes[5] - 32)
7857     ┃   ┃   ┣━ events.append(event)
7858     ┃   ┃   ┣━ codes = codes[6:]
7859     ┃   ┃   ┣━ while len(codes) > 0:
7860     ┃   ┃   ┣━ if codes[0:3] == [27, 91, 77]:
7861     ┃   ┃   ┣━ if codes[3] == 32:
7862     ┃   ┃   ┣━ elif codes[3] == 35:
7863     ┃   ┃   ┣━ x = codes[4] - 32
7864     ┃   ┃   ┣━ y = codes[5] - 32
7865     ┃   ┃   ┣━ event = Event("mouseup", x = x, y = y)
7866     ┃   ┃   ┃   ┣━ self.type = etype
7867     ┃   ┃   ┃   ┣━ self.__dict__.update(kwargs)
7868     ┃   ┃   ┃   ┗━ self.__dict__.update(kwargs)
7869     ┃   ┃   ┣━ event = Event("mouseup", x = x, y = y)
7870     ┃   ┃   ┣━ events.append(event)
7871     ┃   ┃   ┣━ codes = codes[6:]
7872     ┃   ┃   ┣━ while len(codes) > 0:
7873     ┃   ┃   ┣━ return events
7874     ┃   ┃   ┗━ return events
7875     ┃   ┣━ events = decode_input(inp)
7876     ┃   ┣━ for event in events:
7877     ┃   ┣━ fire(root_element, event)
7878     ┃   ┃   ┣━ indent = "  " * level
7879     ┃   ┃   ┣━ if hasattr(event, "x") and hasattr(event, "y"):
7880     ┃   ┃   ┣━ if is_placed(element) and contains(element, event.x, event.y):
7881     ┃   ┃   ┃   ┣━ return hasattr(element, "x") and hasattr(element, "y") \
7882     ┃   ┃   ┃   ┣━ and hasattr(element, "width") and hasattr(element, "height")
7883     ┃   ┃   ┃   ┣━ return hasattr(element, "x") and hasattr(element, "y") \
7884     ┃   ┃   ┃   ┣━ and hasattr(element, "width") and hasattr(element, "height")
7885     ┃   ┃   ┃   ┣━ return hasattr(element, "x") and hasattr(element, "y") \
7886     ┃   ┃   ┃   ┗━ return hasattr(element, "x") and hasattr(element, "y") \
7887     ┃   ┃   ┣━ if is_placed(element) and contains(element, event.x, event.y):
7888     ┃   ┃   ┃   ┣━ return element.x <= x and element.y <= y and element.x + element.width > x \
7889     ┃   ┃   ┃   ┣━ and element.y + element.height > y
7890     ┃   ┃   ┃   ┣━ return element.x <= x and element.y <= y and element.x + element.width > x \
7891     ┃   ┃   ┃   ┗━ return element.x <= x and element.y <= y and element.x + element.width > x \
7892     ┃   ┃   ┣━ if is_placed(element) and contains(element, event.x, event.y):
7893     ┃   ┃   ┣━ if hasattr(element, event.type):
7894     ┃   ┃   ┣━ if hasattr(element, "children"):
7895     ┃   ┃   ┣━ for child in element.children:
7896     ┃   ┃   ┣━ fire(child, event, level + 1)
7897     ┃   ┃   ┃   ┣━ indent = "  " * level
7898     ┃   ┃   ┃   ┣━ if hasattr(event, "x") and hasattr(event, "y"):
7899     ┃   ┃   ┃   ┣━ if is_placed(element) and contains(element, event.x, event.y):
7900     ┃   ┃   ┃   ┃   ┣━ return hasattr(element, "x") and hasattr(element, "y") \
7901     ┃   ┃   ┃   ┃   ┣━ and hasattr(element, "width") and hasattr(element, "height")
7902     ┃   ┃   ┃   ┃   ┣━ return hasattr(element, "x") and hasattr(element, "y") \
7903     ┃   ┃   ┃   ┃   ┣━ and hasattr(element, "width") and hasattr(element, "height")
7904     ┃   ┃   ┃   ┃   ┣━ return hasattr(element, "x") and hasattr(element, "y") \
7905     ┃   ┃   ┃   ┃   ┗━ return hasattr(element, "x") and hasattr(element, "y") \
7906     ┃   ┃   ┃   ┣━ if is_placed(element) and contains(element, event.x, event.y):
7907     ┃   ┃   ┃   ┃   ┣━ return element.x <= x and element.y <= y and element.x + element.width > x \
7908     ┃   ┃   ┃   ┃   ┣━ and element.y + element.height > y
7909     ┃   ┃   ┃   ┃   ┣━ return element.x <= x and element.y <= y and element.x + element.width > x \
7910     ┃   ┃   ┃   ┃   ┗━ return element.x <= x and element.y <= y and element.x + element.width > x \
7911     ┃   ┃   ┃   ┣━ if is_placed(element) and contains(element, event.x, event.y):
7912     ┃   ┃   ┃   ┣━ return
7913     ┃   ┃   ┃   ┗━ return
7914     ┃   ┃   ┣━ fire(child, event, level + 1)
7915     ┃   ┃   ┣━ for child in element.children:
7916     ┃   ┃   ┣━ fire(child, event, level + 1)
7917     ┃   ┃   ┃   ┣━ indent = "  " * level
7918     ┃   ┃   ┃   ┣━ if hasattr(event, "x") and hasattr(event, "y"):
7919     ┃   ┃   ┃   ┣━ if is_placed(element) and contains(element, event.x, event.y):
7920     ┃   ┃   ┃   ┃   ┣━ return hasattr(element, "x") and hasattr(element, "y") \
7921     ┃   ┃   ┃   ┃   ┣━ and hasattr(element, "width") and hasattr(element, "height")
7922     ┃   ┃   ┃   ┃   ┣━ return hasattr(element, "x") and hasattr(element, "y") \
7923     ┃   ┃   ┃   ┃   ┣━ and hasattr(element, "width") and hasattr(element, "height")
7924     ┃   ┃   ┃   ┃   ┣━ return hasattr(element, "x") and hasattr(element, "y") \
7925     ┃   ┃   ┃   ┃   ┗━ return hasattr(element, "x") and hasattr(element, "y") \
7926     ┃   ┃   ┃   ┣━ if is_placed(element) and contains(element, event.x, event.y):
7927     ┃   ┃   ┃   ┃   ┣━ return element.x <= x and element.y <= y and element.x + element.width > x \
7928     ┃   ┃   ┃   ┃   ┣━ and element.y + element.height > y
7929     ┃   ┃   ┃   ┃   ┣━ return element.x <= x and element.y <= y and element.x + element.width > x \
7930     ┃   ┃   ┃   ┃   ┗━ return element.x <= x and element.y <= y and element.x + element.width > x \
7931     ┃   ┃   ┃   ┣━ if is_placed(element) and contains(element, event.x, event.y):
7932     ┃   ┃   ┃   ┣━ if hasattr(element, event.type):
7933     ┃   ┃   ┃   ┣━ if hasattr(element, "children"):
7934     ┃   ┃   ┃   ┣━ for child in element.children:
7935     ┃   ┃   ┃   ┣━ fire(child, event, level + 1)
7936     ┃   ┃   ┃   ┃   ┣━ indent = "  " * level
7937     ┃   ┃   ┃   ┃   ┣━ if hasattr(event, "x") and hasattr(event, "y"):
7938     ┃   ┃   ┃   ┃   ┣━ if is_placed(element) and contains(element, event.x, event.y):
7939     ┃   ┃   ┃   ┃   ┃   ┣━ return hasattr(element, "x") and hasattr(element, "y") \
7940     ┃   ┃   ┃   ┃   ┃   ┣━ and hasattr(element, "width") and hasattr(element, "height")
7941     ┃   ┃   ┃   ┃   ┃   ┣━ return hasattr(element, "x") and hasattr(element, "y") \
7942     ┃   ┃   ┃   ┃   ┃   ┣━ and hasattr(element, "width") and hasattr(element, "height")
7943     ┃   ┃   ┃   ┃   ┃   ┣━ return hasattr(element, "x") and hasattr(element, "y") \
7944     ┃   ┃   ┃   ┃   ┃   ┗━ return hasattr(element, "x") and hasattr(element, "y") \
7945     ┃   ┃   ┃   ┃   ┣━ if is_placed(element) and contains(element, event.x, event.y):
7946     ┃   ┃   ┃   ┃   ┃   ┣━ return element.x <= x and element.y <= y and element.x + element.width > x \
7947     ┃   ┃   ┃   ┃   ┃   ┗━ return element.x <= x and element.y <= y and element.x + element.width > x \
7948     ┃   ┃   ┃   ┃   ┣━ if is_placed(element) and contains(element, event.x, event.y):
7949     ┃   ┃   ┃   ┃   ┣━ return
7950     ┃   ┃   ┃   ┃   ┗━ return
7951     ┃   ┃   ┃   ┣━ fire(child, event, level + 1)
7952     ┃   ┃   ┃   ┣━ for child in element.children:
7953     ┃   ┃   ┃   ┣━ fire(child, event, level + 1)
7954     ┃   ┃   ┃   ┃   ┣━ indent = "  " * level
7955     ┃   ┃   ┃   ┃   ┣━ if hasattr(event, "x") and hasattr(event, "y"):
7956     ┃   ┃   ┃   ┃   ┣━ if is_placed(element) and contains(element, event.x, event.y):
7957     ┃   ┃   ┃   ┃   ┃   ┣━ return hasattr(element, "x") and hasattr(element, "y") \
7958     ┃   ┃   ┃   ┃   ┃   ┣━ and hasattr(element, "width") and hasattr(element, "height")
7959     ┃   ┃   ┃   ┃   ┃   ┣━ return hasattr(element, "x") and hasattr(element, "y") \
7960     ┃   ┃   ┃   ┃   ┃   ┣━ and hasattr(element, "width") and hasattr(element, "height")
7961     ┃   ┃   ┃   ┃   ┃   ┣━ return hasattr(element, "x") and hasattr(element, "y") \
7962     ┃   ┃   ┃   ┃   ┃   ┗━ return hasattr(element, "x") and hasattr(element, "y") \
7963     ┃   ┃   ┃   ┃   ┣━ if is_placed(element) and contains(element, event.x, event.y):
7964     ┃   ┃   ┃   ┃   ┃   ┣━ return element.x <= x and element.y <= y and element.x + element.width > x \
7965     ┃   ┃   ┃   ┃   ┃   ┣━ and element.y + element.height > y
7966     ┃   ┃   ┃   ┃   ┃   ┣━ return element.x <= x and element.y <= y and element.x + element.width > x \
7967     ┃   ┃   ┃   ┃   ┃   ┗━ return element.x <= x and element.y <= y and element.x + element.width > x \
7968     ┃   ┃   ┃   ┃   ┣━ if is_placed(element) and contains(element, event.x, event.y):
7969     ┃   ┃   ┃   ┃   ┣━ if hasattr(element, event.type):
7970     ┃   ┃   ┃   ┃   ┣━ if hasattr(element, "children"):
7971     ┃   ┃   ┃   ┃   ┣━ for child in element.children:
7972     ┃   ┃   ┃   ┃   ┣━ fire(child, event, level + 1)
7973     ┃   ┃   ┃   ┃   ┃   ┣━ indent = "  " * level
7974     ┃   ┃   ┃   ┃   ┃   ┣━ if hasattr(event, "x") and hasattr(event, "y"):
7975     ┃   ┃   ┃   ┃   ┃   ┣━ if is_placed(element) and contains(element, event.x, event.y):
7976     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ return hasattr(element, "x") and hasattr(element, "y") \
7977     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ and hasattr(element, "width") and hasattr(element, "height")
7978     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ return hasattr(element, "x") and hasattr(element, "y") \
7979     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ and hasattr(element, "width") and hasattr(element, "height")
7980     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ return hasattr(element, "x") and hasattr(element, "y") \
7981     ┃   ┃   ┃   ┃   ┃   ┃   ┗━ return hasattr(element, "x") and hasattr(element, "y") \
7982     ┃   ┃   ┃   ┃   ┃   ┣━ if is_placed(element) and contains(element, event.x, event.y):
7983     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ return element.x <= x and element.y <= y and element.x + element.width > x \
7984     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ and element.y + element.height > y
7985     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ return element.x <= x and element.y <= y and element.x + element.width > x \
7986     ┃   ┃   ┃   ┃   ┃   ┃   ┗━ return element.x <= x and element.y <= y and element.x + element.width > x \
7987     ┃   ┃   ┃   ┃   ┃   ┣━ if is_placed(element) and contains(element, event.x, event.y):
7988     ┃   ┃   ┃   ┃   ┃   ┣━ if hasattr(element, event.type):
7989     ┃   ┃   ┃   ┃   ┃   ┣━ if hasattr(element, "children"):
7990     ┃   ┃   ┃   ┃   ┃   ┣━ for child in element.children:
7991     ┃   ┃   ┃   ┃   ┃   ┣━ fire(child, event, level + 1)
7992     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ indent = "  " * level
7993     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ if hasattr(event, "x") and hasattr(event, "y"):
7994     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ if is_placed(element) and contains(element, event.x, event.y):
7995     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ return hasattr(element, "x") and hasattr(element, "y") \
7996     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ and hasattr(element, "width") and hasattr(element, "height")
7997     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ return hasattr(element, "x") and hasattr(element, "y") \
7998     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ and hasattr(element, "width") and hasattr(element, "height")
7999     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ return hasattr(element, "x") and hasattr(element, "y") \
8000     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ return hasattr(element, "x") and hasattr(element, "y") \
8001     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ if is_placed(element) and contains(element, event.x, event.y):
8002     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ return element.x <= x and element.y <= y and element.x + element.width > x \
8003     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ and element.y + element.height > y
8004     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ return element.x <= x and element.y <= y and element.x + element.width > x \
8005     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ return element.x <= x and element.y <= y and element.x + element.width > x \
8006     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ if is_placed(element) and contains(element, event.x, event.y):
8007     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ if hasattr(element, event.type):
8008     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ if hasattr(element, "children"):
8009     ┃   ┃   ┃   ┃   ┃   ┃   ┗━ if hasattr(element, "children"):
8010     ┃   ┃   ┃   ┃   ┃   ┣━ fire(child, event, level + 1)
8011     ┃   ┃   ┃   ┃   ┃   ┣━ for child in element.children:
8012     ┃   ┃   ┃   ┃   ┃   ┗━ for child in element.children:
8013     ┃   ┃   ┃   ┃   ┣━ fire(child, event, level + 1)
8014     ┃   ┃   ┃   ┃   ┣━ for child in element.children:
8015     ┃   ┃   ┃   ┃   ┗━ for child in element.children:
8016     ┃   ┃   ┃   ┣━ fire(child, event, level + 1)
8017     ┃   ┃   ┃   ┣━ for child in element.children:
8018     ┃   ┃   ┃   ┗━ for child in element.children:
8019     ┃   ┃   ┣━ fire(child, event, level + 1)
8020     ┃   ┃   ┣━ for child in element.children:
8021     ┃   ┃   ┣━ fire(child, event, level + 1)
8022     ┃   ┃   ┃   ┣━ indent = "  " * level
8023     ┃   ┃   ┃   ┣━ if hasattr(event, "x") and hasattr(event, "y"):
8024     ┃   ┃   ┃   ┣━ if is_placed(element) and contains(element, event.x, event.y):
8025     ┃   ┃   ┃   ┃   ┣━ return hasattr(element, "x") and hasattr(element, "y") \
8026     ┃   ┃   ┃   ┃   ┣━ and hasattr(element, "width") and hasattr(element, "height")
8027     ┃   ┃   ┃   ┃   ┣━ return hasattr(element, "x") and hasattr(element, "y") \
8028     ┃   ┃   ┃   ┃   ┣━ and hasattr(element, "width") and hasattr(element, "height")
8029     ┃   ┃   ┃   ┃   ┣━ return hasattr(element, "x") and hasattr(element, "y") \
8030     ┃   ┃   ┃   ┃   ┗━ return hasattr(element, "x") and hasattr(element, "y") \
8031     ┃   ┃   ┃   ┣━ if is_placed(element) and contains(element, event.x, event.y):
8032     ┃   ┃   ┃   ┃   ┣━ return element.x <= x and element.y <= y and element.x + element.width > x \
8033     ┃   ┃   ┃   ┃   ┗━ return element.x <= x and element.y <= y and element.x + element.width > x \
8034     ┃   ┃   ┃   ┣━ if is_placed(element) and contains(element, event.x, event.y):
8035     ┃   ┃   ┃   ┣━ return
8036     ┃   ┃   ┃   ┗━ return
8037     ┃   ┃   ┣━ fire(child, event, level + 1)
8038     ┃   ┃   ┣━ for child in element.children:
8039     ┃   ┃   ┣━ fire(child, event, level + 1)
8040     ┃   ┃   ┃   ┣━ indent = "  " * level
8041     ┃   ┃   ┃   ┣━ if hasattr(event, "x") and hasattr(event, "y"):
8042     ┃   ┃   ┃   ┣━ if is_placed(element) and contains(element, event.x, event.y):
8043     ┃   ┃   ┃   ┃   ┣━ return hasattr(element, "x") and hasattr(element, "y") \
8044     ┃   ┃   ┃   ┃   ┣━ and hasattr(element, "width") and hasattr(element, "height")
8045     ┃   ┃   ┃   ┃   ┣━ return hasattr(element, "x") and hasattr(element, "y") \
8046     ┃   ┃   ┃   ┃   ┣━ and hasattr(element, "width") and hasattr(element, "height")
8047     ┃   ┃   ┃   ┃   ┣━ return hasattr(element, "x") and hasattr(element, "y") \
8048     ┃   ┃   ┃   ┃   ┗━ return hasattr(element, "x") and hasattr(element, "y") \
8049     ┃   ┃   ┃   ┣━ if is_placed(element) and contains(element, event.x, event.y):
8050     ┃   ┃   ┃   ┃   ┣━ return element.x <= x and element.y <= y and element.x + element.width > x \
8051     ┃   ┃   ┃   ┃   ┗━ return element.x <= x and element.y <= y and element.x + element.width > x \
8052     ┃   ┃   ┃   ┣━ if is_placed(element) and contains(element, event.x, event.y):
8053     ┃   ┃   ┃   ┣━ return
8054     ┃   ┃   ┃   ┗━ return
8055     ┃   ┃   ┣━ fire(child, event, level + 1)
8056     ┃   ┃   ┣━ for child in element.children:
8057     ┃   ┃   ┗━ for child in element.children:
8058     ┃   ┣━ fire(root_element, event)
8059     ┃   ┣━ for event in events:
8060     ┃   ┣━ fire(root_element, event)
8061     ┃   ┃   ┣━ indent = "  " * level
8062     ┃   ┃   ┣━ if hasattr(event, "x") and hasattr(event, "y"):
8063     ┃   ┃   ┣━ if is_placed(element) and contains(element, event.x, event.y):
8064     ┃   ┃   ┃   ┣━ return hasattr(element, "x") and hasattr(element, "y") \
8065     ┃   ┃   ┃   ┣━ and hasattr(element, "width") and hasattr(element, "height")
8066     ┃   ┃   ┃   ┣━ return hasattr(element, "x") and hasattr(element, "y") \
8067     ┃   ┃   ┃   ┣━ and hasattr(element, "width") and hasattr(element, "height")
8068     ┃   ┃   ┃   ┣━ return hasattr(element, "x") and hasattr(element, "y") \
8069     ┃   ┃   ┃   ┗━ return hasattr(element, "x") and hasattr(element, "y") \
8070     ┃   ┃   ┣━ if is_placed(element) and contains(element, event.x, event.y):
8071     ┃   ┃   ┃   ┣━ return element.x <= x and element.y <= y and element.x + element.width > x \
8072     ┃   ┃   ┃   ┣━ and element.y + element.height > y
8073     ┃   ┃   ┃   ┣━ return element.x <= x and element.y <= y and element.x + element.width > x \
8074     ┃   ┃   ┃   ┗━ return element.x <= x and element.y <= y and element.x + element.width > x \
8075     ┃   ┃   ┣━ if is_placed(element) and contains(element, event.x, event.y):
8076     ┃   ┃   ┣━ if hasattr(element, event.type):
8077     ┃   ┃   ┣━ if hasattr(element, "children"):
8078     ┃   ┃   ┣━ for child in element.children:
8079     ┃   ┃   ┣━ fire(child, event, level + 1)
8080     ┃   ┃   ┃   ┣━ indent = "  " * level
8081     ┃   ┃   ┃   ┣━ if hasattr(event, "x") and hasattr(event, "y"):
8082     ┃   ┃   ┃   ┣━ if is_placed(element) and contains(element, event.x, event.y):
8083     ┃   ┃   ┃   ┃   ┣━ return hasattr(element, "x") and hasattr(element, "y") \
8084     ┃   ┃   ┃   ┃   ┣━ and hasattr(element, "width") and hasattr(element, "height")
8085     ┃   ┃   ┃   ┃   ┣━ return hasattr(element, "x") and hasattr(element, "y") \
8086     ┃   ┃   ┃   ┃   ┣━ and hasattr(element, "width") and hasattr(element, "height")
8087     ┃   ┃   ┃   ┃   ┣━ return hasattr(element, "x") and hasattr(element, "y") \
8088     ┃   ┃   ┃   ┃   ┗━ return hasattr(element, "x") and hasattr(element, "y") \
8089     ┃   ┃   ┃   ┣━ if is_placed(element) and contains(element, event.x, event.y):
8090     ┃   ┃   ┃   ┃   ┣━ return element.x <= x and element.y <= y and element.x + element.width > x \
8091     ┃   ┃   ┃   ┃   ┣━ and element.y + element.height > y
8092     ┃   ┃   ┃   ┃   ┣━ return element.x <= x and element.y <= y and element.x + element.width > x \
8093     ┃   ┃   ┃   ┃   ┗━ return element.x <= x and element.y <= y and element.x + element.width > x \
8094     ┃   ┃   ┃   ┣━ if is_placed(element) and contains(element, event.x, event.y):
8095     ┃   ┃   ┃   ┣━ return
8096     ┃   ┃   ┃   ┗━ return
8097     ┃   ┃   ┣━ fire(child, event, level + 1)
8098     ┃   ┃   ┣━ for child in element.children:
8099     ┃   ┃   ┣━ fire(child, event, level + 1)
8100     ┃   ┃   ┃   ┣━ indent = "  " * level
8101     ┃   ┃   ┃   ┣━ if hasattr(event, "x") and hasattr(event, "y"):
8102     ┃   ┃   ┃   ┣━ if is_placed(element) and contains(element, event.x, event.y):
8103     ┃   ┃   ┃   ┃   ┣━ return hasattr(element, "x") and hasattr(element, "y") \
8104     ┃   ┃   ┃   ┃   ┣━ and hasattr(element, "width") and hasattr(element, "height")
8105     ┃   ┃   ┃   ┃   ┣━ return hasattr(element, "x") and hasattr(element, "y") \
8106     ┃   ┃   ┃   ┃   ┣━ and hasattr(element, "width") and hasattr(element, "height")
8107     ┃   ┃   ┃   ┃   ┣━ return hasattr(element, "x") and hasattr(element, "y") \
8108     ┃   ┃   ┃   ┃   ┗━ return hasattr(element, "x") and hasattr(element, "y") \
8109     ┃   ┃   ┃   ┣━ if is_placed(element) and contains(element, event.x, event.y):
8110     ┃   ┃   ┃   ┃   ┣━ return element.x <= x and element.y <= y and element.x + element.width > x \
8111     ┃   ┃   ┃   ┃   ┣━ and element.y + element.height > y
8112     ┃   ┃   ┃   ┃   ┣━ return element.x <= x and element.y <= y and element.x + element.width > x \
8113     ┃   ┃   ┃   ┃   ┗━ return element.x <= x and element.y <= y and element.x + element.width > x \
8114     ┃   ┃   ┃   ┣━ if is_placed(element) and contains(element, event.x, event.y):
8115     ┃   ┃   ┃   ┣━ if hasattr(element, event.type):
8116     ┃   ┃   ┃   ┣━ if hasattr(element, "children"):
8117     ┃   ┃   ┃   ┣━ for child in element.children:
8118     ┃   ┃   ┃   ┣━ fire(child, event, level + 1)
8119     ┃   ┃   ┃   ┃   ┣━ indent = "  " * level
8120     ┃   ┃   ┃   ┃   ┣━ if hasattr(event, "x") and hasattr(event, "y"):
8121     ┃   ┃   ┃   ┃   ┣━ if is_placed(element) and contains(element, event.x, event.y):
8122     ┃   ┃   ┃   ┃   ┃   ┣━ return hasattr(element, "x") and hasattr(element, "y") \
8123     ┃   ┃   ┃   ┃   ┃   ┣━ and hasattr(element, "width") and hasattr(element, "height")
8124     ┃   ┃   ┃   ┃   ┃   ┣━ return hasattr(element, "x") and hasattr(element, "y") \
8125     ┃   ┃   ┃   ┃   ┃   ┣━ and hasattr(element, "width") and hasattr(element, "height")
8126     ┃   ┃   ┃   ┃   ┃   ┣━ return hasattr(element, "x") and hasattr(element, "y") \
8127     ┃   ┃   ┃   ┃   ┃   ┗━ return hasattr(element, "x") and hasattr(element, "y") \
8128     ┃   ┃   ┃   ┃   ┣━ if is_placed(element) and contains(element, event.x, event.y):
8129     ┃   ┃   ┃   ┃   ┃   ┣━ return element.x <= x and element.y <= y and element.x + element.width > x \
8130     ┃   ┃   ┃   ┃   ┃   ┗━ return element.x <= x and element.y <= y and element.x + element.width > x \
8131     ┃   ┃   ┃   ┃   ┣━ if is_placed(element) and contains(element, event.x, event.y):
8132     ┃   ┃   ┃   ┃   ┣━ return
8133     ┃   ┃   ┃   ┃   ┗━ return
8134     ┃   ┃   ┃   ┣━ fire(child, event, level + 1)
8135     ┃   ┃   ┃   ┣━ for child in element.children:
8136     ┃   ┃   ┃   ┣━ fire(child, event, level + 1)
8137     ┃   ┃   ┃   ┃   ┣━ indent = "  " * level
8138     ┃   ┃   ┃   ┃   ┣━ if hasattr(event, "x") and hasattr(event, "y"):
8139     ┃   ┃   ┃   ┃   ┣━ if is_placed(element) and contains(element, event.x, event.y):
8140     ┃   ┃   ┃   ┃   ┃   ┣━ return hasattr(element, "x") and hasattr(element, "y") \
8141     ┃   ┃   ┃   ┃   ┃   ┣━ and hasattr(element, "width") and hasattr(element, "height")
8142     ┃   ┃   ┃   ┃   ┃   ┣━ return hasattr(element, "x") and hasattr(element, "y") \
8143     ┃   ┃   ┃   ┃   ┃   ┣━ and hasattr(element, "width") and hasattr(element, "height")
8144     ┃   ┃   ┃   ┃   ┃   ┣━ return hasattr(element, "x") and hasattr(element, "y") \
8145     ┃   ┃   ┃   ┃   ┃   ┗━ return hasattr(element, "x") and hasattr(element, "y") \
8146     ┃   ┃   ┃   ┃   ┣━ if is_placed(element) and contains(element, event.x, event.y):
8147     ┃   ┃   ┃   ┃   ┃   ┣━ return element.x <= x and element.y <= y and element.x + element.width > x \
8148     ┃   ┃   ┃   ┃   ┃   ┣━ and element.y + element.height > y
8149     ┃   ┃   ┃   ┃   ┃   ┣━ return element.x <= x and element.y <= y and element.x + element.width > x \
8150     ┃   ┃   ┃   ┃   ┃   ┗━ return element.x <= x and element.y <= y and element.x + element.width > x \
8151     ┃   ┃   ┃   ┃   ┣━ if is_placed(element) and contains(element, event.x, event.y):
8152     ┃   ┃   ┃   ┃   ┣━ if hasattr(element, event.type):
8153     ┃   ┃   ┃   ┃   ┣━ log(indent + "calling handler fn")
8154     ┃   ┃   ┃   ┃   ┃   ┣━ logfile.write(text + "\n")
8155     ┃   ┃   ┃   ┃   ┃   ┣━ logfile.flush()
8156     ┃   ┃   ┃   ┃   ┃   ┗━ logfile.flush()
8157     ┃   ┃   ┃   ┃   ┣━ log(indent + "calling handler fn")
8158     ┃   ┃   ┃   ┃   ┣━ handler_fn = getattr(element, event.type)
8159     ┃   ┃   ┃   ┃   ┣━ handler_fn(event)
8160     ┃   ┃   ┃   ┃   ┃   ┣━ remove_child(d, f)
8161     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ assert child in parent.children
8162     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ parent.children.remove(child)
8163     ┃   ┃   ┃   ┃   ┃   ┃   ┗━ parent.children.remove(child)
8164     ┃   ┃   ┃   ┃   ┃   ┣━ remove_child(d, f)
8165     ┃   ┃   ┃   ┃   ┃   ┗━ remove_child(d, f)
8166     ┃   ┃   ┃   ┃   ┣━ handler_fn(event)
8167     ┃   ┃   ┃   ┃   ┣━ if hasattr(element, "children"):
8168     ┃   ┃   ┃   ┃   ┣━ for child in element.children:
8169     ┃   ┃   ┃   ┃   ┣━ fire(child, event, level + 1)
8170     ┃   ┃   ┃   ┃   ┃   ┣━ indent = "  " * level
8171     ┃   ┃   ┃   ┃   ┃   ┣━ if hasattr(event, "x") and hasattr(event, "y"):
8172     ┃   ┃   ┃   ┃   ┃   ┣━ if is_placed(element) and contains(element, event.x, event.y):
8173     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ return hasattr(element, "x") and hasattr(element, "y") \
8174     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ and hasattr(element, "width") and hasattr(element, "height")
8175     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ return hasattr(element, "x") and hasattr(element, "y") \
8176     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ and hasattr(element, "width") and hasattr(element, "height")
8177     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ return hasattr(element, "x") and hasattr(element, "y") \
8178     ┃   ┃   ┃   ┃   ┃   ┃   ┗━ return hasattr(element, "x") and hasattr(element, "y") \
8179     ┃   ┃   ┃   ┃   ┃   ┣━ if is_placed(element) and contains(element, event.x, event.y):
8180     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ return element.x <= x and element.y <= y and element.x + element.width > x \
8181     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ and element.y + element.height > y
8182     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ return element.x <= x and element.y <= y and element.x + element.width > x \
8183     ┃   ┃   ┃   ┃   ┃   ┃   ┗━ return element.x <= x and element.y <= y and element.x + element.width > x \
8184     ┃   ┃   ┃   ┃   ┃   ┣━ if is_placed(element) and contains(element, event.x, event.y):
8185     ┃   ┃   ┃   ┃   ┃   ┣━ if hasattr(element, event.type):
8186     ┃   ┃   ┃   ┃   ┃   ┣━ if hasattr(element, "children"):
8187     ┃   ┃   ┃   ┃   ┃   ┣━ for child in element.children:
8188     ┃   ┃   ┃   ┃   ┃   ┣━ fire(child, event, level + 1)
8189     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ indent = "  " * level
8190     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ if hasattr(event, "x") and hasattr(event, "y"):
8191     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ if is_placed(element) and contains(element, event.x, event.y):
8192     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ return hasattr(element, "x") and hasattr(element, "y") \
8193     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ and hasattr(element, "width") and hasattr(element, "height")
8194     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ return hasattr(element, "x") and hasattr(element, "y") \
8195     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ and hasattr(element, "width") and hasattr(element, "height")
8196     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ return hasattr(element, "x") and hasattr(element, "y") \
8197     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ return hasattr(element, "x") and hasattr(element, "y") \
8198     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ if is_placed(element) and contains(element, event.x, event.y):
8199     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ return element.x <= x and element.y <= y and element.x + element.width > x \
8200     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ and element.y + element.height > y
8201     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ return element.x <= x and element.y <= y and element.x + element.width > x \
8202     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ return element.x <= x and element.y <= y and element.x + element.width > x \
8203     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ if is_placed(element) and contains(element, event.x, event.y):
8204     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ if hasattr(element, event.type):
8205     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ if hasattr(element, "children"):
8206     ┃   ┃   ┃   ┃   ┃   ┃   ┗━ if hasattr(element, "children"):
8207     ┃   ┃   ┃   ┃   ┃   ┣━ fire(child, event, level + 1)
8208     ┃   ┃   ┃   ┃   ┃   ┣━ for child in element.children:
8209     ┃   ┃   ┃   ┃   ┃   ┗━ for child in element.children:
8210     ┃   ┃   ┃   ┃   ┣━ fire(child, event, level + 1)
8211     ┃   ┃   ┃   ┃   ┣━ for child in element.children:
8212     ┃   ┃   ┃   ┃   ┗━ for child in element.children:
8213     ┃   ┃   ┃   ┣━ fire(child, event, level + 1)
8214     ┃   ┃   ┃   ┣━ for child in element.children:
8215     ┃   ┃   ┃   ┗━ for child in element.children:
8216     ┃   ┃   ┣━ fire(child, event, level + 1)
8217     ┃   ┃   ┣━ for child in element.children:
8218     ┃   ┃   ┣━ fire(child, event, level + 1)
8219     ┃   ┃   ┃   ┣━ indent = "  " * level
8220     ┃   ┃   ┃   ┣━ if hasattr(event, "x") and hasattr(event, "y"):
8221     ┃   ┃   ┃   ┣━ if is_placed(element) and contains(element, event.x, event.y):
8222     ┃   ┃   ┃   ┃   ┣━ return hasattr(element, "x") and hasattr(element, "y") \
8223     ┃   ┃   ┃   ┃   ┣━ and hasattr(element, "width") and hasattr(element, "height")
8224     ┃   ┃   ┃   ┃   ┣━ return hasattr(element, "x") and hasattr(element, "y") \
8225     ┃   ┃   ┃   ┃   ┣━ and hasattr(element, "width") and hasattr(element, "height")
8226     ┃   ┃   ┃   ┃   ┣━ return hasattr(element, "x") and hasattr(element, "y") \
8227     ┃   ┃   ┃   ┃   ┗━ return hasattr(element, "x") and hasattr(element, "y") \
8228     ┃   ┃   ┃   ┣━ if is_placed(element) and contains(element, event.x, event.y):
8229     ┃   ┃   ┃   ┃   ┣━ return element.x <= x and element.y <= y and element.x + element.width > x \
8230     ┃   ┃   ┃   ┃   ┗━ return element.x <= x and element.y <= y and element.x + element.width > x \
8231     ┃   ┃   ┃   ┣━ if is_placed(element) and contains(element, event.x, event.y):
8232     ┃   ┃   ┃   ┣━ return
8233     ┃   ┃   ┃   ┗━ return
8234     ┃   ┃   ┣━ fire(child, event, level + 1)
8235     ┃   ┃   ┣━ for child in element.children:
8236     ┃   ┃   ┣━ fire(child, event, level + 1)
8237     ┃   ┃   ┃   ┣━ indent = "  " * level
8238     ┃   ┃   ┃   ┣━ if hasattr(event, "x") and hasattr(event, "y"):
8239     ┃   ┃   ┃   ┣━ if is_placed(element) and contains(element, event.x, event.y):
8240     ┃   ┃   ┃   ┃   ┣━ return hasattr(element, "x") and hasattr(element, "y") \
8241     ┃   ┃   ┃   ┃   ┣━ and hasattr(element, "width") and hasattr(element, "height")
8242     ┃   ┃   ┃   ┃   ┣━ return hasattr(element, "x") and hasattr(element, "y") \
8243     ┃   ┃   ┃   ┃   ┣━ and hasattr(element, "width") and hasattr(element, "height")
8244     ┃   ┃   ┃   ┃   ┣━ return hasattr(element, "x") and hasattr(element, "y") \
8245     ┃   ┃   ┃   ┃   ┗━ return hasattr(element, "x") and hasattr(element, "y") \
8246     ┃   ┃   ┃   ┣━ if is_placed(element) and contains(element, event.x, event.y):
8247     ┃   ┃   ┃   ┃   ┣━ return element.x <= x and element.y <= y and element.x + element.width > x \
8248     ┃   ┃   ┃   ┃   ┗━ return element.x <= x and element.y <= y and element.x + element.width > x \
8249     ┃   ┃   ┃   ┣━ if is_placed(element) and contains(element, event.x, event.y):
8250     ┃   ┃   ┃   ┣━ return
8251     ┃   ┃   ┃   ┗━ return
8252     ┃   ┃   ┣━ fire(child, event, level + 1)
8253     ┃   ┃   ┣━ for child in element.children:
8254     ┃   ┃   ┗━ for child in element.children:
8255     ┃   ┣━ fire(root_element, event)
8256     ┃   ┣━ for event in events:
8257     ┃   ┣━ if handler:
8258     ┃   ┣━ root_element.place(1, 1, screen_width, screen_height, get_stretch(root_element), 0)
8259     ┃   ┃   ┣━ return getattr(element, "stretch", None)
8260     ┃   ┃   ┗━ return getattr(element, "stretch", None)
8261     ┃   ┣━ root_element.place(1, 1, screen_width, screen_height, get_stretch(root_element), 0)
8262     ┃   ┃   ┣━ indent = level * "  "
8263     ┃   ┃   ┣━ self.x = x
8264     ┃   ┃   ┣━ self.y = y
8265     ┃   ┃   ┣━ non_stretched = filter(lambda c: not has_stretch_y(c), self.children)
8266     ┃   ┃   ┣━ stretched = filter(has_stretch_y, self.children)
8267     ┃   ┃   ┣━ num_stretched = len(list(stretched))
8268     ┃   ┃   ┃   ┣━ return get_stretch(element) in ["y", "both"]
8269     ┃   ┃   ┃   ┃   ┣━ return getattr(element, "stretch", None)
8270     ┃   ┃   ┃   ┃   ┗━ return getattr(element, "stretch", None)
8271     ┃   ┃   ┃   ┣━ return get_stretch(element) in ["y", "both"]
8272     ┃   ┃   ┃   ┣━ return get_stretch(element) in ["y", "both"]
8273     ┃   ┃   ┃   ┣━ return get_stretch(element) in ["y", "both"]
8274     ┃   ┃   ┃   ┃   ┣━ return getattr(element, "stretch", None)
8275     ┃   ┃   ┃   ┃   ┗━ return getattr(element, "stretch", None)
8276     ┃   ┃   ┃   ┣━ return get_stretch(element) in ["y", "both"]
8277     ┃   ┃   ┃   ┣━ return get_stretch(element) in ["y", "both"]
8278     ┃   ┃   ┃   ┣━ return get_stretch(element) in ["y", "both"]
8279     ┃   ┃   ┃   ┃   ┣━ return getattr(element, "stretch", None)
8280     ┃   ┃   ┃   ┃   ┗━ return getattr(element, "stretch", None)
8281     ┃   ┃   ┃   ┣━ return get_stretch(element) in ["y", "both"]
8282     ┃   ┃   ┃   ┣━ return get_stretch(element) in ["y", "both"]
8283     ┃   ┃   ┃   ┣━ return get_stretch(element) in ["y", "both"]
8284     ┃   ┃   ┃   ┃   ┣━ return getattr(element, "stretch", None)
8285     ┃   ┃   ┃   ┃   ┗━ return getattr(element, "stretch", None)
8286     ┃   ┃   ┃   ┣━ return get_stretch(element) in ["y", "both"]
8287     ┃   ┃   ┃   ┗━ return get_stretch(element) in ["y", "both"]
8288     ┃   ┃   ┣━ num_stretched = len(list(stretched))
8289     ┃   ┃   ┣━ non_stretched_height = 0
8290     ┃   ┃   ┣━ for child in non_stretched:
8291     ┃   ┃   ┃   ┣━ non_stretched = filter(lambda c: not has_stretch_y(c), self.children)
8292     ┃   ┃   ┃   ┃   ┣━ return get_stretch(element) in ["y", "both"]
8293     ┃   ┃   ┃   ┃   ┃   ┣━ return getattr(element, "stretch", None)
8294     ┃   ┃   ┃   ┃   ┃   ┗━ return getattr(element, "stretch", None)
8295     ┃   ┃   ┃   ┃   ┣━ return get_stretch(element) in ["y", "both"]
8296     ┃   ┃   ┃   ┃   ┗━ return get_stretch(element) in ["y", "both"]
8297     ┃   ┃   ┃   ┣━ non_stretched = filter(lambda c: not has_stretch_y(c), self.children)
8298     ┃   ┃   ┃   ┗━ non_stretched = filter(lambda c: not has_stretch_y(c), self.children)
8299     ┃   ┃   ┣━ for child in non_stretched:
8300     ┃   ┃   ┣━ child.place(self.x, self.y, max_width, max_height, None, level + 1)
8301     ┃   ┃   ┃   ┣━ indent = level * "  "
8302     ┃   ┃   ┃   ┣━ self.x = x
8303     ┃   ┃   ┃   ┣━ self.y = y
8304     ┃   ┃   ┃   ┣━ if stretch in ["x", "both"]:
8305     ┃   ┃   ┃   ┣━ self.width = min(max_width, len(self.text))
8306     ┃   ┃   ┃   ┣━ if stretch in ["y", "both"]:
8307     ┃   ┃   ┃   ┣━ self.height = 1
8308     ┃   ┃   ┃   ┗━ self.height = 1
8309     ┃   ┃   ┣━ child.place(self.x, self.y, max_width, max_height, None, level + 1)
8310     ┃   ┃   ┣━ non_stretched_height += child.height
8311     ┃   ┃   ┣━ for child in non_stretched:
8312     ┃   ┃   ┃   ┣━ non_stretched = filter(lambda c: not has_stretch_y(c), self.children)
8313     ┃   ┃   ┃   ┃   ┣━ return get_stretch(element) in ["y", "both"]
8314     ┃   ┃   ┃   ┃   ┃   ┣━ return getattr(element, "stretch", None)
8315     ┃   ┃   ┃   ┃   ┃   ┗━ return getattr(element, "stretch", None)
8316     ┃   ┃   ┃   ┃   ┣━ return get_stretch(element) in ["y", "both"]
8317     ┃   ┃   ┃   ┃   ┗━ return get_stretch(element) in ["y", "both"]
8318     ┃   ┃   ┃   ┣━ non_stretched = filter(lambda c: not has_stretch_y(c), self.children)
8319     ┃   ┃   ┃   ┗━ non_stretched = filter(lambda c: not has_stretch_y(c), self.children)
8320     ┃   ┃   ┣━ for child in non_stretched:
8321     ┃   ┃   ┣━ child.place(self.x, self.y, max_width, max_height, None, level + 1)
8322     ┃   ┃   ┃   ┣━ indent = level * "  "
8323     ┃   ┃   ┃   ┣━ self.x = x
8324     ┃   ┃   ┃   ┣━ self.y = y
8325     ┃   ┃   ┃   ┣━ non_stretched = filter(lambda c: not has_stretch_x(c), self.children)
8326     ┃   ┃   ┃   ┣━ stretched = filter(has_stretch_x, self.children)
8327     ┃   ┃   ┃   ┣━ num_stretched = len(list(stretched))
8328     ┃   ┃   ┃   ┃   ┣━ return get_stretch(element) in ["x", "both"]
8329     ┃   ┃   ┃   ┃   ┃   ┣━ return getattr(element, "stretch", None)
8330     ┃   ┃   ┃   ┃   ┃   ┗━ return getattr(element, "stretch", None)
8331     ┃   ┃   ┃   ┃   ┣━ return get_stretch(element) in ["x", "both"]
8332     ┃   ┃   ┃   ┃   ┣━ return get_stretch(element) in ["x", "both"]
8333     ┃   ┃   ┃   ┃   ┣━ return get_stretch(element) in ["x", "both"]
8334     ┃   ┃   ┃   ┃   ┃   ┣━ return getattr(element, "stretch", None)
8335     ┃   ┃   ┃   ┃   ┃   ┗━ return getattr(element, "stretch", None)
8336     ┃   ┃   ┃   ┃   ┣━ return get_stretch(element) in ["x", "both"]
8337     ┃   ┃   ┃   ┃   ┗━ return get_stretch(element) in ["x", "both"]
8338     ┃   ┃   ┃   ┣━ num_stretched = len(list(stretched))
8339     ┃   ┃   ┃   ┣━ non_stretch_width = 0
8340     ┃   ┃   ┃   ┣━ for child in non_stretched:
8341     ┃   ┃   ┃   ┃   ┣━ non_stretched = filter(lambda c: not has_stretch_x(c), self.children)
8342     ┃   ┃   ┃   ┃   ┃   ┣━ return get_stretch(element) in ["x", "both"]
8343     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ return getattr(element, "stretch", None)
8344     ┃   ┃   ┃   ┃   ┃   ┃   ┗━ return getattr(element, "stretch", None)
8345     ┃   ┃   ┃   ┃   ┃   ┣━ return get_stretch(element) in ["x", "both"]
8346     ┃   ┃   ┃   ┃   ┃   ┗━ return get_stretch(element) in ["x", "both"]
8347     ┃   ┃   ┃   ┃   ┣━ non_stretched = filter(lambda c: not has_stretch_x(c), self.children)
8348     ┃   ┃   ┃   ┃   ┗━ non_stretched = filter(lambda c: not has_stretch_x(c), self.children)
8349     ┃   ┃   ┃   ┣━ for child in non_stretched:
8350     ┃   ┃   ┃   ┣━ child.place(self.x, self.y, max_width, max_height, None, level + 1)
8351     ┃   ┃   ┃   ┃   ┣━ indent = level * "  "
8352     ┃   ┃   ┃   ┃   ┣━ self.border.place(x, y, max_width, max_height, stretch, level + 1)
8353     ┃   ┃   ┃   ┃   ┃   ┣━ indent = level * "  "
8354     ┃   ┃   ┃   ┃   ┃   ┣━ self.x = x
8355     ┃   ┃   ┃   ┃   ┃   ┣━ self.y = y
8356     ┃   ┃   ┃   ┃   ┃   ┣━ self.content.place(x + 1, y + 1, max_width - 2, max_height - 2, stretch, level + 1)
8357     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ indent = level * "  "
8358     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ self.x = x
8359     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ self.y = y
8360     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ if stretch in ["x", "both"]:
8361     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ self.width = min(max_width, len(self.text))
8362     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ if stretch in ["y", "both"]:
8363     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ self.height = 1
8364     ┃   ┃   ┃   ┃   ┃   ┃   ┗━ self.height = 1
8365     ┃   ┃   ┃   ┃   ┃   ┣━ self.content.place(x + 1, y + 1, max_width - 2, max_height - 2, stretch, level + 1)
8366     ┃   ┃   ┃   ┃   ┃   ┣━ self.width = self.content.width + 2
8367     ┃   ┃   ┃   ┃   ┃   ┣━ self.height = self.content.height + 2
8368     ┃   ┃   ┃   ┃   ┃   ┗━ self.height = self.content.height + 2
8369     ┃   ┃   ┃   ┃   ┣━ self.border.place(x, y, max_width, max_height, stretch, level + 1)
8370     ┃   ┃   ┃   ┃   ┣━ self.x = x
8371     ┃   ┃   ┃   ┃   ┣━ self.y = y
8372     ┃   ┃   ┃   ┃   ┣━ self.width = self.border.width
8373     ┃   ┃   ┃   ┃   ┣━ self.height = self.border.height
8374     ┃   ┃   ┃   ┃   ┗━ self.height = self.border.height
8375     ┃   ┃   ┃   ┣━ child.place(self.x, self.y, max_width, max_height, None, level + 1)
8376     ┃   ┃   ┃   ┣━ non_stretch_width += child.width
8377     ┃   ┃   ┃   ┣━ for child in non_stretched:
8378     ┃   ┃   ┃   ┃   ┣━ non_stretched = filter(lambda c: not has_stretch_x(c), self.children)
8379     ┃   ┃   ┃   ┃   ┃   ┣━ return get_stretch(element) in ["x", "both"]
8380     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ return getattr(element, "stretch", None)
8381     ┃   ┃   ┃   ┃   ┃   ┃   ┗━ return getattr(element, "stretch", None)
8382     ┃   ┃   ┃   ┃   ┃   ┣━ return get_stretch(element) in ["x", "both"]
8383     ┃   ┃   ┃   ┃   ┃   ┗━ return get_stretch(element) in ["x", "both"]
8384     ┃   ┃   ┃   ┃   ┣━ non_stretched = filter(lambda c: not has_stretch_x(c), self.children)
8385     ┃   ┃   ┃   ┃   ┗━ non_stretched = filter(lambda c: not has_stretch_x(c), self.children)
8386     ┃   ┃   ┃   ┣━ for child in non_stretched:
8387     ┃   ┃   ┃   ┣━ child.place(self.x, self.y, max_width, max_height, None, level + 1)
8388     ┃   ┃   ┃   ┃   ┣━ indent = level * "  "
8389     ┃   ┃   ┃   ┃   ┣━ self.border.place(x, y, max_width, max_height, stretch, level + 1)
8390     ┃   ┃   ┃   ┃   ┃   ┣━ indent = level * "  "
8391     ┃   ┃   ┃   ┃   ┃   ┣━ self.x = x
8392     ┃   ┃   ┃   ┃   ┃   ┣━ self.y = y
8393     ┃   ┃   ┃   ┃   ┃   ┣━ self.content.place(x + 1, y + 1, max_width - 2, max_height - 2, stretch, level + 1)
8394     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ indent = level * "  "
8395     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ self.x = x
8396     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ self.y = y
8397     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ if stretch in ["x", "both"]:
8398     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ self.width = min(max_width, len(self.text))
8399     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ if stretch in ["y", "both"]:
8400     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ self.height = 1
8401     ┃   ┃   ┃   ┃   ┃   ┃   ┗━ self.height = 1
8402     ┃   ┃   ┃   ┃   ┃   ┣━ self.content.place(x + 1, y + 1, max_width - 2, max_height - 2, stretch, level + 1)
8403     ┃   ┃   ┃   ┃   ┃   ┣━ self.width = self.content.width + 2
8404     ┃   ┃   ┃   ┃   ┃   ┣━ self.height = self.content.height + 2
8405     ┃   ┃   ┃   ┃   ┃   ┗━ self.height = self.content.height + 2
8406     ┃   ┃   ┃   ┃   ┣━ self.border.place(x, y, max_width, max_height, stretch, level + 1)
8407     ┃   ┃   ┃   ┃   ┣━ self.x = x
8408     ┃   ┃   ┃   ┃   ┣━ self.y = y
8409     ┃   ┃   ┃   ┃   ┣━ self.width = self.border.width
8410     ┃   ┃   ┃   ┃   ┣━ self.height = self.border.height
8411     ┃   ┃   ┃   ┃   ┗━ self.height = self.border.height
8412     ┃   ┃   ┃   ┣━ child.place(self.x, self.y, max_width, max_height, None, level + 1)
8413     ┃   ┃   ┃   ┣━ non_stretch_width += child.width
8414     ┃   ┃   ┃   ┣━ for child in non_stretched:
8415     ┃   ┃   ┃   ┣━ stretch_width = max_width - non_stretch_width
8416     ┃   ┃   ┃   ┣━ stretch_width_per = (stretch_width // num_stretched) if num_stretched > 0 else 0
8417     ┃   ┃   ┃   ┣━ x_offset = 0
8418     ┃   ┃   ┃   ┣━ my_height = 0
8419     ┃   ┃   ┃   ┣━ for child in self.children:
8420     ┃   ┃   ┃   ┣━ if has_stretch_x(child):
8421     ┃   ┃   ┃   ┃   ┣━ return get_stretch(element) in ["x", "both"]
8422     ┃   ┃   ┃   ┃   ┃   ┣━ return getattr(element, "stretch", None)
8423     ┃   ┃   ┃   ┃   ┃   ┗━ return getattr(element, "stretch", None)
8424     ┃   ┃   ┃   ┃   ┣━ return get_stretch(element) in ["x", "both"]
8425     ┃   ┃   ┃   ┃   ┗━ return get_stretch(element) in ["x", "both"]
8426     ┃   ┃   ┃   ┣━ if has_stretch_x(child):
8427     ┃   ┃   ┃   ┣━ log(indent + "(B)")
8428     ┃   ┃   ┃   ┃   ┣━ logfile.write(text + "\n")
8429     ┃   ┃   ┃   ┃   ┣━ logfile.flush()
8430     ┃   ┃   ┃   ┃   ┗━ logfile.flush()
8431     ┃   ┃   ┃   ┣━ log(indent + "(B)")
8432     ┃   ┃   ┃   ┣━ child.place(self.x + x_offset, self.y, 
8433     ┃   ┃   ┃   ┣━ max_width - x_offset, max_height, 
8434     ┃   ┃   ┃   ┣━ get_stretch(child), level + 1)
8435     ┃   ┃   ┃   ┃   ┣━ return getattr(element, "stretch", None)
8436     ┃   ┃   ┃   ┃   ┗━ return getattr(element, "stretch", None)
8437     ┃   ┃   ┃   ┣━ get_stretch(child), level + 1)
8438     ┃   ┃   ┃   ┣━ child.place(self.x + x_offset, self.y, 
8439     ┃   ┃   ┃   ┃   ┣━ indent = level * "  "
8440     ┃   ┃   ┃   ┃   ┣━ self.border.place(x, y, max_width, max_height, stretch, level + 1)
8441     ┃   ┃   ┃   ┃   ┃   ┣━ indent = level * "  "
8442     ┃   ┃   ┃   ┃   ┃   ┣━ self.x = x
8443     ┃   ┃   ┃   ┃   ┃   ┣━ self.y = y
8444     ┃   ┃   ┃   ┃   ┃   ┣━ self.content.place(x + 1, y + 1, max_width - 2, max_height - 2, stretch, level + 1)
8445     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ indent = level * "  "
8446     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ self.x = x
8447     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ self.y = y
8448     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ if stretch in ["x", "both"]:
8449     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ self.width = min(max_width, len(self.text))
8450     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ if stretch in ["y", "both"]:
8451     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ self.height = 1
8452     ┃   ┃   ┃   ┃   ┃   ┃   ┗━ self.height = 1
8453     ┃   ┃   ┃   ┃   ┃   ┣━ self.content.place(x + 1, y + 1, max_width - 2, max_height - 2, stretch, level + 1)
8454     ┃   ┃   ┃   ┃   ┃   ┣━ self.width = self.content.width + 2
8455     ┃   ┃   ┃   ┃   ┃   ┣━ self.height = self.content.height + 2
8456     ┃   ┃   ┃   ┃   ┃   ┗━ self.height = self.content.height + 2
8457     ┃   ┃   ┃   ┃   ┣━ self.border.place(x, y, max_width, max_height, stretch, level + 1)
8458     ┃   ┃   ┃   ┃   ┣━ self.x = x
8459     ┃   ┃   ┃   ┃   ┣━ self.y = y
8460     ┃   ┃   ┃   ┃   ┣━ self.width = self.border.width
8461     ┃   ┃   ┃   ┃   ┣━ self.height = self.border.height
8462     ┃   ┃   ┃   ┃   ┗━ self.height = self.border.height
8463     ┃   ┃   ┃   ┣━ child.place(self.x + x_offset, self.y, 
8464     ┃   ┃   ┃   ┣━ x_offset += child.width
8465     ┃   ┃   ┃   ┣━ if child.height > my_height:
8466     ┃   ┃   ┃   ┣━ my_height = child.height
8467     ┃   ┃   ┃   ┣━ if x_offset >= max_width:
8468     ┃   ┃   ┃   ┣━ for child in self.children:
8469     ┃   ┃   ┃   ┣━ if has_stretch_x(child):
8470     ┃   ┃   ┃   ┃   ┣━ return get_stretch(element) in ["x", "both"]
8471     ┃   ┃   ┃   ┃   ┃   ┣━ return getattr(element, "stretch", None)
8472     ┃   ┃   ┃   ┃   ┃   ┗━ return getattr(element, "stretch", None)
8473     ┃   ┃   ┃   ┃   ┣━ return get_stretch(element) in ["x", "both"]
8474     ┃   ┃   ┃   ┃   ┗━ return get_stretch(element) in ["x", "both"]
8475     ┃   ┃   ┃   ┣━ if has_stretch_x(child):
8476     ┃   ┃   ┃   ┣━ log(indent + "(B)")
8477     ┃   ┃   ┃   ┃   ┣━ logfile.write(text + "\n")
8478     ┃   ┃   ┃   ┃   ┣━ logfile.flush()
8479     ┃   ┃   ┃   ┃   ┗━ logfile.flush()
8480     ┃   ┃   ┃   ┣━ log(indent + "(B)")
8481     ┃   ┃   ┃   ┣━ child.place(self.x + x_offset, self.y, 
8482     ┃   ┃   ┃   ┣━ max_width - x_offset, max_height, 
8483     ┃   ┃   ┃   ┣━ get_stretch(child), level + 1)
8484     ┃   ┃   ┃   ┃   ┣━ return getattr(element, "stretch", None)
8485     ┃   ┃   ┃   ┃   ┗━ return getattr(element, "stretch", None)
8486     ┃   ┃   ┃   ┣━ get_stretch(child), level + 1)
8487     ┃   ┃   ┃   ┣━ child.place(self.x + x_offset, self.y, 
8488     ┃   ┃   ┃   ┃   ┣━ indent = level * "  "
8489     ┃   ┃   ┃   ┃   ┣━ self.border.place(x, y, max_width, max_height, stretch, level + 1)
8490     ┃   ┃   ┃   ┃   ┃   ┣━ indent = level * "  "
8491     ┃   ┃   ┃   ┃   ┃   ┣━ self.x = x
8492     ┃   ┃   ┃   ┃   ┃   ┣━ self.y = y
8493     ┃   ┃   ┃   ┃   ┃   ┣━ self.content.place(x + 1, y + 1, max_width - 2, max_height - 2, stretch, level + 1)
8494     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ indent = level * "  "
8495     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ self.x = x
8496     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ self.y = y
8497     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ if stretch in ["x", "both"]:
8498     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ self.width = min(max_width, len(self.text))
8499     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ if stretch in ["y", "both"]:
8500     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ self.height = 1
8501     ┃   ┃   ┃   ┃   ┃   ┃   ┗━ self.height = 1
8502     ┃   ┃   ┃   ┃   ┃   ┣━ self.content.place(x + 1, y + 1, max_width - 2, max_height - 2, stretch, level + 1)
8503     ┃   ┃   ┃   ┃   ┃   ┣━ self.width = self.content.width + 2
8504     ┃   ┃   ┃   ┃   ┃   ┣━ self.height = self.content.height + 2
8505     ┃   ┃   ┃   ┃   ┃   ┗━ self.height = self.content.height + 2
8506     ┃   ┃   ┃   ┃   ┣━ self.border.place(x, y, max_width, max_height, stretch, level + 1)
8507     ┃   ┃   ┃   ┃   ┣━ self.x = x
8508     ┃   ┃   ┃   ┃   ┣━ self.y = y
8509     ┃   ┃   ┃   ┃   ┣━ self.width = self.border.width
8510     ┃   ┃   ┃   ┃   ┣━ self.height = self.border.height
8511     ┃   ┃   ┃   ┃   ┗━ self.height = self.border.height
8512     ┃   ┃   ┃   ┣━ child.place(self.x + x_offset, self.y, 
8513     ┃   ┃   ┃   ┣━ x_offset += child.width
8514     ┃   ┃   ┃   ┣━ if child.height > my_height:
8515     ┃   ┃   ┃   ┣━ if x_offset >= max_width:
8516     ┃   ┃   ┃   ┣━ for child in self.children:
8517     ┃   ┃   ┃   ┣━ if stretch in ["x", "both"]:
8518     ┃   ┃   ┃   ┣━ self.width = min(max_width, x_offset)
8519     ┃   ┃   ┃   ┣━ if stretch in ["y", "both"]:
8520     ┃   ┃   ┃   ┣━ self.height = min(max_height, my_height)
8521     ┃   ┃   ┃   ┗━ self.height = min(max_height, my_height)
8522     ┃   ┃   ┣━ child.place(self.x, self.y, max_width, max_height, None, level + 1)
8523     ┃   ┃   ┣━ non_stretched_height += child.height
8524     ┃   ┃   ┣━ for child in non_stretched:
8525     ┃   ┃   ┃   ┣━ non_stretched = filter(lambda c: not has_stretch_y(c), self.children)
8526     ┃   ┃   ┃   ┃   ┣━ return get_stretch(element) in ["y", "both"]
8527     ┃   ┃   ┃   ┃   ┃   ┣━ return getattr(element, "stretch", None)
8528     ┃   ┃   ┃   ┃   ┃   ┗━ return getattr(element, "stretch", None)
8529     ┃   ┃   ┃   ┃   ┣━ return get_stretch(element) in ["y", "both"]
8530     ┃   ┃   ┃   ┃   ┗━ return get_stretch(element) in ["y", "both"]
8531     ┃   ┃   ┃   ┣━ non_stretched = filter(lambda c: not has_stretch_y(c), self.children)
8532     ┃   ┃   ┃   ┗━ non_stretched = filter(lambda c: not has_stretch_y(c), self.children)
8533     ┃   ┃   ┣━ for child in non_stretched:
8534     ┃   ┃   ┣━ child.place(self.x, self.y, max_width, max_height, None, level + 1)
8535     ┃   ┃   ┃   ┣━ logindent = level * "  "
8536     ┃   ┃   ┃   ┣━ self.x = x
8537     ┃   ┃   ┃   ┣━ self.y = y
8538     ┃   ┃   ┃   ┣━ self.height = max_height
8539     ┃   ┃   ┃   ┣━ y_offset = 0
8540     ┃   ┃   ┃   ┣━ indent = 2
8541     ┃   ┃   ┃   ┣━ self.label.place(x + indent, self.y, max_width - indent, max_height, stretch, level + 1)
8542     ┃   ┃   ┃   ┃   ┣━ indent = level * "  "
8543     ┃   ┃   ┃   ┃   ┣━ self.x = x
8544     ┃   ┃   ┃   ┃   ┣━ self.y = y
8545     ┃   ┃   ┃   ┃   ┣━ if stretch in ["x", "both"]:
8546     ┃   ┃   ┃   ┃   ┣━ self.width = min(max_width, len(self.text))
8547     ┃   ┃   ┃   ┃   ┣━ if stretch in ["y", "both"]:
8548     ┃   ┃   ┃   ┃   ┣━ self.height = 1
8549     ┃   ┃   ┃   ┃   ┗━ self.height = 1
8550     ┃   ┃   ┃   ┣━ self.label.place(x + indent, self.y, max_width - indent, max_height, stretch, level + 1)
8551     ┃   ┃   ┃   ┣━ self.width = self.label.width + indent
8552     ┃   ┃   ┃   ┣━ y_offset += self.label.height
8553     ┃   ┃   ┃   ┣━ if self.expanded:
8554     ┃   ┃   ┃   ┣━ for child in self.child_nodes:
8555     ┃   ┃   ┃   ┃   ┣━ return filter(lambda c: c != self.label, self.children)
8556     ┃   ┃   ┃   ┃   ┗━ return filter(lambda c: c != self.label, self.children)
8557     ┃   ┃   ┃   ┣━ for child in self.child_nodes:
8558     ┃   ┃   ┃   ┃   ┣━ return filter(lambda c: c != self.label, self.children)
8559     ┃   ┃   ┃   ┃   ┣━ return filter(lambda c: c != self.label, self.children)
8560     ┃   ┃   ┃   ┃   ┣━ return filter(lambda c: c != self.label, self.children)
8561     ┃   ┃   ┃   ┃   ┗━ return filter(lambda c: c != self.label, self.children)
8562     ┃   ┃   ┃   ┣━ for child in self.child_nodes:
8563     ┃   ┃   ┃   ┣━ unplace(child)
8564     ┃   ┃   ┃   ┃   ┣━ attrs = ["width", "height", "x", "y"]
8565     ┃   ┃   ┃   ┃   ┣━ for attr in attrs:
8566     ┃   ┃   ┃   ┃   ┣━ if hasattr(element, attr):
8567     ┃   ┃   ┃   ┃   ┣━ for attr in attrs:
8568     ┃   ┃   ┃   ┃   ┣━ if hasattr(element, attr):
8569     ┃   ┃   ┃   ┃   ┣━ for attr in attrs:
8570     ┃   ┃   ┃   ┃   ┣━ if hasattr(element, attr):
8571     ┃   ┃   ┃   ┃   ┣━ for attr in attrs:
8572     ┃   ┃   ┃   ┃   ┣━ if hasattr(element, attr):
8573     ┃   ┃   ┃   ┃   ┣━ for attr in attrs:
8574     ┃   ┃   ┃   ┃   ┗━ for attr in attrs:
8575     ┃   ┃   ┃   ┣━ unplace(child)
8576     ┃   ┃   ┃   ┣━ for child in self.child_nodes:
8577     ┃   ┃   ┃   ┃   ┣━ return filter(lambda c: c != self.label, self.children)
8578     ┃   ┃   ┃   ┃   ┗━ return filter(lambda c: c != self.label, self.children)
8579     ┃   ┃   ┃   ┣━ for child in self.child_nodes:
8580     ┃   ┃   ┃   ┣━ unplace(child)
8581     ┃   ┃   ┃   ┃   ┣━ attrs = ["width", "height", "x", "y"]
8582     ┃   ┃   ┃   ┃   ┣━ for attr in attrs:
8583     ┃   ┃   ┃   ┃   ┣━ if hasattr(element, attr):
8584     ┃   ┃   ┃   ┃   ┣━ for attr in attrs:
8585     ┃   ┃   ┃   ┃   ┣━ if hasattr(element, attr):
8586     ┃   ┃   ┃   ┃   ┣━ for attr in attrs:
8587     ┃   ┃   ┃   ┃   ┣━ if hasattr(element, attr):
8588     ┃   ┃   ┃   ┃   ┣━ for attr in attrs:
8589     ┃   ┃   ┃   ┃   ┣━ if hasattr(element, attr):
8590     ┃   ┃   ┃   ┃   ┣━ for attr in attrs:
8591     ┃   ┃   ┃   ┃   ┗━ for attr in attrs:
8592     ┃   ┃   ┃   ┣━ unplace(child)
8593     ┃   ┃   ┃   ┣━ for child in self.child_nodes:
8594     ┃   ┃   ┃   ┃   ┣━ return filter(lambda c: c != self.label, self.children)
8595     ┃   ┃   ┃   ┃   ┗━ return filter(lambda c: c != self.label, self.children)
8596     ┃   ┃   ┃   ┣━ for child in self.child_nodes:
8597     ┃   ┃   ┃   ┣━ unplace(child)
8598     ┃   ┃   ┃   ┃   ┣━ attrs = ["width", "height", "x", "y"]
8599     ┃   ┃   ┃   ┃   ┣━ for attr in attrs:
8600     ┃   ┃   ┃   ┃   ┣━ if hasattr(element, attr):
8601     ┃   ┃   ┃   ┃   ┣━ for attr in attrs:
8602     ┃   ┃   ┃   ┃   ┣━ if hasattr(element, attr):
8603     ┃   ┃   ┃   ┃   ┣━ for attr in attrs:
8604     ┃   ┃   ┃   ┃   ┣━ if hasattr(element, attr):
8605     ┃   ┃   ┃   ┃   ┣━ for attr in attrs:
8606     ┃   ┃   ┃   ┃   ┣━ if hasattr(element, attr):
8607     ┃   ┃   ┃   ┃   ┣━ for attr in attrs:
8608     ┃   ┃   ┃   ┃   ┗━ for attr in attrs:
8609     ┃   ┃   ┃   ┣━ unplace(child)
8610     ┃   ┃   ┃   ┣━ for child in self.child_nodes:
8611     ┃   ┃   ┃   ┣━ self.height = self.label.height
8612     ┃   ┃   ┃   ┗━ self.height = self.label.height
8613     ┃   ┃   ┣━ child.place(self.x, self.y, max_width, max_height, None, level + 1)
8614     ┃   ┃   ┣━ non_stretched_height += child.height
8615     ┃   ┃   ┣━ for child in non_stretched:
8616     ┃   ┃   ┃   ┣━ non_stretched = filter(lambda c: not has_stretch_y(c), self.children)
8617     ┃   ┃   ┃   ┃   ┣━ return get_stretch(element) in ["y", "both"]
8618     ┃   ┃   ┃   ┃   ┃   ┣━ return getattr(element, "stretch", None)
8619     ┃   ┃   ┃   ┃   ┃   ┗━ return getattr(element, "stretch", None)
8620     ┃   ┃   ┃   ┃   ┣━ return get_stretch(element) in ["y", "both"]
8621     ┃   ┃   ┃   ┃   ┗━ return get_stretch(element) in ["y", "both"]
8622     ┃   ┃   ┃   ┣━ non_stretched = filter(lambda c: not has_stretch_y(c), self.children)
8623     ┃   ┃   ┃   ┗━ non_stretched = filter(lambda c: not has_stretch_y(c), self.children)
8624     ┃   ┃   ┣━ for child in non_stretched:
8625     ┃   ┃   ┣━ child.place(self.x, self.y, max_width, max_height, None, level + 1)
8626     ┃   ┃   ┃   ┣━ indent = level * "  "
8627     ┃   ┃   ┃   ┣━ self.x = x
8628     ┃   ┃   ┃   ┣━ self.y = y
8629     ┃   ┃   ┃   ┣━ if stretch in ["x", "both"]:
8630     ┃   ┃   ┃   ┣━ self.width = min(max_width, len(self.text))
8631     ┃   ┃   ┃   ┣━ if stretch in ["y", "both"]:
8632     ┃   ┃   ┃   ┣━ self.height = 1
8633     ┃   ┃   ┃   ┗━ self.height = 1
8634     ┃   ┃   ┣━ child.place(self.x, self.y, max_width, max_height, None, level + 1)
8635     ┃   ┃   ┣━ non_stretched_height += child.height
8636     ┃   ┃   ┣━ for child in non_stretched:
8637     ┃   ┃   ┣━ stretched_height = max_height - non_stretched_height
8638     ┃   ┃   ┣━ stretched_height_per = (stretched_height // num_stretched) if num_stretched > 0 else 0
8639     ┃   ┃   ┣━ y_offset = 0
8640     ┃   ┃   ┣━ my_width = 0
8641     ┃   ┃   ┣━ for child in self.children:
8642     ┃   ┃   ┣━ if has_stretch_y(child):
8643     ┃   ┃   ┃   ┣━ return get_stretch(element) in ["y", "both"]
8644     ┃   ┃   ┃   ┃   ┣━ return getattr(element, "stretch", None)
8645     ┃   ┃   ┃   ┃   ┗━ return getattr(element, "stretch", None)
8646     ┃   ┃   ┃   ┣━ return get_stretch(element) in ["y", "both"]
8647     ┃   ┃   ┃   ┗━ return get_stretch(element) in ["y", "both"]
8648     ┃   ┃   ┣━ if has_stretch_y(child):
8649     ┃   ┃   ┣━ child.place(self.x, self.y + y_offset, 
8650     ┃   ┃   ┣━ max_width, max_height - y_offset, 
8651     ┃   ┃   ┣━ get_stretch(child), level + 1)
8652     ┃   ┃   ┃   ┣━ return getattr(element, "stretch", None)
8653     ┃   ┃   ┃   ┗━ return getattr(element, "stretch", None)
8654     ┃   ┃   ┣━ get_stretch(child), level + 1)
8655     ┃   ┃   ┣━ child.place(self.x, self.y + y_offset, 
8656     ┃   ┃   ┃   ┣━ indent = level * "  "
8657     ┃   ┃   ┃   ┣━ self.x = x
8658     ┃   ┃   ┃   ┣━ self.y = y
8659     ┃   ┃   ┃   ┣━ if stretch in ["x", "both"]:
8660     ┃   ┃   ┃   ┣━ self.width = min(max_width, len(self.text))
8661     ┃   ┃   ┃   ┣━ if stretch in ["y", "both"]:
8662     ┃   ┃   ┃   ┣━ self.height = 1
8663     ┃   ┃   ┃   ┗━ self.height = 1
8664     ┃   ┃   ┣━ child.place(self.x, self.y + y_offset, 
8665     ┃   ┃   ┣━ y_offset += child.height
8666     ┃   ┃   ┣━ if child.width > my_width:
8667     ┃   ┃   ┣━ my_width = child.width
8668     ┃   ┃   ┣━ if y_offset >= max_height:
8669     ┃   ┃   ┣━ for child in self.children:
8670     ┃   ┃   ┣━ if has_stretch_y(child):
8671     ┃   ┃   ┃   ┣━ return get_stretch(element) in ["y", "both"]
8672     ┃   ┃   ┃   ┃   ┣━ return getattr(element, "stretch", None)
8673     ┃   ┃   ┃   ┃   ┗━ return getattr(element, "stretch", None)
8674     ┃   ┃   ┃   ┣━ return get_stretch(element) in ["y", "both"]
8675     ┃   ┃   ┃   ┗━ return get_stretch(element) in ["y", "both"]
8676     ┃   ┃   ┣━ if has_stretch_y(child):
8677     ┃   ┃   ┣━ child.place(self.x, self.y + y_offset, 
8678     ┃   ┃   ┣━ max_width, max_height - y_offset, 
8679     ┃   ┃   ┣━ get_stretch(child), level + 1)
8680     ┃   ┃   ┃   ┣━ return getattr(element, "stretch", None)
8681     ┃   ┃   ┃   ┗━ return getattr(element, "stretch", None)
8682     ┃   ┃   ┣━ get_stretch(child), level + 1)
8683     ┃   ┃   ┣━ child.place(self.x, self.y + y_offset, 
8684     ┃   ┃   ┃   ┣━ indent = level * "  "
8685     ┃   ┃   ┃   ┣━ self.x = x
8686     ┃   ┃   ┃   ┣━ self.y = y
8687     ┃   ┃   ┃   ┣━ non_stretched = filter(lambda c: not has_stretch_x(c), self.children)
8688     ┃   ┃   ┃   ┣━ stretched = filter(has_stretch_x, self.children)
8689     ┃   ┃   ┃   ┣━ num_stretched = len(list(stretched))
8690     ┃   ┃   ┃   ┃   ┣━ return get_stretch(element) in ["x", "both"]
8691     ┃   ┃   ┃   ┃   ┃   ┣━ return getattr(element, "stretch", None)
8692     ┃   ┃   ┃   ┃   ┃   ┗━ return getattr(element, "stretch", None)
8693     ┃   ┃   ┃   ┃   ┣━ return get_stretch(element) in ["x", "both"]
8694     ┃   ┃   ┃   ┃   ┣━ return get_stretch(element) in ["x", "both"]
8695     ┃   ┃   ┃   ┃   ┣━ return get_stretch(element) in ["x", "both"]
8696     ┃   ┃   ┃   ┃   ┃   ┣━ return getattr(element, "stretch", None)
8697     ┃   ┃   ┃   ┃   ┃   ┗━ return getattr(element, "stretch", None)
8698     ┃   ┃   ┃   ┃   ┣━ return get_stretch(element) in ["x", "both"]
8699     ┃   ┃   ┃   ┃   ┗━ return get_stretch(element) in ["x", "both"]
8700     ┃   ┃   ┃   ┣━ num_stretched = len(list(stretched))
8701     ┃   ┃   ┃   ┣━ non_stretch_width = 0
8702     ┃   ┃   ┃   ┣━ for child in non_stretched:
8703     ┃   ┃   ┃   ┃   ┣━ non_stretched = filter(lambda c: not has_stretch_x(c), self.children)
8704     ┃   ┃   ┃   ┃   ┃   ┣━ return get_stretch(element) in ["x", "both"]
8705     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ return getattr(element, "stretch", None)
8706     ┃   ┃   ┃   ┃   ┃   ┃   ┗━ return getattr(element, "stretch", None)
8707     ┃   ┃   ┃   ┃   ┃   ┣━ return get_stretch(element) in ["x", "both"]
8708     ┃   ┃   ┃   ┃   ┃   ┗━ return get_stretch(element) in ["x", "both"]
8709     ┃   ┃   ┃   ┃   ┣━ non_stretched = filter(lambda c: not has_stretch_x(c), self.children)
8710     ┃   ┃   ┃   ┃   ┗━ non_stretched = filter(lambda c: not has_stretch_x(c), self.children)
8711     ┃   ┃   ┃   ┣━ for child in non_stretched:
8712     ┃   ┃   ┃   ┣━ child.place(self.x, self.y, max_width, max_height, None, level + 1)
8713     ┃   ┃   ┃   ┃   ┣━ indent = level * "  "
8714     ┃   ┃   ┃   ┃   ┣━ self.border.place(x, y, max_width, max_height, stretch, level + 1)
8715     ┃   ┃   ┃   ┃   ┃   ┣━ indent = level * "  "
8716     ┃   ┃   ┃   ┃   ┃   ┣━ self.x = x
8717     ┃   ┃   ┃   ┃   ┃   ┣━ self.y = y
8718     ┃   ┃   ┃   ┃   ┃   ┣━ self.content.place(x + 1, y + 1, max_width - 2, max_height - 2, stretch, level + 1)
8719     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ indent = level * "  "
8720     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ self.x = x
8721     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ self.y = y
8722     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ if stretch in ["x", "both"]:
8723     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ self.width = min(max_width, len(self.text))
8724     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ if stretch in ["y", "both"]:
8725     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ self.height = 1
8726     ┃   ┃   ┃   ┃   ┃   ┃   ┗━ self.height = 1
8727     ┃   ┃   ┃   ┃   ┃   ┣━ self.content.place(x + 1, y + 1, max_width - 2, max_height - 2, stretch, level + 1)
8728     ┃   ┃   ┃   ┃   ┃   ┣━ self.width = self.content.width + 2
8729     ┃   ┃   ┃   ┃   ┃   ┣━ self.height = self.content.height + 2
8730     ┃   ┃   ┃   ┃   ┃   ┗━ self.height = self.content.height + 2
8731     ┃   ┃   ┃   ┃   ┣━ self.border.place(x, y, max_width, max_height, stretch, level + 1)
8732     ┃   ┃   ┃   ┃   ┣━ self.x = x
8733     ┃   ┃   ┃   ┃   ┣━ self.y = y
8734     ┃   ┃   ┃   ┃   ┣━ self.width = self.border.width
8735     ┃   ┃   ┃   ┃   ┣━ self.height = self.border.height
8736     ┃   ┃   ┃   ┃   ┗━ self.height = self.border.height
8737     ┃   ┃   ┃   ┣━ child.place(self.x, self.y, max_width, max_height, None, level + 1)
8738     ┃   ┃   ┃   ┣━ non_stretch_width += child.width
8739     ┃   ┃   ┃   ┣━ for child in non_stretched:
8740     ┃   ┃   ┃   ┃   ┣━ non_stretched = filter(lambda c: not has_stretch_x(c), self.children)
8741     ┃   ┃   ┃   ┃   ┃   ┣━ return get_stretch(element) in ["x", "both"]
8742     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ return getattr(element, "stretch", None)
8743     ┃   ┃   ┃   ┃   ┃   ┃   ┗━ return getattr(element, "stretch", None)
8744     ┃   ┃   ┃   ┃   ┃   ┣━ return get_stretch(element) in ["x", "both"]
8745     ┃   ┃   ┃   ┃   ┃   ┗━ return get_stretch(element) in ["x", "both"]
8746     ┃   ┃   ┃   ┃   ┣━ non_stretched = filter(lambda c: not has_stretch_x(c), self.children)
8747     ┃   ┃   ┃   ┃   ┗━ non_stretched = filter(lambda c: not has_stretch_x(c), self.children)
8748     ┃   ┃   ┃   ┣━ for child in non_stretched:
8749     ┃   ┃   ┃   ┣━ child.place(self.x, self.y, max_width, max_height, None, level + 1)
8750     ┃   ┃   ┃   ┃   ┣━ indent = level * "  "
8751     ┃   ┃   ┃   ┃   ┣━ self.border.place(x, y, max_width, max_height, stretch, level + 1)
8752     ┃   ┃   ┃   ┃   ┃   ┣━ indent = level * "  "
8753     ┃   ┃   ┃   ┃   ┃   ┣━ self.x = x
8754     ┃   ┃   ┃   ┃   ┃   ┣━ self.y = y
8755     ┃   ┃   ┃   ┃   ┃   ┣━ self.content.place(x + 1, y + 1, max_width - 2, max_height - 2, stretch, level + 1)
8756     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ indent = level * "  "
8757     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ self.x = x
8758     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ self.y = y
8759     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ if stretch in ["x", "both"]:
8760     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ self.width = min(max_width, len(self.text))
8761     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ if stretch in ["y", "both"]:
8762     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ self.height = 1
8763     ┃   ┃   ┃   ┃   ┃   ┃   ┗━ self.height = 1
8764     ┃   ┃   ┃   ┃   ┃   ┣━ self.content.place(x + 1, y + 1, max_width - 2, max_height - 2, stretch, level + 1)
8765     ┃   ┃   ┃   ┃   ┃   ┣━ self.width = self.content.width + 2
8766     ┃   ┃   ┃   ┃   ┃   ┣━ self.height = self.content.height + 2
8767     ┃   ┃   ┃   ┃   ┃   ┗━ self.height = self.content.height + 2
8768     ┃   ┃   ┃   ┃   ┣━ self.border.place(x, y, max_width, max_height, stretch, level + 1)
8769     ┃   ┃   ┃   ┃   ┣━ self.x = x
8770     ┃   ┃   ┃   ┃   ┣━ self.y = y
8771     ┃   ┃   ┃   ┃   ┣━ self.width = self.border.width
8772     ┃   ┃   ┃   ┃   ┣━ self.height = self.border.height
8773     ┃   ┃   ┃   ┃   ┗━ self.height = self.border.height
8774     ┃   ┃   ┃   ┣━ child.place(self.x, self.y, max_width, max_height, None, level + 1)
8775     ┃   ┃   ┃   ┣━ non_stretch_width += child.width
8776     ┃   ┃   ┃   ┣━ for child in non_stretched:
8777     ┃   ┃   ┃   ┣━ stretch_width = max_width - non_stretch_width
8778     ┃   ┃   ┃   ┣━ stretch_width_per = (stretch_width // num_stretched) if num_stretched > 0 else 0
8779     ┃   ┃   ┃   ┣━ x_offset = 0
8780     ┃   ┃   ┃   ┣━ my_height = 0
8781     ┃   ┃   ┃   ┣━ for child in self.children:
8782     ┃   ┃   ┃   ┣━ if has_stretch_x(child):
8783     ┃   ┃   ┃   ┃   ┣━ return get_stretch(element) in ["x", "both"]
8784     ┃   ┃   ┃   ┃   ┃   ┣━ return getattr(element, "stretch", None)
8785     ┃   ┃   ┃   ┃   ┃   ┗━ return getattr(element, "stretch", None)
8786     ┃   ┃   ┃   ┃   ┣━ return get_stretch(element) in ["x", "both"]
8787     ┃   ┃   ┃   ┃   ┗━ return get_stretch(element) in ["x", "both"]
8788     ┃   ┃   ┃   ┣━ if has_stretch_x(child):
8789     ┃   ┃   ┃   ┣━ log(indent + "(B)")
8790     ┃   ┃   ┃   ┃   ┣━ logfile.write(text + "\n")
8791     ┃   ┃   ┃   ┃   ┣━ logfile.flush()
8792     ┃   ┃   ┃   ┃   ┗━ logfile.flush()
8793     ┃   ┃   ┃   ┣━ log(indent + "(B)")
8794     ┃   ┃   ┃   ┣━ child.place(self.x + x_offset, self.y, 
8795     ┃   ┃   ┃   ┣━ max_width - x_offset, max_height, 
8796     ┃   ┃   ┃   ┣━ get_stretch(child), level + 1)
8797     ┃   ┃   ┃   ┃   ┣━ return getattr(element, "stretch", None)
8798     ┃   ┃   ┃   ┃   ┗━ return getattr(element, "stretch", None)
8799     ┃   ┃   ┃   ┣━ get_stretch(child), level + 1)
8800     ┃   ┃   ┃   ┣━ child.place(self.x + x_offset, self.y, 
8801     ┃   ┃   ┃   ┃   ┣━ indent = level * "  "
8802     ┃   ┃   ┃   ┃   ┣━ self.border.place(x, y, max_width, max_height, stretch, level + 1)
8803     ┃   ┃   ┃   ┃   ┃   ┣━ indent = level * "  "
8804     ┃   ┃   ┃   ┃   ┃   ┣━ self.x = x
8805     ┃   ┃   ┃   ┃   ┃   ┣━ self.y = y
8806     ┃   ┃   ┃   ┃   ┃   ┣━ self.content.place(x + 1, y + 1, max_width - 2, max_height - 2, stretch, level + 1)
8807     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ indent = level * "  "
8808     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ self.x = x
8809     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ self.y = y
8810     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ if stretch in ["x", "both"]:
8811     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ self.width = min(max_width, len(self.text))
8812     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ if stretch in ["y", "both"]:
8813     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ self.height = 1
8814     ┃   ┃   ┃   ┃   ┃   ┃   ┗━ self.height = 1
8815     ┃   ┃   ┃   ┃   ┃   ┣━ self.content.place(x + 1, y + 1, max_width - 2, max_height - 2, stretch, level + 1)
8816     ┃   ┃   ┃   ┃   ┃   ┣━ self.width = self.content.width + 2
8817     ┃   ┃   ┃   ┃   ┃   ┣━ self.height = self.content.height + 2
8818     ┃   ┃   ┃   ┃   ┃   ┗━ self.height = self.content.height + 2
8819     ┃   ┃   ┃   ┃   ┣━ self.border.place(x, y, max_width, max_height, stretch, level + 1)
8820     ┃   ┃   ┃   ┃   ┣━ self.x = x
8821     ┃   ┃   ┃   ┃   ┣━ self.y = y
8822     ┃   ┃   ┃   ┃   ┣━ self.width = self.border.width
8823     ┃   ┃   ┃   ┃   ┣━ self.height = self.border.height
8824     ┃   ┃   ┃   ┃   ┗━ self.height = self.border.height
8825     ┃   ┃   ┃   ┣━ child.place(self.x + x_offset, self.y, 
8826     ┃   ┃   ┃   ┣━ x_offset += child.width
8827     ┃   ┃   ┃   ┣━ if child.height > my_height:
8828     ┃   ┃   ┃   ┣━ my_height = child.height
8829     ┃   ┃   ┃   ┣━ if x_offset >= max_width:
8830     ┃   ┃   ┃   ┣━ for child in self.children:
8831     ┃   ┃   ┃   ┣━ if has_stretch_x(child):
8832     ┃   ┃   ┃   ┃   ┣━ return get_stretch(element) in ["x", "both"]
8833     ┃   ┃   ┃   ┃   ┃   ┣━ return getattr(element, "stretch", None)
8834     ┃   ┃   ┃   ┃   ┃   ┗━ return getattr(element, "stretch", None)
8835     ┃   ┃   ┃   ┃   ┣━ return get_stretch(element) in ["x", "both"]
8836     ┃   ┃   ┃   ┃   ┗━ return get_stretch(element) in ["x", "both"]
8837     ┃   ┃   ┃   ┣━ if has_stretch_x(child):
8838     ┃   ┃   ┃   ┣━ log(indent + "(B)")
8839     ┃   ┃   ┃   ┃   ┣━ logfile.write(text + "\n")
8840     ┃   ┃   ┃   ┃   ┣━ logfile.flush()
8841     ┃   ┃   ┃   ┃   ┗━ logfile.flush()
8842     ┃   ┃   ┃   ┣━ log(indent + "(B)")
8843     ┃   ┃   ┃   ┣━ child.place(self.x + x_offset, self.y, 
8844     ┃   ┃   ┃   ┣━ max_width - x_offset, max_height, 
8845     ┃   ┃   ┃   ┣━ get_stretch(child), level + 1)
8846     ┃   ┃   ┃   ┃   ┣━ return getattr(element, "stretch", None)
8847     ┃   ┃   ┃   ┃   ┗━ return getattr(element, "stretch", None)
8848     ┃   ┃   ┃   ┣━ get_stretch(child), level + 1)
8849     ┃   ┃   ┃   ┣━ child.place(self.x + x_offset, self.y, 
8850     ┃   ┃   ┃   ┃   ┣━ indent = level * "  "
8851     ┃   ┃   ┃   ┃   ┣━ self.border.place(x, y, max_width, max_height, stretch, level + 1)
8852     ┃   ┃   ┃   ┃   ┃   ┣━ indent = level * "  "
8853     ┃   ┃   ┃   ┃   ┃   ┣━ self.x = x
8854     ┃   ┃   ┃   ┃   ┃   ┣━ self.y = y
8855     ┃   ┃   ┃   ┃   ┃   ┣━ self.content.place(x + 1, y + 1, max_width - 2, max_height - 2, stretch, level + 1)
8856     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ indent = level * "  "
8857     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ self.x = x
8858     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ self.y = y
8859     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ if stretch in ["x", "both"]:
8860     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ self.width = min(max_width, len(self.text))
8861     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ if stretch in ["y", "both"]:
8862     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ self.height = 1
8863     ┃   ┃   ┃   ┃   ┃   ┃   ┗━ self.height = 1
8864     ┃   ┃   ┃   ┃   ┃   ┣━ self.content.place(x + 1, y + 1, max_width - 2, max_height - 2, stretch, level + 1)
8865     ┃   ┃   ┃   ┃   ┃   ┣━ self.width = self.content.width + 2
8866     ┃   ┃   ┃   ┃   ┃   ┣━ self.height = self.content.height + 2
8867     ┃   ┃   ┃   ┃   ┃   ┗━ self.height = self.content.height + 2
8868     ┃   ┃   ┃   ┃   ┣━ self.border.place(x, y, max_width, max_height, stretch, level + 1)
8869     ┃   ┃   ┃   ┃   ┣━ self.x = x
8870     ┃   ┃   ┃   ┃   ┣━ self.y = y
8871     ┃   ┃   ┃   ┃   ┣━ self.width = self.border.width
8872     ┃   ┃   ┃   ┃   ┣━ self.height = self.border.height
8873     ┃   ┃   ┃   ┃   ┗━ self.height = self.border.height
8874     ┃   ┃   ┃   ┣━ child.place(self.x + x_offset, self.y, 
8875     ┃   ┃   ┃   ┣━ x_offset += child.width
8876     ┃   ┃   ┃   ┣━ if child.height > my_height:
8877     ┃   ┃   ┃   ┣━ if x_offset >= max_width:
8878     ┃   ┃   ┃   ┣━ for child in self.children:
8879     ┃   ┃   ┃   ┣━ if stretch in ["x", "both"]:
8880     ┃   ┃   ┃   ┣━ self.width = min(max_width, x_offset)
8881     ┃   ┃   ┃   ┣━ if stretch in ["y", "both"]:
8882     ┃   ┃   ┃   ┣━ self.height = min(max_height, my_height)
8883     ┃   ┃   ┃   ┗━ self.height = min(max_height, my_height)
8884     ┃   ┃   ┣━ child.place(self.x, self.y + y_offset, 
8885     ┃   ┃   ┣━ y_offset += child.height
8886     ┃   ┃   ┣━ if child.width > my_width:
8887     ┃   ┃   ┣━ my_width = child.width
8888     ┃   ┃   ┣━ if y_offset >= max_height:
8889     ┃   ┃   ┣━ for child in self.children:
8890     ┃   ┃   ┣━ if has_stretch_y(child):
8891     ┃   ┃   ┃   ┣━ return get_stretch(element) in ["y", "both"]
8892     ┃   ┃   ┃   ┃   ┣━ return getattr(element, "stretch", None)
8893     ┃   ┃   ┃   ┃   ┗━ return getattr(element, "stretch", None)
8894     ┃   ┃   ┃   ┣━ return get_stretch(element) in ["y", "both"]
8895     ┃   ┃   ┃   ┗━ return get_stretch(element) in ["y", "both"]
8896     ┃   ┃   ┣━ if has_stretch_y(child):
8897     ┃   ┃   ┣━ child.place(self.x, self.y + y_offset, 
8898     ┃   ┃   ┣━ max_width, max_height - y_offset, 
8899     ┃   ┃   ┣━ get_stretch(child), level + 1)
8900     ┃   ┃   ┃   ┣━ return getattr(element, "stretch", None)
8901     ┃   ┃   ┃   ┗━ return getattr(element, "stretch", None)
8902     ┃   ┃   ┣━ get_stretch(child), level + 1)
8903     ┃   ┃   ┣━ child.place(self.x, self.y + y_offset, 
8904     ┃   ┃   ┃   ┣━ logindent = level * "  "
8905     ┃   ┃   ┃   ┣━ self.x = x
8906     ┃   ┃   ┃   ┣━ self.y = y
8907     ┃   ┃   ┃   ┣━ self.height = max_height
8908     ┃   ┃   ┃   ┣━ y_offset = 0
8909     ┃   ┃   ┃   ┣━ indent = 2
8910     ┃   ┃   ┃   ┣━ self.label.place(x + indent, self.y, max_width - indent, max_height, stretch, level + 1)
8911     ┃   ┃   ┃   ┃   ┣━ indent = level * "  "
8912     ┃   ┃   ┃   ┃   ┣━ self.x = x
8913     ┃   ┃   ┃   ┃   ┣━ self.y = y
8914     ┃   ┃   ┃   ┃   ┣━ if stretch in ["x", "both"]:
8915     ┃   ┃   ┃   ┃   ┣━ self.width = min(max_width, len(self.text))
8916     ┃   ┃   ┃   ┃   ┣━ if stretch in ["y", "both"]:
8917     ┃   ┃   ┃   ┃   ┣━ self.height = 1
8918     ┃   ┃   ┃   ┃   ┗━ self.height = 1
8919     ┃   ┃   ┃   ┣━ self.label.place(x + indent, self.y, max_width - indent, max_height, stretch, level + 1)
8920     ┃   ┃   ┃   ┣━ self.width = self.label.width + indent
8921     ┃   ┃   ┃   ┣━ y_offset += self.label.height
8922     ┃   ┃   ┃   ┣━ if self.expanded:
8923     ┃   ┃   ┃   ┣━ for child in self.child_nodes:
8924     ┃   ┃   ┃   ┃   ┣━ return filter(lambda c: c != self.label, self.children)
8925     ┃   ┃   ┃   ┃   ┗━ return filter(lambda c: c != self.label, self.children)
8926     ┃   ┃   ┃   ┣━ for child in self.child_nodes:
8927     ┃   ┃   ┃   ┃   ┣━ return filter(lambda c: c != self.label, self.children)
8928     ┃   ┃   ┃   ┃   ┣━ return filter(lambda c: c != self.label, self.children)
8929     ┃   ┃   ┃   ┃   ┣━ return filter(lambda c: c != self.label, self.children)
8930     ┃   ┃   ┃   ┃   ┗━ return filter(lambda c: c != self.label, self.children)
8931     ┃   ┃   ┃   ┣━ for child in self.child_nodes:
8932     ┃   ┃   ┃   ┣━ unplace(child)
8933     ┃   ┃   ┃   ┃   ┣━ attrs = ["width", "height", "x", "y"]
8934     ┃   ┃   ┃   ┃   ┣━ for attr in attrs:
8935     ┃   ┃   ┃   ┃   ┣━ if hasattr(element, attr):
8936     ┃   ┃   ┃   ┃   ┣━ for attr in attrs:
8937     ┃   ┃   ┃   ┃   ┣━ if hasattr(element, attr):
8938     ┃   ┃   ┃   ┃   ┣━ for attr in attrs:
8939     ┃   ┃   ┃   ┃   ┣━ if hasattr(element, attr):
8940     ┃   ┃   ┃   ┃   ┣━ for attr in attrs:
8941     ┃   ┃   ┃   ┃   ┣━ if hasattr(element, attr):
8942     ┃   ┃   ┃   ┃   ┣━ for attr in attrs:
8943     ┃   ┃   ┃   ┃   ┗━ for attr in attrs:
8944     ┃   ┃   ┃   ┣━ unplace(child)
8945     ┃   ┃   ┃   ┣━ for child in self.child_nodes:
8946     ┃   ┃   ┃   ┃   ┣━ return filter(lambda c: c != self.label, self.children)
8947     ┃   ┃   ┃   ┃   ┗━ return filter(lambda c: c != self.label, self.children)
8948     ┃   ┃   ┃   ┣━ for child in self.child_nodes:
8949     ┃   ┃   ┃   ┣━ unplace(child)
8950     ┃   ┃   ┃   ┃   ┣━ attrs = ["width", "height", "x", "y"]
8951     ┃   ┃   ┃   ┃   ┣━ for attr in attrs:
8952     ┃   ┃   ┃   ┃   ┣━ if hasattr(element, attr):
8953     ┃   ┃   ┃   ┃   ┣━ for attr in attrs:
8954     ┃   ┃   ┃   ┃   ┣━ if hasattr(element, attr):
8955     ┃   ┃   ┃   ┃   ┣━ for attr in attrs:
8956     ┃   ┃   ┃   ┃   ┣━ if hasattr(element, attr):
8957     ┃   ┃   ┃   ┃   ┣━ for attr in attrs:
8958     ┃   ┃   ┃   ┃   ┣━ if hasattr(element, attr):
8959     ┃   ┃   ┃   ┃   ┣━ for attr in attrs:
8960     ┃   ┃   ┃   ┃   ┗━ for attr in attrs:
8961     ┃   ┃   ┃   ┣━ unplace(child)
8962     ┃   ┃   ┃   ┣━ for child in self.child_nodes:
8963     ┃   ┃   ┃   ┃   ┣━ return filter(lambda c: c != self.label, self.children)
8964     ┃   ┃   ┃   ┃   ┗━ return filter(lambda c: c != self.label, self.children)
8965     ┃   ┃   ┃   ┣━ for child in self.child_nodes:
8966     ┃   ┃   ┃   ┣━ unplace(child)
8967     ┃   ┃   ┃   ┃   ┣━ attrs = ["width", "height", "x", "y"]
8968     ┃   ┃   ┃   ┃   ┣━ for attr in attrs:
8969     ┃   ┃   ┃   ┃   ┣━ if hasattr(element, attr):
8970     ┃   ┃   ┃   ┃   ┣━ for attr in attrs:
8971     ┃   ┃   ┃   ┃   ┣━ if hasattr(element, attr):
8972     ┃   ┃   ┃   ┃   ┣━ for attr in attrs:
8973     ┃   ┃   ┃   ┃   ┣━ if hasattr(element, attr):
8974     ┃   ┃   ┃   ┃   ┣━ for attr in attrs:
8975     ┃   ┃   ┃   ┃   ┣━ if hasattr(element, attr):
8976     ┃   ┃   ┃   ┃   ┣━ for attr in attrs:
8977     ┃   ┃   ┃   ┃   ┗━ for attr in attrs:
8978     ┃   ┃   ┃   ┣━ unplace(child)
8979     ┃   ┃   ┃   ┣━ for child in self.child_nodes:
8980     ┃   ┃   ┃   ┣━ self.height = self.label.height
8981     ┃   ┃   ┃   ┗━ self.height = self.label.height
8982     ┃   ┃   ┣━ child.place(self.x, self.y + y_offset, 
8983     ┃   ┃   ┣━ y_offset += child.height
8984     ┃   ┃   ┣━ if child.width > my_width:
8985     ┃   ┃   ┣━ if y_offset >= max_height:
8986     ┃   ┃   ┣━ for child in self.children:
8987     ┃   ┃   ┣━ if has_stretch_y(child):
8988     ┃   ┃   ┃   ┣━ return get_stretch(element) in ["y", "both"]
8989     ┃   ┃   ┃   ┃   ┣━ return getattr(element, "stretch", None)
8990     ┃   ┃   ┃   ┃   ┗━ return getattr(element, "stretch", None)
8991     ┃   ┃   ┃   ┣━ return get_stretch(element) in ["y", "both"]
8992     ┃   ┃   ┃   ┗━ return get_stretch(element) in ["y", "both"]
8993     ┃   ┃   ┣━ if has_stretch_y(child):
8994     ┃   ┃   ┣━ child.place(self.x, self.y + y_offset, 
8995     ┃   ┃   ┣━ max_width, max_height - y_offset, 
8996     ┃   ┃   ┣━ get_stretch(child), level + 1)
8997     ┃   ┃   ┃   ┣━ return getattr(element, "stretch", None)
8998     ┃   ┃   ┃   ┗━ return getattr(element, "stretch", None)
8999     ┃   ┃   ┣━ get_stretch(child), level + 1)
9000     ┃   ┃   ┣━ child.place(self.x, self.y + y_offset, 
9001     ┃   ┃   ┃   ┣━ indent = level * "  "
9002     ┃   ┃   ┃   ┣━ self.x = x
9003     ┃   ┃   ┃   ┣━ self.y = y
9004     ┃   ┃   ┃   ┣━ if stretch in ["x", "both"]:
9005     ┃   ┃   ┃   ┣━ self.width = min(max_width, len(self.text))
9006     ┃   ┃   ┃   ┣━ if stretch in ["y", "both"]:
9007     ┃   ┃   ┃   ┣━ self.height = 1
9008     ┃   ┃   ┃   ┗━ self.height = 1
9009     ┃   ┃   ┣━ child.place(self.x, self.y + y_offset, 
9010     ┃   ┃   ┣━ y_offset += child.height
9011     ┃   ┃   ┣━ if child.width > my_width:
9012     ┃   ┃   ┣━ if y_offset >= max_height:
9013     ┃   ┃   ┣━ for child in self.children:
9014     ┃   ┃   ┣━ if stretch in ["x", "both"]:
9015     ┃   ┃   ┣━ self.width = min(max_width, my_width)
9016     ┃   ┃   ┣━ if stretch in ["y", "both"]:
9017     ┃   ┃   ┣━ self.height = min(max_height, y_offset)
9018     ┃   ┃   ┗━ self.height = min(max_height, y_offset)
9019     ┃   ┣━ root_element.place(1, 1, screen_width, screen_height, get_stretch(root_element), 0)
9020     ┃   ┣━ clear_rect(1, 1, screen_width, screen_height)
9021     ┃   ┃   ┣━ for i in range(height):
9022     ┃   ┃   ┣━ print_at(x, y + i, " " * width)
9023     ┃   ┃   ┃   ┣━ goto(x, y)
9024     ┃   ┃   ┃   ┃   ┣━ write('\x1B[%d;%df' % (y, x))
9025     ┃   ┃   ┃   ┃   ┃   ┣━ print(value, end = '')
9026     ┃   ┃   ┃   ┃   ┃   ┣━ sys.stdout.flush()
9027     ┃   ┃   ┃   ┃   ┃   ┗━ sys.stdout.flush()
9028     ┃   ┃   ┃   ┃   ┣━ write('\x1B[%d;%df' % (y, x))
9029     ┃   ┃   ┃   ┃   ┗━ write('\x1B[%d;%df' % (y, x))
9030     ┃   ┃   ┃   ┣━ goto(x, y)
9031     ┃   ┃   ┃   ┣━ print(text, end = '')
9032     ┃   ┃   ┃   ┣━ sys.stdout.flush()
9033     ┃   ┃   ┃   ┗━ sys.stdout.flush()
9034     ┃   ┃   ┣━ print_at(x, y + i, " " * width)
9035     ┃   ┃   ┣━ for i in range(height):
9036     ┃   ┃   ┣━ print_at(x, y + i, " " * width)
9037     ┃   ┃   ┃   ┣━ goto(x, y)
9038     ┃   ┃   ┃   ┃   ┣━ write('\x1B[%d;%df' % (y, x))
9039     ┃   ┃   ┃   ┃   ┃   ┣━ print(value, end = '')
9040     ┃   ┃   ┃   ┃   ┃   ┣━ sys.stdout.flush()
9041     ┃   ┃   ┃   ┃   ┃   ┗━ sys.stdout.flush()
9042     ┃   ┃   ┃   ┃   ┣━ write('\x1B[%d;%df' % (y, x))
9043     ┃   ┃   ┃   ┃   ┗━ write('\x1B[%d;%df' % (y, x))
9044     ┃   ┃   ┃   ┣━ goto(x, y)
9045     ┃   ┃   ┃   ┣━ print(text, end = '')
9046     ┃   ┃   ┃   ┣━ sys.stdout.flush()
9047     ┃   ┃   ┃   ┗━ sys.stdout.flush()
9048     ┃   ┃   ┣━ print_at(x, y + i, " " * width)
9049     ┃   ┃   ┣━ for i in range(height):
9050     ┃   ┃   ┣━ print_at(x, y + i, " " * width)
9051     ┃   ┃   ┃   ┣━ goto(x, y)
9052     ┃   ┃   ┃   ┃   ┣━ write('\x1B[%d;%df' % (y, x))
9053     ┃   ┃   ┃   ┃   ┃   ┣━ print(value, end = '')
9054     ┃   ┃   ┃   ┃   ┃   ┣━ sys.stdout.flush()
9055     ┃   ┃   ┃   ┃   ┃   ┗━ sys.stdout.flush()
9056     ┃   ┃   ┃   ┃   ┣━ write('\x1B[%d;%df' % (y, x))
9057     ┃   ┃   ┃   ┃   ┗━ write('\x1B[%d;%df' % (y, x))
9058     ┃   ┃   ┃   ┣━ goto(x, y)
9059     ┃   ┃   ┃   ┣━ print(text, end = '')
9060     ┃   ┃   ┃   ┣━ sys.stdout.flush()
9061     ┃   ┃   ┃   ┗━ sys.stdout.flush()
9062     ┃   ┃   ┣━ print_at(x, y + i, " " * width)
9063     ┃   ┃   ┣━ for i in range(height):
9064     ┃   ┃   ┣━ print_at(x, y + i, " " * width)
9065     ┃   ┃   ┃   ┣━ goto(x, y)
9066     ┃   ┃   ┃   ┃   ┣━ write('\x1B[%d;%df' % (y, x))
9067     ┃   ┃   ┃   ┃   ┃   ┣━ print(value, end = '')
9068     ┃   ┃   ┃   ┃   ┃   ┣━ sys.stdout.flush()
9069     ┃   ┃   ┃   ┃   ┃   ┗━ sys.stdout.flush()
9070     ┃   ┃   ┃   ┃   ┣━ write('\x1B[%d;%df' % (y, x))
9071     ┃   ┃   ┃   ┃   ┗━ write('\x1B[%d;%df' % (y, x))
9072     ┃   ┃   ┃   ┣━ goto(x, y)
9073     ┃   ┃   ┃   ┣━ print(text, end = '')
9074     ┃   ┃   ┃   ┣━ sys.stdout.flush()
9075     ┃   ┃   ┃   ┗━ sys.stdout.flush()
9076     ┃   ┃   ┣━ print_at(x, y + i, " " * width)
9077     ┃   ┃   ┣━ for i in range(height):
9078     ┃   ┃   ┣━ print_at(x, y + i, " " * width)
9079     ┃   ┃   ┃   ┣━ goto(x, y)
9080     ┃   ┃   ┃   ┃   ┣━ write('\x1B[%d;%df' % (y, x))
9081     ┃   ┃   ┃   ┃   ┃   ┣━ print(value, end = '')
9082     ┃   ┃   ┃   ┃   ┃   ┣━ sys.stdout.flush()
9083     ┃   ┃   ┃   ┃   ┃   ┗━ sys.stdout.flush()
9084     ┃   ┃   ┃   ┃   ┣━ write('\x1B[%d;%df' % (y, x))
9085     ┃   ┃   ┃   ┃   ┗━ write('\x1B[%d;%df' % (y, x))
9086     ┃   ┃   ┃   ┣━ goto(x, y)
9087     ┃   ┃   ┃   ┣━ print(text, end = '')
9088     ┃   ┃   ┃   ┣━ sys.stdout.flush()
9089     ┃   ┃   ┃   ┗━ sys.stdout.flush()
9090     ┃   ┃   ┣━ print_at(x, y + i, " " * width)
9091     ┃   ┃   ┣━ for i in range(height):
9092     ┃   ┃   ┣━ print_at(x, y + i, " " * width)
9093     ┃   ┃   ┃   ┣━ goto(x, y)
9094     ┃   ┃   ┃   ┃   ┣━ write('\x1B[%d;%df' % (y, x))
9095     ┃   ┃   ┃   ┃   ┃   ┣━ print(value, end = '')
9096     ┃   ┃   ┃   ┃   ┃   ┣━ sys.stdout.flush()
9097     ┃   ┃   ┃   ┃   ┃   ┗━ sys.stdout.flush()
9098     ┃   ┃   ┃   ┃   ┣━ write('\x1B[%d;%df' % (y, x))
9099     ┃   ┃   ┃   ┃   ┗━ write('\x1B[%d;%df' % (y, x))
9100     ┃   ┃   ┃   ┣━ goto(x, y)
9101     ┃   ┃   ┃   ┣━ print(text, end = '')
9102     ┃   ┃   ┃   ┣━ sys.stdout.flush()
9103     ┃   ┃   ┃   ┗━ sys.stdout.flush()
9104     ┃   ┃   ┣━ print_at(x, y + i, " " * width)
9105     ┃   ┃   ┣━ for i in range(height):
9106     ┃   ┃   ┣━ print_at(x, y + i, " " * width)
9107     ┃   ┃   ┃   ┣━ goto(x, y)
9108     ┃   ┃   ┃   ┃   ┣━ write('\x1B[%d;%df' % (y, x))
9109     ┃   ┃   ┃   ┃   ┃   ┣━ print(value, end = '')
9110     ┃   ┃   ┃   ┃   ┃   ┣━ sys.stdout.flush()
9111     ┃   ┃   ┃   ┃   ┃   ┗━ sys.stdout.flush()
9112     ┃   ┃   ┃   ┃   ┣━ write('\x1B[%d;%df' % (y, x))
9113     ┃   ┃   ┃   ┃   ┗━ write('\x1B[%d;%df' % (y, x))
9114     ┃   ┃   ┃   ┣━ goto(x, y)
9115     ┃   ┃   ┃   ┣━ print(text, end = '')
9116     ┃   ┃   ┃   ┣━ sys.stdout.flush()
9117     ┃   ┃   ┃   ┗━ sys.stdout.flush()
9118     ┃   ┃   ┣━ print_at(x, y + i, " " * width)
9119     ┃   ┃   ┣━ for i in range(height):
9120     ┃   ┃   ┣━ print_at(x, y + i, " " * width)
9121     ┃   ┃   ┃   ┣━ goto(x, y)
9122     ┃   ┃   ┃   ┃   ┣━ write('\x1B[%d;%df' % (y, x))
9123     ┃   ┃   ┃   ┃   ┃   ┣━ print(value, end = '')
9124     ┃   ┃   ┃   ┃   ┃   ┣━ sys.stdout.flush()
9125     ┃   ┃   ┃   ┃   ┃   ┗━ sys.stdout.flush()
9126     ┃   ┃   ┃   ┃   ┣━ write('\x1B[%d;%df' % (y, x))
9127     ┃   ┃   ┃   ┃   ┗━ write('\x1B[%d;%df' % (y, x))
9128     ┃   ┃   ┃   ┣━ goto(x, y)
9129     ┃   ┃   ┃   ┣━ print(text, end = '')
9130     ┃   ┃   ┃   ┣━ sys.stdout.flush()
9131     ┃   ┃   ┃   ┗━ sys.stdout.flush()
9132     ┃   ┃   ┣━ print_at(x, y + i, " " * width)
9133     ┃   ┃   ┣━ for i in range(height):
9134     ┃   ┃   ┣━ print_at(x, y + i, " " * width)
9135     ┃   ┃   ┃   ┣━ goto(x, y)
9136     ┃   ┃   ┃   ┃   ┣━ write('\x1B[%d;%df' % (y, x))
9137     ┃   ┃   ┃   ┃   ┃   ┣━ print(value, end = '')
9138     ┃   ┃   ┃   ┃   ┃   ┣━ sys.stdout.flush()
9139     ┃   ┃   ┃   ┃   ┃   ┗━ sys.stdout.flush()
9140     ┃   ┃   ┃   ┃   ┣━ write('\x1B[%d;%df' % (y, x))
9141     ┃   ┃   ┃   ┃   ┗━ write('\x1B[%d;%df' % (y, x))
9142     ┃   ┃   ┃   ┣━ goto(x, y)
9143     ┃   ┃   ┃   ┣━ print(text, end = '')
9144     ┃   ┃   ┃   ┣━ sys.stdout.flush()
9145     ┃   ┃   ┃   ┗━ sys.stdout.flush()
9146     ┃   ┃   ┣━ print_at(x, y + i, " " * width)
9147     ┃   ┃   ┣━ for i in range(height):
9148     ┃   ┃   ┣━ print_at(x, y + i, " " * width)
9149     ┃   ┃   ┃   ┣━ goto(x, y)
9150     ┃   ┃   ┃   ┃   ┣━ write('\x1B[%d;%df' % (y, x))
9151     ┃   ┃   ┃   ┃   ┃   ┣━ print(value, end = '')
9152     ┃   ┃   ┃   ┃   ┃   ┣━ sys.stdout.flush()
9153     ┃   ┃   ┃   ┃   ┃   ┗━ sys.stdout.flush()
9154     ┃   ┃   ┃   ┃   ┣━ write('\x1B[%d;%df' % (y, x))
9155     ┃   ┃   ┃   ┃   ┗━ write('\x1B[%d;%df' % (y, x))
9156     ┃   ┃   ┃   ┣━ goto(x, y)
9157     ┃   ┃   ┃   ┣━ print(text, end = '')
9158     ┃   ┃   ┃   ┣━ sys.stdout.flush()
9159     ┃   ┃   ┃   ┗━ sys.stdout.flush()
9160     ┃   ┃   ┣━ print_at(x, y + i, " " * width)
9161     ┃   ┃   ┣━ for i in range(height):
9162     ┃   ┃   ┣━ print_at(x, y + i, " " * width)
9163     ┃   ┃   ┃   ┣━ goto(x, y)
9164     ┃   ┃   ┃   ┃   ┣━ write('\x1B[%d;%df' % (y, x))
9165     ┃   ┃   ┃   ┃   ┃   ┣━ print(value, end = '')
9166     ┃   ┃   ┃   ┃   ┃   ┣━ sys.stdout.flush()
9167     ┃   ┃   ┃   ┃   ┃   ┗━ sys.stdout.flush()
9168     ┃   ┃   ┃   ┃   ┣━ write('\x1B[%d;%df' % (y, x))
9169     ┃   ┃   ┃   ┃   ┗━ write('\x1B[%d;%df' % (y, x))
9170     ┃   ┃   ┃   ┣━ goto(x, y)
9171     ┃   ┃   ┃   ┣━ print(text, end = '')
9172     ┃   ┃   ┃   ┣━ sys.stdout.flush()
9173     ┃   ┃   ┃   ┗━ sys.stdout.flush()
9174     ┃   ┃   ┣━ print_at(x, y + i, " " * width)
9175     ┃   ┃   ┣━ for i in range(height):
9176     ┃   ┃   ┣━ print_at(x, y + i, " " * width)
9177     ┃   ┃   ┃   ┣━ goto(x, y)
9178     ┃   ┃   ┃   ┃   ┣━ write('\x1B[%d;%df' % (y, x))
9179     ┃   ┃   ┃   ┃   ┃   ┣━ print(value, end = '')
9180     ┃   ┃   ┃   ┃   ┃   ┣━ sys.stdout.flush()
9181     ┃   ┃   ┃   ┃   ┃   ┗━ sys.stdout.flush()
9182     ┃   ┃   ┃   ┃   ┣━ write('\x1B[%d;%df' % (y, x))
9183     ┃   ┃   ┃   ┃   ┗━ write('\x1B[%d;%df' % (y, x))
9184     ┃   ┃   ┃   ┣━ goto(x, y)
9185     ┃   ┃   ┃   ┣━ print(text, end = '')
9186     ┃   ┃   ┃   ┣━ sys.stdout.flush()
9187     ┃   ┃   ┃   ┗━ sys.stdout.flush()
9188     ┃   ┃   ┣━ print_at(x, y + i, " " * width)
9189     ┃   ┃   ┣━ for i in range(height):
9190     ┃   ┃   ┣━ print_at(x, y + i, " " * width)
9191     ┃   ┃   ┃   ┣━ goto(x, y)
9192     ┃   ┃   ┃   ┃   ┣━ write('\x1B[%d;%df' % (y, x))
9193     ┃   ┃   ┃   ┃   ┃   ┣━ print(value, end = '')
9194     ┃   ┃   ┃   ┃   ┃   ┣━ sys.stdout.flush()
9195     ┃   ┃   ┃   ┃   ┃   ┗━ sys.stdout.flush()
9196     ┃   ┃   ┃   ┃   ┣━ write('\x1B[%d;%df' % (y, x))
9197     ┃   ┃   ┃   ┃   ┗━ write('\x1B[%d;%df' % (y, x))
9198     ┃   ┃   ┃   ┣━ goto(x, y)
9199     ┃   ┃   ┃   ┣━ print(text, end = '')
9200     ┃   ┃   ┃   ┣━ sys.stdout.flush()
9201     ┃   ┃   ┃   ┗━ sys.stdout.flush()
9202     ┃   ┃   ┣━ print_at(x, y + i, " " * width)
9203     ┃   ┃   ┣━ for i in range(height):
9204     ┃   ┃   ┣━ print_at(x, y + i, " " * width)
9205     ┃   ┃   ┃   ┣━ goto(x, y)
9206     ┃   ┃   ┃   ┃   ┣━ write('\x1B[%d;%df' % (y, x))
9207     ┃   ┃   ┃   ┃   ┃   ┣━ print(value, end = '')
9208     ┃   ┃   ┃   ┃   ┃   ┣━ sys.stdout.flush()
9209     ┃   ┃   ┃   ┃   ┃   ┗━ sys.stdout.flush()
9210     ┃   ┃   ┃   ┃   ┣━ write('\x1B[%d;%df' % (y, x))
9211     ┃   ┃   ┃   ┃   ┗━ write('\x1B[%d;%df' % (y, x))
9212     ┃   ┃   ┃   ┣━ goto(x, y)
9213     ┃   ┃   ┃   ┣━ print(text, end = '')
9214     ┃   ┃   ┃   ┣━ sys.stdout.flush()
9215     ┃   ┃   ┃   ┗━ sys.stdout.flush()
9216     ┃   ┃   ┣━ print_at(x, y + i, " " * width)
9217     ┃   ┃   ┣━ for i in range(height):
9218     ┃   ┃   ┣━ print_at(x, y + i, " " * width)
9219     ┃   ┃   ┃   ┣━ goto(x, y)
9220     ┃   ┃   ┃   ┃   ┣━ write('\x1B[%d;%df' % (y, x))
9221     ┃   ┃   ┃   ┃   ┃   ┣━ print(value, end = '')
9222     ┃   ┃   ┃   ┃   ┃   ┣━ sys.stdout.flush()
9223     ┃   ┃   ┃   ┃   ┃   ┗━ sys.stdout.flush()
9224     ┃   ┃   ┃   ┃   ┣━ write('\x1B[%d;%df' % (y, x))
9225     ┃   ┃   ┃   ┃   ┗━ write('\x1B[%d;%df' % (y, x))
9226     ┃   ┃   ┃   ┣━ goto(x, y)
9227     ┃   ┃   ┃   ┣━ print(text, end = '')
9228     ┃   ┃   ┃   ┣━ sys.stdout.flush()
9229     ┃   ┃   ┃   ┗━ sys.stdout.flush()
9230     ┃   ┃   ┣━ print_at(x, y + i, " " * width)
9231     ┃   ┃   ┣━ for i in range(height):
9232     ┃   ┃   ┣━ print_at(x, y + i, " " * width)
9233     ┃   ┃   ┃   ┣━ goto(x, y)
9234     ┃   ┃   ┃   ┃   ┣━ write('\x1B[%d;%df' % (y, x))
9235     ┃   ┃   ┃   ┃   ┃   ┣━ print(value, end = '')
9236     ┃   ┃   ┃   ┃   ┃   ┣━ sys.stdout.flush()
9237     ┃   ┃   ┃   ┃   ┃   ┗━ sys.stdout.flush()
9238     ┃   ┃   ┃   ┃   ┣━ write('\x1B[%d;%df' % (y, x))
9239     ┃   ┃   ┃   ┃   ┗━ write('\x1B[%d;%df' % (y, x))
9240     ┃   ┃   ┃   ┣━ goto(x, y)
9241     ┃   ┃   ┃   ┣━ print(text, end = '')
9242     ┃   ┃   ┃   ┣━ sys.stdout.flush()
9243     ┃   ┃   ┃   ┗━ sys.stdout.flush()
9244     ┃   ┃   ┣━ print_at(x, y + i, " " * width)
9245     ┃   ┃   ┣━ for i in range(height):
9246     ┃   ┃   ┣━ print_at(x, y + i, " " * width)
9247     ┃   ┃   ┃   ┣━ goto(x, y)
9248     ┃   ┃   ┃   ┃   ┣━ write('\x1B[%d;%df' % (y, x))
9249     ┃   ┃   ┃   ┃   ┃   ┣━ print(value, end = '')
9250     ┃   ┃   ┃   ┃   ┃   ┣━ sys.stdout.flush()
9251     ┃   ┃   ┃   ┃   ┃   ┗━ sys.stdout.flush()
9252     ┃   ┃   ┃   ┃   ┣━ write('\x1B[%d;%df' % (y, x))
9253     ┃   ┃   ┃   ┃   ┗━ write('\x1B[%d;%df' % (y, x))
9254     ┃   ┃   ┃   ┣━ goto(x, y)
9255     ┃   ┃   ┃   ┣━ print(text, end = '')
9256     ┃   ┃   ┃   ┣━ sys.stdout.flush()
9257     ┃   ┃   ┃   ┗━ sys.stdout.flush()
9258     ┃   ┃   ┣━ print_at(x, y + i, " " * width)
9259     ┃   ┃   ┣━ for i in range(height):
9260     ┃   ┃   ┣━ print_at(x, y + i, " " * width)
9261     ┃   ┃   ┃   ┣━ goto(x, y)
9262     ┃   ┃   ┃   ┃   ┣━ write('\x1B[%d;%df' % (y, x))
9263     ┃   ┃   ┃   ┃   ┃   ┣━ print(value, end = '')
9264     ┃   ┃   ┃   ┃   ┃   ┣━ sys.stdout.flush()
9265     ┃   ┃   ┃   ┃   ┃   ┗━ sys.stdout.flush()
9266     ┃   ┃   ┃   ┃   ┣━ write('\x1B[%d;%df' % (y, x))
9267     ┃   ┃   ┃   ┃   ┗━ write('\x1B[%d;%df' % (y, x))
9268     ┃   ┃   ┃   ┣━ goto(x, y)
9269     ┃   ┃   ┃   ┣━ print(text, end = '')
9270     ┃   ┃   ┃   ┣━ sys.stdout.flush()
9271     ┃   ┃   ┃   ┗━ sys.stdout.flush()
9272     ┃   ┃   ┣━ print_at(x, y + i, " " * width)
9273     ┃   ┃   ┣━ for i in range(height):
9274     ┃   ┃   ┣━ print_at(x, y + i, " " * width)
9275     ┃   ┃   ┃   ┣━ goto(x, y)
9276     ┃   ┃   ┃   ┃   ┣━ write('\x1B[%d;%df' % (y, x))
9277     ┃   ┃   ┃   ┃   ┃   ┣━ print(value, end = '')
9278     ┃   ┃   ┃   ┃   ┃   ┣━ sys.stdout.flush()
9279     ┃   ┃   ┃   ┃   ┃   ┗━ sys.stdout.flush()
9280     ┃   ┃   ┃   ┃   ┣━ write('\x1B[%d;%df' % (y, x))
9281     ┃   ┃   ┃   ┃   ┗━ write('\x1B[%d;%df' % (y, x))
9282     ┃   ┃   ┃   ┣━ goto(x, y)
9283     ┃   ┃   ┃   ┣━ print(text, end = '')
9284     ┃   ┃   ┃   ┣━ sys.stdout.flush()
9285     ┃   ┃   ┃   ┗━ sys.stdout.flush()
9286     ┃   ┃   ┣━ print_at(x, y + i, " " * width)
9287     ┃   ┃   ┣━ for i in range(height):
9288     ┃   ┃   ┣━ print_at(x, y + i, " " * width)
9289     ┃   ┃   ┃   ┣━ goto(x, y)
9290     ┃   ┃   ┃   ┃   ┣━ write('\x1B[%d;%df' % (y, x))
9291     ┃   ┃   ┃   ┃   ┃   ┣━ print(value, end = '')
9292     ┃   ┃   ┃   ┃   ┃   ┣━ sys.stdout.flush()
9293     ┃   ┃   ┃   ┃   ┃   ┗━ sys.stdout.flush()
9294     ┃   ┃   ┃   ┃   ┣━ write('\x1B[%d;%df' % (y, x))
9295     ┃   ┃   ┃   ┃   ┗━ write('\x1B[%d;%df' % (y, x))
9296     ┃   ┃   ┃   ┣━ goto(x, y)
9297     ┃   ┃   ┃   ┣━ print(text, end = '')
9298     ┃   ┃   ┃   ┣━ sys.stdout.flush()
9299     ┃   ┃   ┃   ┗━ sys.stdout.flush()
9300     ┃   ┃   ┣━ print_at(x, y + i, " " * width)
9301     ┃   ┃   ┣━ for i in range(height):
9302     ┃   ┃   ┣━ print_at(x, y + i, " " * width)
9303     ┃   ┃   ┃   ┣━ goto(x, y)
9304     ┃   ┃   ┃   ┃   ┣━ write('\x1B[%d;%df' % (y, x))
9305     ┃   ┃   ┃   ┃   ┃   ┣━ print(value, end = '')
9306     ┃   ┃   ┃   ┃   ┃   ┣━ sys.stdout.flush()
9307     ┃   ┃   ┃   ┃   ┃   ┗━ sys.stdout.flush()
9308     ┃   ┃   ┃   ┃   ┣━ write('\x1B[%d;%df' % (y, x))
9309     ┃   ┃   ┃   ┃   ┗━ write('\x1B[%d;%df' % (y, x))
9310     ┃   ┃   ┃   ┣━ goto(x, y)
9311     ┃   ┃   ┃   ┣━ print(text, end = '')
9312     ┃   ┃   ┃   ┣━ sys.stdout.flush()
9313     ┃   ┃   ┃   ┗━ sys.stdout.flush()
9314     ┃   ┃   ┣━ print_at(x, y + i, " " * width)
9315     ┃   ┃   ┣━ for i in range(height):
9316     ┃   ┃   ┣━ print_at(x, y + i, " " * width)
9317     ┃   ┃   ┃   ┣━ goto(x, y)
9318     ┃   ┃   ┃   ┃   ┣━ write('\x1B[%d;%df' % (y, x))
9319     ┃   ┃   ┃   ┃   ┃   ┣━ print(value, end = '')
9320     ┃   ┃   ┃   ┃   ┃   ┣━ sys.stdout.flush()
9321     ┃   ┃   ┃   ┃   ┃   ┗━ sys.stdout.flush()
9322     ┃   ┃   ┃   ┃   ┣━ write('\x1B[%d;%df' % (y, x))
9323     ┃   ┃   ┃   ┃   ┗━ write('\x1B[%d;%df' % (y, x))
9324     ┃   ┃   ┃   ┣━ goto(x, y)
9325     ┃   ┃   ┃   ┣━ print(text, end = '')
9326     ┃   ┃   ┃   ┣━ sys.stdout.flush()
9327     ┃   ┃   ┃   ┗━ sys.stdout.flush()
9328     ┃   ┃   ┣━ print_at(x, y + i, " " * width)
9329     ┃   ┃   ┣━ for i in range(height):
9330     ┃   ┃   ┣━ print_at(x, y + i, " " * width)
9331     ┃   ┃   ┃   ┣━ goto(x, y)
9332     ┃   ┃   ┃   ┃   ┣━ write('\x1B[%d;%df' % (y, x))
9333     ┃   ┃   ┃   ┃   ┃   ┣━ print(value, end = '')
9334     ┃   ┃   ┃   ┃   ┃   ┣━ sys.stdout.flush()
9335     ┃   ┃   ┃   ┃   ┃   ┗━ sys.stdout.flush()
9336     ┃   ┃   ┃   ┃   ┣━ write('\x1B[%d;%df' % (y, x))
9337     ┃   ┃   ┃   ┃   ┗━ write('\x1B[%d;%df' % (y, x))
9338     ┃   ┃   ┃   ┣━ goto(x, y)
9339     ┃   ┃   ┃   ┣━ print(text, end = '')
9340     ┃   ┃   ┃   ┣━ sys.stdout.flush()
9341     ┃   ┃   ┃   ┗━ sys.stdout.flush()
9342     ┃   ┃   ┣━ print_at(x, y + i, " " * width)
9343     ┃   ┃   ┣━ for i in range(height):
9344     ┃   ┃   ┣━ print_at(x, y + i, " " * width)
9345     ┃   ┃   ┃   ┣━ goto(x, y)
9346     ┃   ┃   ┃   ┃   ┣━ write('\x1B[%d;%df' % (y, x))
9347     ┃   ┃   ┃   ┃   ┃   ┣━ print(value, end = '')
9348     ┃   ┃   ┃   ┃   ┃   ┣━ sys.stdout.flush()
9349     ┃   ┃   ┃   ┃   ┃   ┗━ sys.stdout.flush()
9350     ┃   ┃   ┃   ┃   ┣━ write('\x1B[%d;%df' % (y, x))
9351     ┃   ┃   ┃   ┃   ┗━ write('\x1B[%d;%df' % (y, x))
9352     ┃   ┃   ┃   ┣━ goto(x, y)
9353     ┃   ┃   ┃   ┣━ print(text, end = '')
9354     ┃   ┃   ┃   ┣━ sys.stdout.flush()
9355     ┃   ┃   ┃   ┗━ sys.stdout.flush()
9356     ┃   ┃   ┣━ print_at(x, y + i, " " * width)
9357     ┃   ┃   ┣━ for i in range(height):
9358     ┃   ┃   ┣━ print_at(x, y + i, " " * width)
9359     ┃   ┃   ┃   ┣━ goto(x, y)
9360     ┃   ┃   ┃   ┃   ┣━ write('\x1B[%d;%df' % (y, x))
9361     ┃   ┃   ┃   ┃   ┃   ┣━ print(value, end = '')
9362     ┃   ┃   ┃   ┃   ┃   ┣━ sys.stdout.flush()
9363     ┃   ┃   ┃   ┃   ┃   ┗━ sys.stdout.flush()
9364     ┃   ┃   ┃   ┃   ┣━ write('\x1B[%d;%df' % (y, x))
9365     ┃   ┃   ┃   ┃   ┗━ write('\x1B[%d;%df' % (y, x))
9366     ┃   ┃   ┃   ┣━ goto(x, y)
9367     ┃   ┃   ┃   ┣━ print(text, end = '')
9368     ┃   ┃   ┃   ┣━ sys.stdout.flush()
9369     ┃   ┃   ┃   ┗━ sys.stdout.flush()
9370     ┃   ┃   ┣━ print_at(x, y + i, " " * width)
9371     ┃   ┃   ┣━ for i in range(height):
9372     ┃   ┃   ┣━ print_at(x, y + i, " " * width)
9373     ┃   ┃   ┃   ┣━ goto(x, y)
9374     ┃   ┃   ┃   ┃   ┣━ write('\x1B[%d;%df' % (y, x))
9375     ┃   ┃   ┃   ┃   ┃   ┣━ print(value, end = '')
9376     ┃   ┃   ┃   ┃   ┃   ┣━ sys.stdout.flush()
9377     ┃   ┃   ┃   ┃   ┃   ┗━ sys.stdout.flush()
9378     ┃   ┃   ┃   ┃   ┣━ write('\x1B[%d;%df' % (y, x))
9379     ┃   ┃   ┃   ┃   ┗━ write('\x1B[%d;%df' % (y, x))
9380     ┃   ┃   ┃   ┣━ goto(x, y)
9381     ┃   ┃   ┃   ┣━ print(text, end = '')
9382     ┃   ┃   ┃   ┣━ sys.stdout.flush()
9383     ┃   ┃   ┃   ┗━ sys.stdout.flush()
9384     ┃   ┃   ┣━ print_at(x, y + i, " " * width)
9385     ┃   ┃   ┣━ for i in range(height):
9386     ┃   ┃   ┣━ print_at(x, y + i, " " * width)
9387     ┃   ┃   ┃   ┣━ goto(x, y)
9388     ┃   ┃   ┃   ┃   ┣━ write('\x1B[%d;%df' % (y, x))
9389     ┃   ┃   ┃   ┃   ┃   ┣━ print(value, end = '')
9390     ┃   ┃   ┃   ┃   ┃   ┣━ sys.stdout.flush()
9391     ┃   ┃   ┃   ┃   ┃   ┗━ sys.stdout.flush()
9392     ┃   ┃   ┃   ┃   ┣━ write('\x1B[%d;%df' % (y, x))
9393     ┃   ┃   ┃   ┃   ┗━ write('\x1B[%d;%df' % (y, x))
9394     ┃   ┃   ┃   ┣━ goto(x, y)
9395     ┃   ┃   ┃   ┣━ print(text, end = '')
9396     ┃   ┃   ┃   ┣━ sys.stdout.flush()
9397     ┃   ┃   ┃   ┗━ sys.stdout.flush()
9398     ┃   ┃   ┣━ print_at(x, y + i, " " * width)
9399     ┃   ┃   ┣━ for i in range(height):
9400     ┃   ┃   ┣━ print_at(x, y + i, " " * width)
9401     ┃   ┃   ┃   ┣━ goto(x, y)
9402     ┃   ┃   ┃   ┃   ┣━ write('\x1B[%d;%df' % (y, x))
9403     ┃   ┃   ┃   ┃   ┃   ┣━ print(value, end = '')
9404     ┃   ┃   ┃   ┃   ┃   ┣━ sys.stdout.flush()
9405     ┃   ┃   ┃   ┃   ┃   ┗━ sys.stdout.flush()
9406     ┃   ┃   ┃   ┃   ┣━ write('\x1B[%d;%df' % (y, x))
9407     ┃   ┃   ┃   ┃   ┗━ write('\x1B[%d;%df' % (y, x))
9408     ┃   ┃   ┃   ┣━ goto(x, y)
9409     ┃   ┃   ┃   ┣━ print(text, end = '')
9410     ┃   ┃   ┃   ┣━ sys.stdout.flush()
9411     ┃   ┃   ┃   ┗━ sys.stdout.flush()
9412     ┃   ┃   ┣━ print_at(x, y + i, " " * width)
9413     ┃   ┃   ┣━ for i in range(height):
9414     ┃   ┃   ┣━ print_at(x, y + i, " " * width)
9415     ┃   ┃   ┃   ┣━ goto(x, y)
9416     ┃   ┃   ┃   ┃   ┣━ write('\x1B[%d;%df' % (y, x))
9417     ┃   ┃   ┃   ┃   ┃   ┣━ print(value, end = '')
9418     ┃   ┃   ┃   ┃   ┃   ┣━ sys.stdout.flush()
9419     ┃   ┃   ┃   ┃   ┃   ┗━ sys.stdout.flush()
9420     ┃   ┃   ┃   ┃   ┣━ write('\x1B[%d;%df' % (y, x))
9421     ┃   ┃   ┃   ┃   ┗━ write('\x1B[%d;%df' % (y, x))
9422     ┃   ┃   ┃   ┣━ goto(x, y)
9423     ┃   ┃   ┃   ┣━ print(text, end = '')
9424     ┃   ┃   ┃   ┣━ sys.stdout.flush()
9425     ┃   ┃   ┃   ┗━ sys.stdout.flush()
9426     ┃   ┃   ┣━ print_at(x, y + i, " " * width)
9427     ┃   ┃   ┣━ for i in range(height):
9428     ┃   ┃   ┗━ for i in range(height):
9429     ┃   ┣━ clear_rect(1, 1, screen_width, screen_height)
9430     ┃   ┣━ draw(root_element)
9431     ┃   ┃   ┣━ termsize = os.get_terminal_size()
9432     ┃   ┃   ┣━ screen_width = termsize.columns
9433     ┃   ┃   ┣━ screen_height = termsize.lines
9434     ┃   ┃   ┣━ indent = "  " * level
9435     ┃   ┃   ┣━ if not is_placed(element):
9436     ┃   ┃   ┃   ┣━ return hasattr(element, "x") and hasattr(element, "y") \
9437     ┃   ┃   ┃   ┣━ and hasattr(element, "width") and hasattr(element, "height")
9438     ┃   ┃   ┃   ┣━ return hasattr(element, "x") and hasattr(element, "y") \
9439     ┃   ┃   ┃   ┣━ and hasattr(element, "width") and hasattr(element, "height")
9440     ┃   ┃   ┃   ┣━ return hasattr(element, "x") and hasattr(element, "y") \
9441     ┃   ┃   ┃   ┗━ return hasattr(element, "x") and hasattr(element, "y") \
9442     ┃   ┃   ┣━ if not is_placed(element):
9443     ┃   ┃   ┣━ elif element.x <= screen_width and element.y <= screen_height:
9444     ┃   ┃   ┣━ if hasattr(element, "draw"):
9445     ┃   ┃   ┣━ element.draw()
9446     ┃   ┃   ┃   ┣━ clear_rect(self.x, self.y, self.width, self.height)
9447     ┃   ┃   ┃   ┃   ┣━ for i in range(height):
9448     ┃   ┃   ┃   ┃   ┣━ print_at(x, y + i, " " * width)
9449     ┃   ┃   ┃   ┃   ┃   ┣━ goto(x, y)
9450     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ write('\x1B[%d;%df' % (y, x))
9451     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ print(value, end = '')
9452     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ sys.stdout.flush()
9453     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ sys.stdout.flush()
9454     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ write('\x1B[%d;%df' % (y, x))
9455     ┃   ┃   ┃   ┃   ┃   ┃   ┗━ write('\x1B[%d;%df' % (y, x))
9456     ┃   ┃   ┃   ┃   ┃   ┣━ goto(x, y)
9457     ┃   ┃   ┃   ┃   ┃   ┣━ print(text, end = '')
9458     ┃   ┃   ┃   ┃   ┃   ┣━ sys.stdout.flush()
9459     ┃   ┃   ┃   ┃   ┃   ┗━ sys.stdout.flush()
9460     ┃   ┃   ┃   ┃   ┣━ print_at(x, y + i, " " * width)
9461     ┃   ┃   ┃   ┃   ┣━ for i in range(height):
9462     ┃   ┃   ┃   ┃   ┣━ print_at(x, y + i, " " * width)
9463     ┃   ┃   ┃   ┃   ┃   ┣━ goto(x, y)
9464     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ write('\x1B[%d;%df' % (y, x))
9465     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ print(value, end = '')
9466     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ sys.stdout.flush()
9467     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ sys.stdout.flush()
9468     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ write('\x1B[%d;%df' % (y, x))
9469     ┃   ┃   ┃   ┃   ┃   ┃   ┗━ write('\x1B[%d;%df' % (y, x))
9470     ┃   ┃   ┃   ┃   ┃   ┣━ goto(x, y)
9471     ┃   ┃   ┃   ┃   ┃   ┣━ print(text, end = '')
9472     ┃   ┃   ┃   ┃   ┃   ┣━ sys.stdout.flush()
9473     ┃   ┃   ┃   ┃   ┃   ┗━ sys.stdout.flush()
9474     ┃   ┃   ┃   ┃   ┣━ print_at(x, y + i, " " * width)
9475     ┃   ┃   ┃   ┃   ┣━ for i in range(height):
9476     ┃   ┃   ┃   ┃   ┣━ print_at(x, y + i, " " * width)
9477     ┃   ┃   ┃   ┃   ┃   ┣━ goto(x, y)
9478     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ write('\x1B[%d;%df' % (y, x))
9479     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ print(value, end = '')
9480     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ sys.stdout.flush()
9481     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ sys.stdout.flush()
9482     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ write('\x1B[%d;%df' % (y, x))
9483     ┃   ┃   ┃   ┃   ┃   ┃   ┗━ write('\x1B[%d;%df' % (y, x))
9484     ┃   ┃   ┃   ┃   ┃   ┣━ goto(x, y)
9485     ┃   ┃   ┃   ┃   ┃   ┣━ print(text, end = '')
9486     ┃   ┃   ┃   ┃   ┃   ┣━ sys.stdout.flush()
9487     ┃   ┃   ┃   ┃   ┃   ┗━ sys.stdout.flush()
9488     ┃   ┃   ┃   ┃   ┣━ print_at(x, y + i, " " * width)
9489     ┃   ┃   ┃   ┃   ┣━ for i in range(height):
9490     ┃   ┃   ┃   ┃   ┣━ print_at(x, y + i, " " * width)
9491     ┃   ┃   ┃   ┃   ┃   ┣━ goto(x, y)
9492     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ write('\x1B[%d;%df' % (y, x))
9493     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ print(value, end = '')
9494     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ sys.stdout.flush()
9495     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ sys.stdout.flush()
9496     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ write('\x1B[%d;%df' % (y, x))
9497     ┃   ┃   ┃   ┃   ┃   ┃   ┗━ write('\x1B[%d;%df' % (y, x))
9498     ┃   ┃   ┃   ┃   ┃   ┣━ goto(x, y)
9499     ┃   ┃   ┃   ┃   ┃   ┣━ print(text, end = '')
9500     ┃   ┃   ┃   ┃   ┃   ┣━ sys.stdout.flush()
9501     ┃   ┃   ┃   ┃   ┃   ┗━ sys.stdout.flush()
9502     ┃   ┃   ┃   ┃   ┣━ print_at(x, y + i, " " * width)
9503     ┃   ┃   ┃   ┃   ┣━ for i in range(height):
9504     ┃   ┃   ┃   ┃   ┣━ print_at(x, y + i, " " * width)
9505     ┃   ┃   ┃   ┃   ┃   ┣━ goto(x, y)
9506     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ write('\x1B[%d;%df' % (y, x))
9507     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ print(value, end = '')
9508     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ sys.stdout.flush()
9509     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ sys.stdout.flush()
9510     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ write('\x1B[%d;%df' % (y, x))
9511     ┃   ┃   ┃   ┃   ┃   ┃   ┗━ write('\x1B[%d;%df' % (y, x))
9512     ┃   ┃   ┃   ┃   ┃   ┣━ goto(x, y)
9513     ┃   ┃   ┃   ┃   ┃   ┣━ print(text, end = '')
9514     ┃   ┃   ┃   ┃   ┃   ┣━ sys.stdout.flush()
9515     ┃   ┃   ┃   ┃   ┃   ┗━ sys.stdout.flush()
9516     ┃   ┃   ┃   ┃   ┣━ print_at(x, y + i, " " * width)
9517     ┃   ┃   ┃   ┃   ┣━ for i in range(height):
9518     ┃   ┃   ┃   ┃   ┣━ print_at(x, y + i, " " * width)
9519     ┃   ┃   ┃   ┃   ┃   ┣━ goto(x, y)
9520     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ write('\x1B[%d;%df' % (y, x))
9521     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ print(value, end = '')
9522     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ sys.stdout.flush()
9523     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ sys.stdout.flush()
9524     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ write('\x1B[%d;%df' % (y, x))
9525     ┃   ┃   ┃   ┃   ┃   ┃   ┗━ write('\x1B[%d;%df' % (y, x))
9526     ┃   ┃   ┃   ┃   ┃   ┣━ goto(x, y)
9527     ┃   ┃   ┃   ┃   ┃   ┣━ print(text, end = '')
9528     ┃   ┃   ┃   ┃   ┃   ┣━ sys.stdout.flush()
9529     ┃   ┃   ┃   ┃   ┃   ┗━ sys.stdout.flush()
9530     ┃   ┃   ┃   ┃   ┣━ print_at(x, y + i, " " * width)
9531     ┃   ┃   ┃   ┃   ┣━ for i in range(height):
9532     ┃   ┃   ┃   ┃   ┗━ for i in range(height):
9533     ┃   ┃   ┃   ┣━ clear_rect(self.x, self.y, self.width, self.height)
9534     ┃   ┃   ┃   ┗━ clear_rect(self.x, self.y, self.width, self.height)
9535     ┃   ┃   ┣━ element.draw()
9536     ┃   ┃   ┣━ if hasattr(element, "children"):
9537     ┃   ┃   ┣━ for child in element.children:
9538     ┃   ┃   ┣━ draw(child, level + 1)
9539     ┃   ┃   ┃   ┣━ termsize = os.get_terminal_size()
9540     ┃   ┃   ┃   ┣━ screen_width = termsize.columns
9541     ┃   ┃   ┃   ┣━ screen_height = termsize.lines
9542     ┃   ┃   ┃   ┣━ indent = "  " * level
9543     ┃   ┃   ┃   ┣━ if not is_placed(element):
9544     ┃   ┃   ┃   ┃   ┣━ return hasattr(element, "x") and hasattr(element, "y") \
9545     ┃   ┃   ┃   ┃   ┣━ and hasattr(element, "width") and hasattr(element, "height")
9546     ┃   ┃   ┃   ┃   ┣━ return hasattr(element, "x") and hasattr(element, "y") \
9547     ┃   ┃   ┃   ┃   ┣━ and hasattr(element, "width") and hasattr(element, "height")
9548     ┃   ┃   ┃   ┃   ┣━ return hasattr(element, "x") and hasattr(element, "y") \
9549     ┃   ┃   ┃   ┃   ┗━ return hasattr(element, "x") and hasattr(element, "y") \
9550     ┃   ┃   ┃   ┣━ if not is_placed(element):
9551     ┃   ┃   ┃   ┣━ elif element.x <= screen_width and element.y <= screen_height:
9552     ┃   ┃   ┃   ┣━ if hasattr(element, "draw"):
9553     ┃   ┃   ┃   ┣━ element.draw()
9554     ┃   ┃   ┃   ┃   ┣━ display = self.text[0:self.width].ljust(self.width, " ")
9555     ┃   ┃   ┃   ┃   ┣━ print_at(self.x, self.y, display)
9556     ┃   ┃   ┃   ┃   ┃   ┣━ goto(x, y)
9557     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ write('\x1B[%d;%df' % (y, x))
9558     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ print(value, end = '')
9559     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ sys.stdout.flush()
9560     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ sys.stdout.flush()
9561     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ write('\x1B[%d;%df' % (y, x))
9562     ┃   ┃   ┃   ┃   ┃   ┃   ┗━ write('\x1B[%d;%df' % (y, x))
9563     ┃   ┃   ┃   ┃   ┃   ┣━ goto(x, y)
9564     ┃   ┃   ┃   ┃   ┃   ┣━ print(text, end = '')
9565     ┃   ┃   ┃   ┃   ┃   ┣━ sys.stdout.flush()
9566     ┃   ┃   ┃   ┃   ┃   ┗━ sys.stdout.flush()
9567     ┃   ┃   ┃   ┃   ┣━ print_at(self.x, self.y, display)
9568     ┃   ┃   ┃   ┃   ┗━ print_at(self.x, self.y, display)
9569     ┃   ┃   ┃   ┣━ element.draw()
9570     ┃   ┃   ┃   ┣━ if hasattr(element, "children"):
9571     ┃   ┃   ┃   ┣━ draw(child, level + 1)
9572     ┃   ┃   ┃   ┗━ draw(child, level + 1)
9573     ┃   ┃   ┣━ for child in element.children:
9574     ┃   ┃   ┣━ draw(child, level + 1)
9575     ┃   ┃   ┃   ┣━ termsize = os.get_terminal_size()
9576     ┃   ┃   ┃   ┣━ screen_width = termsize.columns
9577     ┃   ┃   ┃   ┣━ screen_height = termsize.lines
9578     ┃   ┃   ┃   ┣━ indent = "  " * level
9579     ┃   ┃   ┃   ┣━ if not is_placed(element):
9580     ┃   ┃   ┃   ┃   ┣━ return hasattr(element, "x") and hasattr(element, "y") \
9581     ┃   ┃   ┃   ┃   ┣━ and hasattr(element, "width") and hasattr(element, "height")
9582     ┃   ┃   ┃   ┃   ┣━ return hasattr(element, "x") and hasattr(element, "y") \
9583     ┃   ┃   ┃   ┃   ┣━ and hasattr(element, "width") and hasattr(element, "height")
9584     ┃   ┃   ┃   ┃   ┣━ return hasattr(element, "x") and hasattr(element, "y") \
9585     ┃   ┃   ┃   ┃   ┗━ return hasattr(element, "x") and hasattr(element, "y") \
9586     ┃   ┃   ┃   ┣━ if not is_placed(element):
9587     ┃   ┃   ┃   ┣━ elif element.x <= screen_width and element.y <= screen_height:
9588     ┃   ┃   ┃   ┣━ if hasattr(element, "draw"):
9589     ┃   ┃   ┃   ┣━ element.draw()
9590     ┃   ┃   ┃   ┃   ┣━ clear_rect(self.x, self.y, self.width, self.height)
9591     ┃   ┃   ┃   ┃   ┃   ┣━ for i in range(height):
9592     ┃   ┃   ┃   ┃   ┃   ┣━ print_at(x, y + i, " " * width)
9593     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ goto(x, y)
9594     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ write('\x1B[%d;%df' % (y, x))
9595     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ print(value, end = '')
9596     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ sys.stdout.flush()
9597     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ sys.stdout.flush()
9598     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ write('\x1B[%d;%df' % (y, x))
9599     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ write('\x1B[%d;%df' % (y, x))
9600     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ goto(x, y)
9601     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ print(text, end = '')
9602     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ sys.stdout.flush()
9603     ┃   ┃   ┃   ┃   ┃   ┃   ┗━ sys.stdout.flush()
9604     ┃   ┃   ┃   ┃   ┃   ┣━ print_at(x, y + i, " " * width)
9605     ┃   ┃   ┃   ┃   ┃   ┣━ for i in range(height):
9606     ┃   ┃   ┃   ┃   ┃   ┣━ print_at(x, y + i, " " * width)
9607     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ goto(x, y)
9608     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ write('\x1B[%d;%df' % (y, x))
9609     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ print(value, end = '')
9610     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ sys.stdout.flush()
9611     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ sys.stdout.flush()
9612     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ write('\x1B[%d;%df' % (y, x))
9613     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ write('\x1B[%d;%df' % (y, x))
9614     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ goto(x, y)
9615     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ print(text, end = '')
9616     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ sys.stdout.flush()
9617     ┃   ┃   ┃   ┃   ┃   ┃   ┗━ sys.stdout.flush()
9618     ┃   ┃   ┃   ┃   ┃   ┣━ print_at(x, y + i, " " * width)
9619     ┃   ┃   ┃   ┃   ┃   ┣━ for i in range(height):
9620     ┃   ┃   ┃   ┃   ┃   ┣━ print_at(x, y + i, " " * width)
9621     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ goto(x, y)
9622     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ write('\x1B[%d;%df' % (y, x))
9623     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ print(value, end = '')
9624     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ sys.stdout.flush()
9625     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ sys.stdout.flush()
9626     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ write('\x1B[%d;%df' % (y, x))
9627     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ write('\x1B[%d;%df' % (y, x))
9628     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ goto(x, y)
9629     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ print(text, end = '')
9630     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ sys.stdout.flush()
9631     ┃   ┃   ┃   ┃   ┃   ┃   ┗━ sys.stdout.flush()
9632     ┃   ┃   ┃   ┃   ┃   ┣━ print_at(x, y + i, " " * width)
9633     ┃   ┃   ┃   ┃   ┃   ┣━ for i in range(height):
9634     ┃   ┃   ┃   ┃   ┃   ┗━ for i in range(height):
9635     ┃   ┃   ┃   ┃   ┣━ clear_rect(self.x, self.y, self.width, self.height)
9636     ┃   ┃   ┃   ┃   ┗━ clear_rect(self.x, self.y, self.width, self.height)
9637     ┃   ┃   ┃   ┣━ element.draw()
9638     ┃   ┃   ┃   ┣━ if hasattr(element, "children"):
9639     ┃   ┃   ┃   ┣━ for child in element.children:
9640     ┃   ┃   ┃   ┣━ draw(child, level + 1)
9641     ┃   ┃   ┃   ┃   ┣━ termsize = os.get_terminal_size()
9642     ┃   ┃   ┃   ┃   ┣━ screen_width = termsize.columns
9643     ┃   ┃   ┃   ┃   ┣━ screen_height = termsize.lines
9644     ┃   ┃   ┃   ┃   ┣━ indent = "  " * level
9645     ┃   ┃   ┃   ┃   ┣━ if not is_placed(element):
9646     ┃   ┃   ┃   ┃   ┃   ┣━ return hasattr(element, "x") and hasattr(element, "y") \
9647     ┃   ┃   ┃   ┃   ┃   ┣━ and hasattr(element, "width") and hasattr(element, "height")
9648     ┃   ┃   ┃   ┃   ┃   ┣━ return hasattr(element, "x") and hasattr(element, "y") \
9649     ┃   ┃   ┃   ┃   ┃   ┣━ and hasattr(element, "width") and hasattr(element, "height")
9650     ┃   ┃   ┃   ┃   ┃   ┣━ return hasattr(element, "x") and hasattr(element, "y") \
9651     ┃   ┃   ┃   ┃   ┃   ┗━ return hasattr(element, "x") and hasattr(element, "y") \
9652     ┃   ┃   ┃   ┃   ┣━ if not is_placed(element):
9653     ┃   ┃   ┃   ┃   ┣━ elif element.x <= screen_width and element.y <= screen_height:
9654     ┃   ┃   ┃   ┃   ┣━ if hasattr(element, "draw"):
9655     ┃   ┃   ┃   ┃   ┣━ pass
9656     ┃   ┃   ┃   ┃   ┣━ if hasattr(element, "children"):
9657     ┃   ┃   ┃   ┃   ┣━ for child in element.children:
9658     ┃   ┃   ┃   ┃   ┣━ draw(child, level + 1)
9659     ┃   ┃   ┃   ┃   ┃   ┣━ termsize = os.get_terminal_size()
9660     ┃   ┃   ┃   ┃   ┃   ┣━ screen_width = termsize.columns
9661     ┃   ┃   ┃   ┃   ┃   ┣━ screen_height = termsize.lines
9662     ┃   ┃   ┃   ┃   ┃   ┣━ indent = "  " * level
9663     ┃   ┃   ┃   ┃   ┃   ┣━ if not is_placed(element):
9664     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ return hasattr(element, "x") and hasattr(element, "y") \
9665     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ and hasattr(element, "width") and hasattr(element, "height")
9666     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ return hasattr(element, "x") and hasattr(element, "y") \
9667     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ and hasattr(element, "width") and hasattr(element, "height")
9668     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ return hasattr(element, "x") and hasattr(element, "y") \
9669     ┃   ┃   ┃   ┃   ┃   ┃   ┗━ return hasattr(element, "x") and hasattr(element, "y") \
9670     ┃   ┃   ┃   ┃   ┃   ┣━ if not is_placed(element):
9671     ┃   ┃   ┃   ┃   ┃   ┣━ elif element.x <= screen_width and element.y <= screen_height:
9672     ┃   ┃   ┃   ┃   ┃   ┣━ if hasattr(element, "draw"):
9673     ┃   ┃   ┃   ┃   ┃   ┣━ element.draw()
9674     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ if self.color:
9675     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ print_at(self.x, self.y, "┏" + ("━" * (self.width - 2)) + "┓")
9676     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ goto(x, y)
9677     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ write('\x1B[%d;%df' % (y, x))
9678     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ print(value, end = '')
9679     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ sys.stdout.flush()
9680     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ sys.stdout.flush()
9681     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ write('\x1B[%d;%df' % (y, x))
9682     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ write('\x1B[%d;%df' % (y, x))
9683     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ goto(x, y)
9684     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ print(text, end = '')
9685     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ sys.stdout.flush()
9686     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ sys.stdout.flush()
9687     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ print_at(self.x, self.y, "┏" + ("━" * (self.width - 2)) + "┓")
9688     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ for i in range(self.height - 2):
9689     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ print_at(self.x, self.y + i + 1, "┃")
9690     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ goto(x, y)
9691     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ write('\x1B[%d;%df' % (y, x))
9692     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ print(value, end = '')
9693     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ sys.stdout.flush()
9694     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ sys.stdout.flush()
9695     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ write('\x1B[%d;%df' % (y, x))
9696     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ write('\x1B[%d;%df' % (y, x))
9697     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ goto(x, y)
9698     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ print(text, end = '')
9699     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ sys.stdout.flush()
9700     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ sys.stdout.flush()
9701     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ print_at(self.x, self.y + i + 1, "┃")
9702     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ print_at(self.x + self.width - 1, self.y + i + 1, "┃")
9703     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ goto(x, y)
9704     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ write('\x1B[%d;%df' % (y, x))
9705     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ print(value, end = '')
9706     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ sys.stdout.flush()
9707     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ sys.stdout.flush()
9708     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ write('\x1B[%d;%df' % (y, x))
9709     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ write('\x1B[%d;%df' % (y, x))
9710     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ goto(x, y)
9711     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ print(text, end = '')
9712     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ sys.stdout.flush()
9713     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ sys.stdout.flush()
9714     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ print_at(self.x + self.width - 1, self.y + i + 1, "┃")
9715     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ for i in range(self.height - 2):
9716     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ print_at(self.x, self.y + self.height - 1, "┗" + ("━" * (self.width - 2)) + "┛")
9717     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ goto(x, y)
9718     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ write('\x1B[%d;%df' % (y, x))
9719     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ print(value, end = '')
9720     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ sys.stdout.flush()
9721     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ sys.stdout.flush()
9722     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ write('\x1B[%d;%df' % (y, x))
9723     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ write('\x1B[%d;%df' % (y, x))
9724     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ goto(x, y)
9725     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ print(text, end = '')
9726     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ sys.stdout.flush()
9727     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ sys.stdout.flush()
9728     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ print_at(self.x, self.y + self.height - 1, "┗" + ("━" * (self.width - 2)) + "┛")
9729     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ if self.color:
9730     ┃   ┃   ┃   ┃   ┃   ┃   ┗━ if self.color:
9731     ┃   ┃   ┃   ┃   ┃   ┣━ element.draw()
9732     ┃   ┃   ┃   ┃   ┃   ┣━ if hasattr(element, "children"):
9733     ┃   ┃   ┃   ┃   ┃   ┣━ for child in element.children:
9734     ┃   ┃   ┃   ┃   ┃   ┣━ draw(child, level + 1)
9735     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ termsize = os.get_terminal_size()
9736     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ screen_width = termsize.columns
9737     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ screen_height = termsize.lines
9738     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ indent = "  " * level
9739     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ if not is_placed(element):
9740     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ return hasattr(element, "x") and hasattr(element, "y") \
9741     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ and hasattr(element, "width") and hasattr(element, "height")
9742     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ return hasattr(element, "x") and hasattr(element, "y") \
9743     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ and hasattr(element, "width") and hasattr(element, "height")
9744     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ return hasattr(element, "x") and hasattr(element, "y") \
9745     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ return hasattr(element, "x") and hasattr(element, "y") \
9746     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ if not is_placed(element):
9747     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ elif element.x <= screen_width and element.y <= screen_height:
9748     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ if hasattr(element, "draw"):
9749     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ element.draw()
9750     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ display = self.text[0:self.width].ljust(self.width, " ")
9751     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ print_at(self.x, self.y, display)
9752     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ goto(x, y)
9753     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ write('\x1B[%d;%df' % (y, x))
9754     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ print(value, end = '')
9755     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ sys.stdout.flush()
9756     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ sys.stdout.flush()
9757     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ write('\x1B[%d;%df' % (y, x))
9758     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ write('\x1B[%d;%df' % (y, x))
9759     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ goto(x, y)
9760     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ print(text, end = '')
9761     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ sys.stdout.flush()
9762     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ sys.stdout.flush()
9763     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ print_at(self.x, self.y, display)
9764     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ print_at(self.x, self.y, display)
9765     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ element.draw()
9766     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ if hasattr(element, "children"):
9767     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ draw(child, level + 1)
9768     ┃   ┃   ┃   ┃   ┃   ┃   ┗━ draw(child, level + 1)
9769     ┃   ┃   ┃   ┃   ┃   ┣━ for child in element.children:
9770     ┃   ┃   ┃   ┃   ┃   ┣━ draw(child, level + 1)
9771     ┃   ┃   ┃   ┃   ┃   ┗━ draw(child, level + 1)
9772     ┃   ┃   ┃   ┃   ┣━ for child in element.children:
9773     ┃   ┃   ┃   ┃   ┣━ draw(child, level + 1)
9774     ┃   ┃   ┃   ┃   ┗━ draw(child, level + 1)
9775     ┃   ┃   ┃   ┣━ for child in element.children:
9776     ┃   ┃   ┃   ┣━ draw(child, level + 1)
9777     ┃   ┃   ┃   ┃   ┣━ termsize = os.get_terminal_size()
9778     ┃   ┃   ┃   ┃   ┣━ screen_width = termsize.columns
9779     ┃   ┃   ┃   ┃   ┣━ screen_height = termsize.lines
9780     ┃   ┃   ┃   ┃   ┣━ indent = "  " * level
9781     ┃   ┃   ┃   ┃   ┣━ if not is_placed(element):
9782     ┃   ┃   ┃   ┃   ┃   ┣━ return hasattr(element, "x") and hasattr(element, "y") \
9783     ┃   ┃   ┃   ┃   ┃   ┣━ and hasattr(element, "width") and hasattr(element, "height")
9784     ┃   ┃   ┃   ┃   ┃   ┣━ return hasattr(element, "x") and hasattr(element, "y") \
9785     ┃   ┃   ┃   ┃   ┃   ┣━ and hasattr(element, "width") and hasattr(element, "height")
9786     ┃   ┃   ┃   ┃   ┃   ┣━ return hasattr(element, "x") and hasattr(element, "y") \
9787     ┃   ┃   ┃   ┃   ┃   ┗━ return hasattr(element, "x") and hasattr(element, "y") \
9788     ┃   ┃   ┃   ┃   ┣━ if not is_placed(element):
9789     ┃   ┃   ┃   ┃   ┣━ elif element.x <= screen_width and element.y <= screen_height:
9790     ┃   ┃   ┃   ┃   ┣━ if hasattr(element, "draw"):
9791     ┃   ┃   ┃   ┃   ┣━ pass
9792     ┃   ┃   ┃   ┃   ┣━ if hasattr(element, "children"):
9793     ┃   ┃   ┃   ┃   ┣━ for child in element.children:
9794     ┃   ┃   ┃   ┃   ┣━ draw(child, level + 1)
9795     ┃   ┃   ┃   ┃   ┃   ┣━ termsize = os.get_terminal_size()
9796     ┃   ┃   ┃   ┃   ┃   ┣━ screen_width = termsize.columns
9797     ┃   ┃   ┃   ┃   ┃   ┣━ screen_height = termsize.lines
9798     ┃   ┃   ┃   ┃   ┃   ┣━ indent = "  " * level
9799     ┃   ┃   ┃   ┃   ┃   ┣━ if not is_placed(element):
9800     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ return hasattr(element, "x") and hasattr(element, "y") \
9801     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ and hasattr(element, "width") and hasattr(element, "height")
9802     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ return hasattr(element, "x") and hasattr(element, "y") \
9803     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ and hasattr(element, "width") and hasattr(element, "height")
9804     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ return hasattr(element, "x") and hasattr(element, "y") \
9805     ┃   ┃   ┃   ┃   ┃   ┃   ┗━ return hasattr(element, "x") and hasattr(element, "y") \
9806     ┃   ┃   ┃   ┃   ┃   ┣━ if not is_placed(element):
9807     ┃   ┃   ┃   ┃   ┃   ┣━ elif element.x <= screen_width and element.y <= screen_height:
9808     ┃   ┃   ┃   ┃   ┃   ┣━ if hasattr(element, "draw"):
9809     ┃   ┃   ┃   ┃   ┃   ┣━ element.draw()
9810     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ if self.color:
9811     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ print_at(self.x, self.y, "┏" + ("━" * (self.width - 2)) + "┓")
9812     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ goto(x, y)
9813     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ write('\x1B[%d;%df' % (y, x))
9814     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ print(value, end = '')
9815     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ sys.stdout.flush()
9816     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ sys.stdout.flush()
9817     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ write('\x1B[%d;%df' % (y, x))
9818     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ write('\x1B[%d;%df' % (y, x))
9819     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ goto(x, y)
9820     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ print(text, end = '')
9821     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ sys.stdout.flush()
9822     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ sys.stdout.flush()
9823     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ print_at(self.x, self.y, "┏" + ("━" * (self.width - 2)) + "┓")
9824     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ for i in range(self.height - 2):
9825     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ print_at(self.x, self.y + i + 1, "┃")
9826     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ goto(x, y)
9827     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ write('\x1B[%d;%df' % (y, x))
9828     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ print(value, end = '')
9829     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ sys.stdout.flush()
9830     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ sys.stdout.flush()
9831     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ write('\x1B[%d;%df' % (y, x))
9832     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ write('\x1B[%d;%df' % (y, x))
9833     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ goto(x, y)
9834     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ print(text, end = '')
9835     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ sys.stdout.flush()
9836     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ sys.stdout.flush()
9837     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ print_at(self.x, self.y + i + 1, "┃")
9838     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ print_at(self.x + self.width - 1, self.y + i + 1, "┃")
9839     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ goto(x, y)
9840     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ write('\x1B[%d;%df' % (y, x))
9841     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ print(value, end = '')
9842     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ sys.stdout.flush()
9843     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ sys.stdout.flush()
9844     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ write('\x1B[%d;%df' % (y, x))
9845     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ write('\x1B[%d;%df' % (y, x))
9846     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ goto(x, y)
9847     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ print(text, end = '')
9848     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ sys.stdout.flush()
9849     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ sys.stdout.flush()
9850     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ print_at(self.x + self.width - 1, self.y + i + 1, "┃")
9851     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ for i in range(self.height - 2):
9852     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ print_at(self.x, self.y + self.height - 1, "┗" + ("━" * (self.width - 2)) + "┛")
9853     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ goto(x, y)
9854     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ write('\x1B[%d;%df' % (y, x))
9855     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ print(value, end = '')
9856     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ sys.stdout.flush()
9857     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ sys.stdout.flush()
9858     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ write('\x1B[%d;%df' % (y, x))
9859     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ write('\x1B[%d;%df' % (y, x))
9860     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ goto(x, y)
9861     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ print(text, end = '')
9862     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ sys.stdout.flush()
9863     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ sys.stdout.flush()
9864     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ print_at(self.x, self.y + self.height - 1, "┗" + ("━" * (self.width - 2)) + "┛")
9865     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ if self.color:
9866     ┃   ┃   ┃   ┃   ┃   ┃   ┗━ if self.color:
9867     ┃   ┃   ┃   ┃   ┃   ┣━ element.draw()
9868     ┃   ┃   ┃   ┃   ┃   ┣━ if hasattr(element, "children"):
9869     ┃   ┃   ┃   ┃   ┃   ┣━ for child in element.children:
9870     ┃   ┃   ┃   ┃   ┃   ┣━ draw(child, level + 1)
9871     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ termsize = os.get_terminal_size()
9872     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ screen_width = termsize.columns
9873     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ screen_height = termsize.lines
9874     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ indent = "  " * level
9875     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ if not is_placed(element):
9876     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ return hasattr(element, "x") and hasattr(element, "y") \
9877     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ and hasattr(element, "width") and hasattr(element, "height")
9878     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ return hasattr(element, "x") and hasattr(element, "y") \
9879     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ and hasattr(element, "width") and hasattr(element, "height")
9880     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ return hasattr(element, "x") and hasattr(element, "y") \
9881     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ return hasattr(element, "x") and hasattr(element, "y") \
9882     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ if not is_placed(element):
9883     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ elif element.x <= screen_width and element.y <= screen_height:
9884     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ if hasattr(element, "draw"):
9885     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ element.draw()
9886     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ display = self.text[0:self.width].ljust(self.width, " ")
9887     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ print_at(self.x, self.y, display)
9888     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ goto(x, y)
9889     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ write('\x1B[%d;%df' % (y, x))
9890     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ print(value, end = '')
9891     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ sys.stdout.flush()
9892     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ sys.stdout.flush()
9893     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ write('\x1B[%d;%df' % (y, x))
9894     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ write('\x1B[%d;%df' % (y, x))
9895     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ goto(x, y)
9896     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ print(text, end = '')
9897     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ sys.stdout.flush()
9898     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ sys.stdout.flush()
9899     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ print_at(self.x, self.y, display)
9900     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ print_at(self.x, self.y, display)
9901     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ element.draw()
9902     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ if hasattr(element, "children"):
9903     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ draw(child, level + 1)
9904     ┃   ┃   ┃   ┃   ┃   ┃   ┗━ draw(child, level + 1)
9905     ┃   ┃   ┃   ┃   ┃   ┣━ for child in element.children:
9906     ┃   ┃   ┃   ┃   ┃   ┣━ draw(child, level + 1)
9907     ┃   ┃   ┃   ┃   ┃   ┗━ draw(child, level + 1)
9908     ┃   ┃   ┃   ┃   ┣━ for child in element.children:
9909     ┃   ┃   ┃   ┃   ┣━ draw(child, level + 1)
9910     ┃   ┃   ┃   ┃   ┗━ draw(child, level + 1)
9911     ┃   ┃   ┃   ┣━ for child in element.children:
9912     ┃   ┃   ┃   ┣━ draw(child, level + 1)
9913     ┃   ┃   ┃   ┗━ draw(child, level + 1)
9914     ┃   ┃   ┣━ for child in element.children:
9915     ┃   ┃   ┣━ draw(child, level + 1)
9916     ┃   ┃   ┃   ┣━ termsize = os.get_terminal_size()
9917     ┃   ┃   ┃   ┣━ screen_width = termsize.columns
9918     ┃   ┃   ┃   ┣━ screen_height = termsize.lines
9919     ┃   ┃   ┃   ┣━ indent = "  " * level
9920     ┃   ┃   ┃   ┣━ if not is_placed(element):
9921     ┃   ┃   ┃   ┃   ┣━ return hasattr(element, "x") and hasattr(element, "y") \
9922     ┃   ┃   ┃   ┃   ┣━ and hasattr(element, "width") and hasattr(element, "height")
9923     ┃   ┃   ┃   ┃   ┣━ return hasattr(element, "x") and hasattr(element, "y") \
9924     ┃   ┃   ┃   ┃   ┣━ and hasattr(element, "width") and hasattr(element, "height")
9925     ┃   ┃   ┃   ┃   ┣━ return hasattr(element, "x") and hasattr(element, "y") \
9926     ┃   ┃   ┃   ┃   ┗━ return hasattr(element, "x") and hasattr(element, "y") \
9927     ┃   ┃   ┃   ┣━ if not is_placed(element):
9928     ┃   ┃   ┃   ┣━ elif element.x <= screen_width and element.y <= screen_height:
9929     ┃   ┃   ┃   ┣━ if hasattr(element, "draw"):
9930     ┃   ┃   ┃   ┣━ element.draw()
9931     ┃   ┃   ┃   ┃   ┣━ if len(list(self.child_nodes)) == 0:
9932     ┃   ┃   ┃   ┃   ┃   ┣━ return filter(lambda c: c != self.label, self.children)
9933     ┃   ┃   ┃   ┃   ┃   ┗━ return filter(lambda c: c != self.label, self.children)
9934     ┃   ┃   ┃   ┃   ┣━ if len(list(self.child_nodes)) == 0:
9935     ┃   ┃   ┃   ┃   ┃   ┣━ return filter(lambda c: c != self.label, self.children)
9936     ┃   ┃   ┃   ┃   ┃   ┣━ return filter(lambda c: c != self.label, self.children)
9937     ┃   ┃   ┃   ┃   ┃   ┣━ return filter(lambda c: c != self.label, self.children)
9938     ┃   ┃   ┃   ┃   ┃   ┣━ return filter(lambda c: c != self.label, self.children)
9939     ┃   ┃   ┃   ┃   ┃   ┣━ return filter(lambda c: c != self.label, self.children)
9940     ┃   ┃   ┃   ┃   ┃   ┣━ return filter(lambda c: c != self.label, self.children)
9941     ┃   ┃   ┃   ┃   ┃   ┣━ return filter(lambda c: c != self.label, self.children)
9942     ┃   ┃   ┃   ┃   ┃   ┗━ return filter(lambda c: c != self.label, self.children)
9943     ┃   ┃   ┃   ┃   ┣━ if len(list(self.child_nodes)) == 0:
9944     ┃   ┃   ┃   ┃   ┣━ elif self.expanded:
9945     ┃   ┃   ┃   ┃   ┣━ print_at(self.x, self.y, "▶")
9946     ┃   ┃   ┃   ┃   ┃   ┣━ goto(x, y)
9947     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ write('\x1B[%d;%df' % (y, x))
9948     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ print(value, end = '')
9949     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ sys.stdout.flush()
9950     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ sys.stdout.flush()
9951     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ write('\x1B[%d;%df' % (y, x))
9952     ┃   ┃   ┃   ┃   ┃   ┃   ┗━ write('\x1B[%d;%df' % (y, x))
9953     ┃   ┃   ┃   ┃   ┃   ┣━ goto(x, y)
9954     ┃   ┃   ┃   ┃   ┃   ┣━ print(text, end = '')
9955     ┃   ┃   ┃   ┃   ┃   ┣━ sys.stdout.flush()
9956     ┃   ┃   ┃   ┃   ┃   ┗━ sys.stdout.flush()
9957     ┃   ┃   ┃   ┃   ┣━ print_at(self.x, self.y, "▶")
9958     ┃   ┃   ┃   ┃   ┣━ 
9959     ┃   ┃   ┃   ┃   ┗━ 
9960     ┃   ┃   ┃   ┣━ element.draw()
9961     ┃   ┃   ┃   ┣━ if hasattr(element, "children"):
9962     ┃   ┃   ┃   ┣━ for child in element.children:
9963     ┃   ┃   ┃   ┣━ draw(child, level + 1)
9964     ┃   ┃   ┃   ┃   ┣━ termsize = os.get_terminal_size()
9965     ┃   ┃   ┃   ┃   ┣━ screen_width = termsize.columns
9966     ┃   ┃   ┃   ┃   ┣━ screen_height = termsize.lines
9967     ┃   ┃   ┃   ┃   ┣━ indent = "  " * level
9968     ┃   ┃   ┃   ┃   ┣━ if not is_placed(element):
9969     ┃   ┃   ┃   ┃   ┃   ┣━ return hasattr(element, "x") and hasattr(element, "y") \
9970     ┃   ┃   ┃   ┃   ┃   ┣━ and hasattr(element, "width") and hasattr(element, "height")
9971     ┃   ┃   ┃   ┃   ┃   ┣━ return hasattr(element, "x") and hasattr(element, "y") \
9972     ┃   ┃   ┃   ┃   ┃   ┣━ and hasattr(element, "width") and hasattr(element, "height")
9973     ┃   ┃   ┃   ┃   ┃   ┣━ return hasattr(element, "x") and hasattr(element, "y") \
9974     ┃   ┃   ┃   ┃   ┃   ┗━ return hasattr(element, "x") and hasattr(element, "y") \
9975     ┃   ┃   ┃   ┃   ┣━ if not is_placed(element):
9976     ┃   ┃   ┃   ┃   ┣━ elif element.x <= screen_width and element.y <= screen_height:
9977     ┃   ┃   ┃   ┃   ┣━ if hasattr(element, "draw"):
9978     ┃   ┃   ┃   ┃   ┣━ element.draw()
9979     ┃   ┃   ┃   ┃   ┃   ┣━ display = self.text[0:self.width].ljust(self.width, " ")
9980     ┃   ┃   ┃   ┃   ┃   ┣━ print_at(self.x, self.y, display)
9981     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ goto(x, y)
9982     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ write('\x1B[%d;%df' % (y, x))
9983     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ print(value, end = '')
9984     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ sys.stdout.flush()
9985     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ sys.stdout.flush()
9986     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ write('\x1B[%d;%df' % (y, x))
9987     ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ write('\x1B[%d;%df' % (y, x))
9988     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ goto(x, y)
9989     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ print(text, end = '')
9990     ┃   ┃   ┃   ┃   ┃   ┃   ┣━ sys.stdout.flush()
9991     ┃   ┃   ┃   ┃   ┃   ┃   ┗━ sys.stdout.flush()
9992     ┃   ┃   ┃   ┃   ┃   ┣━ print_at(self.x, self.y, display)
9993     ┃   ┃   ┃   ┃   ┃   ┗━ print_at(self.x, self.y, display)
9994     ┃   ┃   ┃   ┃   ┣━ element.draw()
9995     ┃   ┃   ┃   ┃   ┣━ if hasattr(element, "children"):
9996     ┃   ┃   ┃   ┃   ┣━ draw(child, level + 1)
9997     ┃   ┃   ┃   ┃   ┗━ draw(child, level + 1)
9998     ┃   ┃   ┃   ┣━ for child in element.children:
9999     ┃   ┃   ┃   ┣━ draw(child, level + 1)
10000    ┃   ┃   ┃   ┃   ┣━ termsize = os.get_terminal_size()
10001    ┃   ┃   ┃   ┃   ┣━ screen_width = termsize.columns
10002    ┃   ┃   ┃   ┃   ┣━ screen_height = termsize.lines
10003    ┃   ┃   ┃   ┃   ┣━ indent = "  " * level
10004    ┃   ┃   ┃   ┃   ┣━ if not is_placed(element):
10005    ┃   ┃   ┃   ┃   ┃   ┣━ return hasattr(element, "x") and hasattr(element, "y") \
10006    ┃   ┃   ┃   ┃   ┃   ┗━ return hasattr(element, "x") and hasattr(element, "y") \
10007    ┃   ┃   ┃   ┃   ┣━ if not is_placed(element):
10008    ┃   ┃   ┃   ┃   ┣━ log(indent + "not placed")
10009    ┃   ┃   ┃   ┃   ┃   ┣━ logfile.write(text + "\n")
10010    ┃   ┃   ┃   ┃   ┃   ┣━ logfile.flush()
10011    ┃   ┃   ┃   ┃   ┃   ┗━ logfile.flush()
10012    ┃   ┃   ┃   ┃   ┣━ log(indent + "not placed")
10013    ┃   ┃   ┃   ┃   ┣━ pass
10014    ┃   ┃   ┃   ┃   ┗━ pass
10015    ┃   ┃   ┃   ┣━ draw(child, level + 1)
10016    ┃   ┃   ┃   ┣━ for child in element.children:
10017    ┃   ┃   ┃   ┣━ draw(child, level + 1)
10018    ┃   ┃   ┃   ┃   ┣━ termsize = os.get_terminal_size()
10019    ┃   ┃   ┃   ┃   ┣━ screen_width = termsize.columns
10020    ┃   ┃   ┃   ┃   ┣━ screen_height = termsize.lines
10021    ┃   ┃   ┃   ┃   ┣━ indent = "  " * level
10022    ┃   ┃   ┃   ┃   ┣━ if not is_placed(element):
10023    ┃   ┃   ┃   ┃   ┃   ┣━ return hasattr(element, "x") and hasattr(element, "y") \
10024    ┃   ┃   ┃   ┃   ┃   ┗━ return hasattr(element, "x") and hasattr(element, "y") \
10025    ┃   ┃   ┃   ┃   ┣━ if not is_placed(element):
10026    ┃   ┃   ┃   ┃   ┣━ log(indent + "not placed")
10027    ┃   ┃   ┃   ┃   ┃   ┣━ logfile.write(text + "\n")
10028    ┃   ┃   ┃   ┃   ┃   ┣━ logfile.flush()
10029    ┃   ┃   ┃   ┃   ┃   ┗━ logfile.flush()
10030    ┃   ┃   ┃   ┃   ┣━ log(indent + "not placed")
10031    ┃   ┃   ┃   ┃   ┣━ pass
10032    ┃   ┃   ┃   ┃   ┗━ pass
10033    ┃   ┃   ┃   ┣━ draw(child, level + 1)
10034    ┃   ┃   ┃   ┣━ for child in element.children:
10035    ┃   ┃   ┃   ┣━ draw(child, level + 1)
10036    ┃   ┃   ┃   ┃   ┣━ termsize = os.get_terminal_size()
10037    ┃   ┃   ┃   ┃   ┣━ screen_width = termsize.columns
10038    ┃   ┃   ┃   ┃   ┣━ screen_height = termsize.lines
10039    ┃   ┃   ┃   ┃   ┣━ indent = "  " * level
10040    ┃   ┃   ┃   ┃   ┣━ if not is_placed(element):
10041    ┃   ┃   ┃   ┃   ┃   ┣━ return hasattr(element, "x") and hasattr(element, "y") \
10042    ┃   ┃   ┃   ┃   ┃   ┗━ return hasattr(element, "x") and hasattr(element, "y") \
10043    ┃   ┃   ┃   ┃   ┣━ if not is_placed(element):
10044    ┃   ┃   ┃   ┃   ┣━ log(indent + "not placed")
10045    ┃   ┃   ┃   ┃   ┃   ┣━ logfile.write(text + "\n")
10046    ┃   ┃   ┃   ┃   ┃   ┣━ logfile.flush()
10047    ┃   ┃   ┃   ┃   ┃   ┗━ logfile.flush()
10048    ┃   ┃   ┃   ┃   ┣━ log(indent + "not placed")
10049    ┃   ┃   ┃   ┃   ┣━ pass
10050    ┃   ┃   ┃   ┃   ┗━ pass
10051    ┃   ┃   ┃   ┣━ draw(child, level + 1)
10052    ┃   ┃   ┃   ┣━ for child in element.children:
10053    ┃   ┃   ┃   ┣━ draw(child, level + 1)
10054    ┃   ┃   ┃   ┗━ draw(child, level + 1)
10055    ┃   ┃   ┣━ for child in element.children:
10056    ┃   ┃   ┣━ draw(child, level + 1)
10057    ┃   ┃   ┃   ┣━ termsize = os.get_terminal_size()
10058    ┃   ┃   ┃   ┣━ screen_width = termsize.columns
10059    ┃   ┃   ┃   ┣━ screen_height = termsize.lines
10060    ┃   ┃   ┃   ┣━ indent = "  " * level
10061    ┃   ┃   ┃   ┣━ if not is_placed(element):
10062    ┃   ┃   ┃   ┃   ┣━ return hasattr(element, "x") and hasattr(element, "y") \
10063    ┃   ┃   ┃   ┃   ┣━ and hasattr(element, "width") and hasattr(element, "height")
10064    ┃   ┃   ┃   ┃   ┣━ return hasattr(element, "x") and hasattr(element, "y") \
10065    ┃   ┃   ┃   ┃   ┣━ and hasattr(element, "width") and hasattr(element, "height")
10066    ┃   ┃   ┃   ┃   ┣━ return hasattr(element, "x") and hasattr(element, "y") \
10067    ┃   ┃   ┃   ┃   ┗━ return hasattr(element, "x") and hasattr(element, "y") \
10068    ┃   ┃   ┃   ┣━ if not is_placed(element):
10069    ┃   ┃   ┃   ┣━ elif element.x <= screen_width and element.y <= screen_height:
10070    ┃   ┃   ┃   ┣━ if hasattr(element, "draw"):
10071    ┃   ┃   ┃   ┣━ element.draw()
10072    ┃   ┃   ┃   ┃   ┣━ display = self.text[0:self.width].ljust(self.width, " ")
10073    ┃   ┃   ┃   ┃   ┣━ print_at(self.x, self.y, display)
10074    ┃   ┃   ┃   ┃   ┃   ┣━ goto(x, y)
10075    ┃   ┃   ┃   ┃   ┃   ┃   ┣━ write('\x1B[%d;%df' % (y, x))
10076    ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ print(value, end = '')
10077    ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ sys.stdout.flush()
10078    ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ sys.stdout.flush()
10079    ┃   ┃   ┃   ┃   ┃   ┃   ┣━ write('\x1B[%d;%df' % (y, x))
10080    ┃   ┃   ┃   ┃   ┃   ┃   ┗━ write('\x1B[%d;%df' % (y, x))
10081    ┃   ┃   ┃   ┃   ┃   ┣━ goto(x, y)
10082    ┃   ┃   ┃   ┃   ┃   ┣━ print(text, end = '')
10083    ┃   ┃   ┃   ┃   ┃   ┣━ sys.stdout.flush()
10084    ┃   ┃   ┃   ┃   ┃   ┗━ sys.stdout.flush()
10085    ┃   ┃   ┃   ┃   ┣━ print_at(self.x, self.y, display)
10086    ┃   ┃   ┃   ┃   ┗━ print_at(self.x, self.y, display)
10087    ┃   ┃   ┃   ┣━ element.draw()
10088    ┃   ┃   ┃   ┣━ if hasattr(element, "children"):
10089    ┃   ┃   ┃   ┣━ draw(child, level + 1)
10090    ┃   ┃   ┃   ┗━ draw(child, level + 1)
10091    ┃   ┃   ┣━ for child in element.children:
10092    ┃   ┃   ┣━ draw(child, level + 1)
10093    ┃   ┃   ┗━ draw(child, level + 1)
10094    ┃   ┣━ draw(root_element)
10095    ┃   ┣━ inp = get_input()
10096    ┃   ┃   ┣━ fl_state = fcntl.fcntl(sys.stdin.fileno(), fcntl.F_GETFL)
10097    ┃   ┃   ┣━ data = sys.stdin.read(1)
10098    ┃   ┃   ┃   ┣━ return (self.buffer, 0)
10099    ┃   ┃   ┃   ┣━ return (self.buffer, 0)
10100    ┃   ┃   ┃   ┣━ data = self.buffer + input
10101    ┃   ┃   ┃   ┣━ (result, consumed) = self._buffer_decode(data, self.errors, final)
10102    ┃   ┃   ┃   ┣━ self.buffer = data[consumed:]
10103    ┃   ┃   ┃   ┣━ return result
10104    ┃   ┃   ┃   ┗━ return result
10105    ┃   ┃   ┣━ data = sys.stdin.read(1)
10106    ┃   ┃   ┣━ if data == '\x1b':
10107    ┃   ┃   ┣━ fcntl.fcntl(sys.stdin.fileno(), fcntl.F_SETFL, fl_state | os.O_NONBLOCK)
10108    ┃   ┃   ┣━ codes = ""
10109    ┃   ┃   ┣━ ch = sys.stdin.read(1)
10110    ┃   ┃   ┣━ if ch == '':
10111    ┃   ┃   ┣━ codes += ch
10112    ┃   ┃   ┣━ ch = sys.stdin.read(1)
10113    ┃   ┃   ┣━ if ch == '':
10114    ┃   ┃   ┣━ codes += ch
10115    ┃   ┃   ┣━ ch = sys.stdin.read(1)
10116    ┃   ┃   ┣━ if ch == '':
10117    ┃   ┃   ┣━ codes += ch
10118    ┃   ┃   ┣━ ch = sys.stdin.read(1)
10119    ┃   ┃   ┣━ if ch == '':
10120    ┃   ┃   ┣━ codes += ch
10121    ┃   ┃   ┣━ ch = sys.stdin.read(1)
10122    ┃   ┃   ┣━ if ch == '':
10123    ┃   ┃   ┣━ codes += ch
10124    ┃   ┃   ┣━ ch = sys.stdin.read(1)
10125    ┃   ┃   ┃   ┣━ return (self.buffer, 0)
10126    ┃   ┃   ┃   ┣━ return (self.buffer, 0)
10127    ┃   ┃   ┃   ┣━ data = self.buffer + input
10128    ┃   ┃   ┃   ┣━ (result, consumed) = self._buffer_decode(data, self.errors, final)
10129    ┃   ┃   ┃   ┣━ self.buffer = data[consumed:]
10130    ┃   ┃   ┃   ┣━ return result
10131    ┃   ┃   ┃   ┗━ return result
10132    ┃   ┃   ┣━ ch = sys.stdin.read(1)
10133    ┃   ┃   ┣━ if ch == '':
10134    ┃   ┃   ┣━ codes += ch
10135    ┃   ┃   ┣━ ch = sys.stdin.read(1)
10136    ┃   ┃   ┣━ if ch == '':
10137    ┃   ┃   ┣━ codes += ch
10138    ┃   ┃   ┣━ ch = sys.stdin.read(1)
10139    ┃   ┃   ┣━ if ch == '':
10140    ┃   ┃   ┣━ codes += ch
10141    ┃   ┃   ┣━ ch = sys.stdin.read(1)
10142    ┃   ┃   ┣━ if ch == '':
10143    ┃   ┃   ┣━ codes += ch
10144    ┃   ┃   ┣━ ch = sys.stdin.read(1)
10145    ┃   ┃   ┣━ if ch == '':
10146    ┃   ┃   ┣━ codes += ch
10147    ┃   ┃   ┣━ ch = sys.stdin.read(1)
10148    ┃   ┃   ┣━ if ch == '':
10149    ┃   ┃   ┣━ codes += ch
10150    ┃   ┃   ┣━ ch = sys.stdin.read(1)
10151    ┃   ┃   ┃   ┣━ return (self.buffer, 0)
10152    ┃   ┃   ┃   ┣━ return (self.buffer, 0)
10153    ┃   ┃   ┃   ┣━ data = self.buffer + input
10154    ┃   ┃   ┃   ┣━ (result, consumed) = self._buffer_decode(data, self.errors, final)
10155    ┃   ┃   ┃   ┣━ self.buffer = data[consumed:]
10156    ┃   ┃   ┃   ┣━ return result
10157    ┃   ┃   ┃   ┗━ return result
10158    ┃   ┃   ┣━ ch = sys.stdin.read(1)
10159    ┃   ┃   ┣━ if ch == '':
10160    ┃   ┃   ┣━ fcntl.fcntl(sys.stdin.fileno(), fcntl.F_SETFL, fl_state)
10161    ┃   ┃   ┣━ break
10162    ┃   ┃   ┣━ data += codes
10163    ┃   ┃   ┣━ return data
10164    ┃   ┃   ┗━ return data
10165    ┃   ┣━ inp = get_input()
10166    ┃   ┣━ if inp == "\r":
10167    ┃   ┣━ if inp == "q":
10168    ┃   ┣━ events = decode_input(inp)
10169    ┃   ┃   ┣━ events = []
10170    ┃   ┃   ┣━ codes = list(map(ord, an_input))
10171    ┃   ┃   ┣━ while len(codes) > 0:
10172    ┃   ┃   ┣━ if codes[0:3] == [27, 91, 77]:
10173    ┃   ┃   ┣━ if codes[3] == 32:
10174    ┃   ┃   ┣━ event = Event("mousedown", x = codes[4] - 32, y = codes[5] - 32)
10175    ┃   ┃   ┃   ┣━ self.type = etype
10176    ┃   ┃   ┃   ┣━ self.__dict__.update(kwargs)
10177    ┃   ┃   ┃   ┗━ self.__dict__.update(kwargs)
10178    ┃   ┃   ┣━ event = Event("mousedown", x = codes[4] - 32, y = codes[5] - 32)
10179    ┃   ┃   ┣━ events.append(event)
10180    ┃   ┃   ┣━ codes = codes[6:]
10181    ┃   ┃   ┣━ while len(codes) > 0:
10182    ┃   ┃   ┣━ if codes[0:3] == [27, 91, 77]:
10183    ┃   ┃   ┣━ if codes[3] == 32:
10184    ┃   ┃   ┣━ elif codes[3] == 35:
10185    ┃   ┃   ┣━ x = codes[4] - 32
10186    ┃   ┃   ┣━ y = codes[5] - 32
10187    ┃   ┃   ┣━ event = Event("mouseup", x = x, y = y)
10188    ┃   ┃   ┃   ┣━ self.type = etype
10189    ┃   ┃   ┃   ┣━ self.__dict__.update(kwargs)
10190    ┃   ┃   ┃   ┗━ self.__dict__.update(kwargs)
10191    ┃   ┃   ┣━ event = Event("mouseup", x = x, y = y)
10192    ┃   ┃   ┣━ events.append(event)
10193    ┃   ┃   ┣━ codes = codes[6:]
10194    ┃   ┃   ┣━ while len(codes) > 0:
10195    ┃   ┃   ┣━ return events
10196    ┃   ┃   ┗━ return events
10197    ┃   ┣━ events = decode_input(inp)
10198    ┃   ┣━ for event in events:
10199    ┃   ┣━ fire(root_element, event)
10200    ┃   ┃   ┣━ indent = "  " * level
10201    ┃   ┃   ┣━ if hasattr(event, "x") and hasattr(event, "y"):
10202    ┃   ┃   ┣━ if is_placed(element) and contains(element, event.x, event.y):
10203    ┃   ┃   ┃   ┣━ return hasattr(element, "x") and hasattr(element, "y") \
10204    ┃   ┃   ┃   ┣━ and hasattr(element, "width") and hasattr(element, "height")
10205    ┃   ┃   ┃   ┣━ return hasattr(element, "x") and hasattr(element, "y") \
10206    ┃   ┃   ┃   ┣━ and hasattr(element, "width") and hasattr(element, "height")
10207    ┃   ┃   ┃   ┣━ return hasattr(element, "x") and hasattr(element, "y") \
10208    ┃   ┃   ┃   ┗━ return hasattr(element, "x") and hasattr(element, "y") \
10209    ┃   ┃   ┣━ if is_placed(element) and contains(element, event.x, event.y):
10210    ┃   ┃   ┃   ┣━ return element.x <= x and element.y <= y and element.x + element.width > x \
10211    ┃   ┃   ┃   ┣━ and element.y + element.height > y
10212    ┃   ┃   ┃   ┣━ return element.x <= x and element.y <= y and element.x + element.width > x \
10213    ┃   ┃   ┃   ┗━ return element.x <= x and element.y <= y and element.x + element.width > x \
10214    ┃   ┃   ┣━ if is_placed(element) and contains(element, event.x, event.y):
10215    ┃   ┃   ┣━ if hasattr(element, event.type):
10216    ┃   ┃   ┣━ if hasattr(element, "children"):
10217    ┃   ┃   ┣━ for child in element.children:
10218    ┃   ┃   ┣━ fire(child, event, level + 1)
10219    ┃   ┃   ┃   ┣━ indent = "  " * level
10220    ┃   ┃   ┃   ┣━ if hasattr(event, "x") and hasattr(event, "y"):
10221    ┃   ┃   ┃   ┣━ if is_placed(element) and contains(element, event.x, event.y):
10222    ┃   ┃   ┃   ┃   ┣━ return hasattr(element, "x") and hasattr(element, "y") \
10223    ┃   ┃   ┃   ┃   ┣━ and hasattr(element, "width") and hasattr(element, "height")
10224    ┃   ┃   ┃   ┃   ┣━ return hasattr(element, "x") and hasattr(element, "y") \
10225    ┃   ┃   ┃   ┃   ┣━ and hasattr(element, "width") and hasattr(element, "height")
10226    ┃   ┃   ┃   ┃   ┣━ return hasattr(element, "x") and hasattr(element, "y") \
10227    ┃   ┃   ┃   ┃   ┗━ return hasattr(element, "x") and hasattr(element, "y") \
10228    ┃   ┃   ┃   ┣━ if is_placed(element) and contains(element, event.x, event.y):
10229    ┃   ┃   ┃   ┃   ┣━ return element.x <= x and element.y <= y and element.x + element.width > x \
10230    ┃   ┃   ┃   ┃   ┣━ and element.y + element.height > y
10231    ┃   ┃   ┃   ┃   ┣━ return element.x <= x and element.y <= y and element.x + element.width > x \
10232    ┃   ┃   ┃   ┃   ┗━ return element.x <= x and element.y <= y and element.x + element.width > x \
10233    ┃   ┃   ┃   ┣━ if is_placed(element) and contains(element, event.x, event.y):
10234    ┃   ┃   ┃   ┣━ return
10235    ┃   ┃   ┃   ┗━ return
10236    ┃   ┃   ┣━ fire(child, event, level + 1)
10237    ┃   ┃   ┣━ for child in element.children:
10238    ┃   ┃   ┣━ fire(child, event, level + 1)
10239    ┃   ┃   ┃   ┣━ indent = "  " * level
10240    ┃   ┃   ┃   ┣━ if hasattr(event, "x") and hasattr(event, "y"):
10241    ┃   ┃   ┃   ┣━ if is_placed(element) and contains(element, event.x, event.y):
10242    ┃   ┃   ┃   ┃   ┣━ return hasattr(element, "x") and hasattr(element, "y") \
10243    ┃   ┃   ┃   ┃   ┣━ and hasattr(element, "width") and hasattr(element, "height")
10244    ┃   ┃   ┃   ┃   ┣━ return hasattr(element, "x") and hasattr(element, "y") \
10245    ┃   ┃   ┃   ┃   ┣━ and hasattr(element, "width") and hasattr(element, "height")
10246    ┃   ┃   ┃   ┃   ┣━ return hasattr(element, "x") and hasattr(element, "y") \
10247    ┃   ┃   ┃   ┃   ┗━ return hasattr(element, "x") and hasattr(element, "y") \
10248    ┃   ┃   ┃   ┣━ if is_placed(element) and contains(element, event.x, event.y):
10249    ┃   ┃   ┃   ┃   ┣━ return element.x <= x and element.y <= y and element.x + element.width > x \
10250    ┃   ┃   ┃   ┃   ┣━ and element.y + element.height > y
10251    ┃   ┃   ┃   ┃   ┣━ return element.x <= x and element.y <= y and element.x + element.width > x \
10252    ┃   ┃   ┃   ┃   ┗━ return element.x <= x and element.y <= y and element.x + element.width > x \
10253    ┃   ┃   ┃   ┣━ if is_placed(element) and contains(element, event.x, event.y):
10254    ┃   ┃   ┃   ┣━ if hasattr(element, event.type):
10255    ┃   ┃   ┃   ┣━ if hasattr(element, "children"):
10256    ┃   ┃   ┃   ┣━ for child in element.children:
10257    ┃   ┃   ┃   ┣━ fire(child, event, level + 1)
10258    ┃   ┃   ┃   ┃   ┣━ indent = "  " * level
10259    ┃   ┃   ┃   ┃   ┣━ if hasattr(event, "x") and hasattr(event, "y"):
10260    ┃   ┃   ┃   ┃   ┣━ if is_placed(element) and contains(element, event.x, event.y):
10261    ┃   ┃   ┃   ┃   ┃   ┣━ return hasattr(element, "x") and hasattr(element, "y") \
10262    ┃   ┃   ┃   ┃   ┃   ┣━ and hasattr(element, "width") and hasattr(element, "height")
10263    ┃   ┃   ┃   ┃   ┃   ┣━ return hasattr(element, "x") and hasattr(element, "y") \
10264    ┃   ┃   ┃   ┃   ┃   ┣━ and hasattr(element, "width") and hasattr(element, "height")
10265    ┃   ┃   ┃   ┃   ┃   ┣━ return hasattr(element, "x") and hasattr(element, "y") \
10266    ┃   ┃   ┃   ┃   ┃   ┗━ return hasattr(element, "x") and hasattr(element, "y") \
10267    ┃   ┃   ┃   ┃   ┣━ if is_placed(element) and contains(element, event.x, event.y):
10268    ┃   ┃   ┃   ┃   ┃   ┣━ return element.x <= x and element.y <= y and element.x + element.width > x \
10269    ┃   ┃   ┃   ┃   ┃   ┗━ return element.x <= x and element.y <= y and element.x + element.width > x \
10270    ┃   ┃   ┃   ┃   ┣━ if is_placed(element) and contains(element, event.x, event.y):
10271    ┃   ┃   ┃   ┃   ┣━ return
10272    ┃   ┃   ┃   ┃   ┗━ return
10273    ┃   ┃   ┃   ┣━ fire(child, event, level + 1)
10274    ┃   ┃   ┃   ┣━ for child in element.children:
10275    ┃   ┃   ┃   ┣━ fire(child, event, level + 1)
10276    ┃   ┃   ┃   ┃   ┣━ indent = "  " * level
10277    ┃   ┃   ┃   ┃   ┣━ if hasattr(event, "x") and hasattr(event, "y"):
10278    ┃   ┃   ┃   ┃   ┣━ if is_placed(element) and contains(element, event.x, event.y):
10279    ┃   ┃   ┃   ┃   ┃   ┣━ return hasattr(element, "x") and hasattr(element, "y") \
10280    ┃   ┃   ┃   ┃   ┃   ┣━ and hasattr(element, "width") and hasattr(element, "height")
10281    ┃   ┃   ┃   ┃   ┃   ┣━ return hasattr(element, "x") and hasattr(element, "y") \
10282    ┃   ┃   ┃   ┃   ┃   ┣━ and hasattr(element, "width") and hasattr(element, "height")
10283    ┃   ┃   ┃   ┃   ┃   ┣━ return hasattr(element, "x") and hasattr(element, "y") \
10284    ┃   ┃   ┃   ┃   ┃   ┗━ return hasattr(element, "x") and hasattr(element, "y") \
10285    ┃   ┃   ┃   ┃   ┣━ if is_placed(element) and contains(element, event.x, event.y):
10286    ┃   ┃   ┃   ┃   ┃   ┣━ return element.x <= x and element.y <= y and element.x + element.width > x \
10287    ┃   ┃   ┃   ┃   ┃   ┣━ and element.y + element.height > y
10288    ┃   ┃   ┃   ┃   ┃   ┣━ return element.x <= x and element.y <= y and element.x + element.width > x \
10289    ┃   ┃   ┃   ┃   ┃   ┗━ return element.x <= x and element.y <= y and element.x + element.width > x \
10290    ┃   ┃   ┃   ┃   ┣━ if is_placed(element) and contains(element, event.x, event.y):
10291    ┃   ┃   ┃   ┃   ┣━ if hasattr(element, event.type):
10292    ┃   ┃   ┃   ┃   ┣━ if hasattr(element, "children"):
10293    ┃   ┃   ┃   ┃   ┣━ for child in element.children:
10294    ┃   ┃   ┃   ┃   ┣━ fire(child, event, level + 1)
10295    ┃   ┃   ┃   ┃   ┃   ┣━ indent = "  " * level
10296    ┃   ┃   ┃   ┃   ┃   ┣━ if hasattr(event, "x") and hasattr(event, "y"):
10297    ┃   ┃   ┃   ┃   ┃   ┣━ if is_placed(element) and contains(element, event.x, event.y):
10298    ┃   ┃   ┃   ┃   ┃   ┃   ┣━ return hasattr(element, "x") and hasattr(element, "y") \
10299    ┃   ┃   ┃   ┃   ┃   ┃   ┣━ and hasattr(element, "width") and hasattr(element, "height")
10300    ┃   ┃   ┃   ┃   ┃   ┃   ┣━ return hasattr(element, "x") and hasattr(element, "y") \
10301    ┃   ┃   ┃   ┃   ┃   ┃   ┣━ and hasattr(element, "width") and hasattr(element, "height")
10302    ┃   ┃   ┃   ┃   ┃   ┃   ┣━ return hasattr(element, "x") and hasattr(element, "y") \
10303    ┃   ┃   ┃   ┃   ┃   ┃   ┗━ return hasattr(element, "x") and hasattr(element, "y") \
10304    ┃   ┃   ┃   ┃   ┃   ┣━ if is_placed(element) and contains(element, event.x, event.y):
10305    ┃   ┃   ┃   ┃   ┃   ┃   ┣━ return element.x <= x and element.y <= y and element.x + element.width > x \
10306    ┃   ┃   ┃   ┃   ┃   ┃   ┣━ and element.y + element.height > y
10307    ┃   ┃   ┃   ┃   ┃   ┃   ┣━ return element.x <= x and element.y <= y and element.x + element.width > x \
10308    ┃   ┃   ┃   ┃   ┃   ┃   ┗━ return element.x <= x and element.y <= y and element.x + element.width > x \
10309    ┃   ┃   ┃   ┃   ┃   ┣━ if is_placed(element) and contains(element, event.x, event.y):
10310    ┃   ┃   ┃   ┃   ┃   ┣━ if hasattr(element, event.type):
10311    ┃   ┃   ┃   ┃   ┃   ┣━ if hasattr(element, "children"):
10312    ┃   ┃   ┃   ┃   ┃   ┣━ for child in element.children:
10313    ┃   ┃   ┃   ┃   ┃   ┣━ fire(child, event, level + 1)
10314    ┃   ┃   ┃   ┃   ┃   ┃   ┣━ indent = "  " * level
10315    ┃   ┃   ┃   ┃   ┃   ┃   ┣━ if hasattr(event, "x") and hasattr(event, "y"):
10316    ┃   ┃   ┃   ┃   ┃   ┃   ┣━ if is_placed(element) and contains(element, event.x, event.y):
10317    ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ return hasattr(element, "x") and hasattr(element, "y") \
10318    ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ and hasattr(element, "width") and hasattr(element, "height")
10319    ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ return hasattr(element, "x") and hasattr(element, "y") \
10320    ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ and hasattr(element, "width") and hasattr(element, "height")
10321    ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ return hasattr(element, "x") and hasattr(element, "y") \
10322    ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ return hasattr(element, "x") and hasattr(element, "y") \
10323    ┃   ┃   ┃   ┃   ┃   ┃   ┣━ if is_placed(element) and contains(element, event.x, event.y):
10324    ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ return element.x <= x and element.y <= y and element.x + element.width > x \
10325    ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ and element.y + element.height > y
10326    ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┣━ return element.x <= x and element.y <= y and element.x + element.width > x \
10327    ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┗━ return element.x <= x and element.y <= y and element.x + element.width > x \
10328    ┃   ┃   ┃   ┃   ┃   ┃   ┣━ if is_placed(element) and contains(element, event.x, event.y):
10329    ┃   ┃   ┃   ┃   ┃   ┃   ┣━ if hasattr(element, event.type):
10330    ┃   ┃   ┃   ┃   ┃   ┃   ┣━ if hasattr(element, "children"):
10331    ┃   ┃   ┃   ┃   ┃   ┃   ┗━ if hasattr(element, "children"):
10332    ┃   ┃   ┃   ┃   ┃   ┣━ fire(child, event, level + 1)
10333    ┃   ┃   ┃   ┃   ┃   ┣━ for child in element.children:
10334    ┃   ┃   ┃   ┃   ┃   ┗━ for child in element.children:
10335    ┃   ┃   ┃   ┃   ┣━ fire(child, event, level + 1)
10336    ┃   ┃   ┃   ┃   ┣━ for child in element.children:
10337    ┃   ┃   ┃   ┃   ┗━ for child in element.children:
10338    ┃   ┃   ┃   ┣━ fire(child, event, level + 1)
10339    ┃   ┃   ┃   ┣━ for child in element.children:
10340    ┃   ┃   ┃   ┗━ for child in element.children:
10341    ┃   ┃   ┣━ fire(child, event, level + 1)
10342    ┃   ┃   ┣━ for child in element.children:
10343    ┃   ┃   ┣━ fire(child, event, level + 1)
10344    ┃   ┃   ┃   ┣━ indent = "  " * level
10345    ┃   ┃   ┃   ┣━ if hasattr(event, "x") and hasattr(event, "y"):
10346    ┃   ┃   ┃   ┣━ if is_placed(element) and contains(element, event.x, event.y):
10347    ┃   ┃   ┃   ┃   ┣━ return hasattr(element, "x") and hasattr(element, "y") \
10348    ┃   ┃   ┃   ┃   ┣━ and hasattr(element, "width") and hasattr(element, "height")
10349    ┃   ┃   ┃   ┃   ┣━ return hasattr(element, "x") and hasattr(element, "y") \
10350    ┃   ┃   ┃   ┃   ┣━ and hasattr(element, "width") and hasattr(element, "height")
10351    ┃   ┃   ┃   ┃   ┣━ return hasattr(element, "x") and hasattr(element, "y") \
10352    ┃   ┃   ┃   ┃   ┗━ return hasattr(element, "x") and hasattr(element, "y") \
10353    ┃   ┃   ┃   ┣━ if is_placed(element) and contains(element, event.x, event.y):
10354    ┃   ┃   ┃   ┃   ┣━ return element.x <= x and element.y <= y and element.x + element.width > x \
10355    ┃   ┃   ┃   ┃   ┗━ return element.x <= x and element.y <= y and element.x + element.width > x \
10356    ┃   ┃   ┃   ┣━ if is_placed(element) and contains(element, event.x, event.y):
10357    ┃   ┃   ┃   ┣━ return
10358    ┃   ┃   ┃   ┗━ return
10359    ┃   ┃   ┣━ fire(child, event, level + 1)
10360    ┃   ┃   ┣━ for child in element.children:
10361    ┃   ┃   ┣━ fire(child, event, level + 1)
10362    ┃   ┃   ┃   ┣━ indent = "  " * level
10363    ┃   ┃   ┃   ┣━ if hasattr(event, "x") and hasattr(event, "y"):
10364    ┃   ┃   ┃   ┣━ if is_placed(element) and contains(element, event.x, event.y):
10365    ┃   ┃   ┃   ┃   ┣━ return hasattr(element, "x") and hasattr(element, "y") \
10366    ┃   ┃   ┃   ┃   ┣━ and hasattr(element, "width") and hasattr(element, "height")
10367    ┃   ┃   ┃   ┃   ┣━ return hasattr(element, "x") and hasattr(element, "y") \
10368    ┃   ┃   ┃   ┃   ┣━ and hasattr(element, "width") and hasattr(element, "height")
10369    ┃   ┃   ┃   ┃   ┣━ return hasattr(element, "x") and hasattr(element, "y") \
10370    ┃   ┃   ┃   ┃   ┗━ return hasattr(element, "x") and hasattr(element, "y") \
10371    ┃   ┃   ┃   ┣━ if is_placed(element) and contains(element, event.x, event.y):
10372    ┃   ┃   ┃   ┃   ┣━ return element.x <= x and element.y <= y and element.x + element.width > x \
10373    ┃   ┃   ┃   ┃   ┗━ return element.x <= x and element.y <= y and element.x + element.width > x \
10374    ┃   ┃   ┃   ┣━ if is_placed(element) and contains(element, event.x, event.y):
10375    ┃   ┃   ┃   ┣━ return
10376    ┃   ┃   ┃   ┗━ return
10377    ┃   ┃   ┣━ fire(child, event, level + 1)
10378    ┃   ┃   ┣━ for child in element.children:
10379    ┃   ┃   ┗━ for child in element.children:
10380    ┃   ┣━ fire(root_element, event)
10381    ┃   ┣━ for event in events:
10382    ┃   ┣━ fire(root_element, event)
10383    ┃   ┃   ┣━ indent = "  " * level
10384    ┃   ┃   ┣━ if hasattr(event, "x") and hasattr(event, "y"):
10385    ┃   ┃   ┣━ if is_placed(element) and contains(element, event.x, event.y):
10386    ┃   ┃   ┃   ┣━ return hasattr(element, "x") and hasattr(element, "y") \
10387    ┃   ┃   ┃   ┣━ and hasattr(element, "width") and hasattr(element, "height")
10388    ┃   ┃   ┃   ┣━ return hasattr(element, "x") and hasattr(element, "y") \
10389    ┃   ┃   ┃   ┣━ and hasattr(element, "width") and hasattr(element, "height")
10390    ┃   ┃   ┃   ┣━ return hasattr(element, "x") and hasattr(element, "y") \
10391    ┃   ┃   ┃   ┗━ return hasattr(element, "x") and hasattr(element, "y") \
10392    ┃   ┃   ┣━ if is_placed(element) and contains(element, event.x, event.y):
10393    ┃   ┃   ┃   ┣━ return element.x <= x and element.y <= y and element.x + element.width > x \
10394    ┃   ┃   ┃   ┣━ and element.y + element.height > y
10395    ┃   ┃   ┃   ┣━ return element.x <= x and element.y <= y and element.x + element.width > x \
10396    ┃   ┃   ┃   ┗━ return element.x <= x and element.y <= y and element.x + element.width > x \
10397    ┃   ┃   ┣━ if is_placed(element) and contains(element, event.x, event.y):
10398    ┃   ┃   ┣━ if hasattr(element, event.type):
10399    ┃   ┃   ┣━ if hasattr(element, "children"):
10400    ┃   ┃   ┣━ for child in element.children:
10401    ┃   ┃   ┣━ fire(child, event, level + 1)
10402    ┃   ┃   ┃   ┣━ indent = "  " * level
10403    ┃   ┃   ┃   ┣━ if hasattr(event, "x") and hasattr(event, "y"):
10404    ┃   ┃   ┃   ┣━ if is_placed(element) and contains(element, event.x, event.y):
10405    ┃   ┃   ┃   ┃   ┣━ return hasattr(element, "x") and hasattr(element, "y") \
10406    ┃   ┃   ┃   ┃   ┣━ and hasattr(element, "width") and hasattr(element, "height")
10407    ┃   ┃   ┃   ┃   ┣━ return hasattr(element, "x") and hasattr(element, "y") \
10408    ┃   ┃   ┃   ┃   ┣━ and hasattr(element, "width") and hasattr(element, "height")
10409    ┃   ┃   ┃   ┃   ┣━ return hasattr(element, "x") and hasattr(element, "y") \
10410    ┃   ┃   ┃   ┃   ┗━ return hasattr(element, "x") and hasattr(element, "y") \
10411    ┃   ┃   ┃   ┣━ if is_placed(element) and contains(element, event.x, event.y):
10412    ┃   ┃   ┃   ┃   ┣━ return element.x <= x and element.y <= y and element.x + element.width > x \
10413    ┃   ┃   ┃   ┃   ┣━ and element.y + element.height > y
10414    ┃   ┃   ┃   ┃   ┣━ return element.x <= x and element.y <= y and element.x + element.width > x \
10415    ┃   ┃   ┃   ┃   ┗━ return element.x <= x and element.y <= y and element.x + element.width > x \
10416    ┃   ┃   ┃   ┣━ if is_placed(element) and contains(element, event.x, event.y):
10417    ┃   ┃   ┃   ┣━ return
10418    ┃   ┃   ┃   ┗━ return
10419    ┃   ┃   ┣━ fire(child, event, level + 1)
10420    ┃   ┃   ┣━ for child in element.children:
10421    ┃   ┃   ┣━ fire(child, event, level + 1)
10422    ┃   ┃   ┃   ┣━ indent = "  " * level
10423    ┃   ┃   ┃   ┣━ if hasattr(event, "x") and hasattr(event, "y"):
10424    ┃   ┃   ┃   ┣━ if is_placed(element) and contains(element, event.x, event.y):
10425    ┃   ┃   ┃   ┃   ┣━ return hasattr(element, "x") and hasattr(element, "y") \
10426    ┃   ┃   ┃   ┃   ┣━ and hasattr(element, "width") and hasattr(element, "height")
10427    ┃   ┃   ┃   ┃   ┣━ return hasattr(element, "x") and hasattr(element, "y") \
10428    ┃   ┃   ┃   ┃   ┣━ and hasattr(element, "width") and hasattr(element, "height")
10429    ┃   ┃   ┃   ┃   ┣━ return hasattr(element, "x") and hasattr(element, "y") \
10430    ┃   ┃   ┃   ┃   ┗━ return hasattr(element, "x") and hasattr(element, "y") \
10431    ┃   ┃   ┃   ┣━ if is_placed(element) and contains(element, event.x, event.y):
10432    ┃   ┃   ┃   ┃   ┣━ return element.x <= x and element.y <= y and element.x + element.width > x \
10433    ┃   ┃   ┃   ┃   ┣━ and element.y + element.height > y
10434    ┃   ┃   ┃   ┃   ┣━ return element.x <= x and element.y <= y and element.x + element.width > x \
10435    ┃   ┃   ┃   ┃   ┗━ return element.x <= x and element.y <= y and element.x + element.width > x \
10436    ┃   ┃   ┃   ┣━ if is_placed(element) and contains(element, event.x, event.y):
10437    ┃   ┃   ┃   ┣━ if hasattr(element, event.type):
10438    ┃   ┃   ┃   ┣━ if hasattr(element, "children"):
10439    ┃   ┃   ┃   ┣━ for child in element.children:
10440    ┃   ┃   ┃   ┣━ fire(child, event, level + 1)
10441    ┃   ┃   ┃   ┃   ┣━ indent = "  " * level
10442    ┃   ┃   ┃   ┃   ┣━ if hasattr(event, "x") and hasattr(event, "y"):
10443    ┃   ┃   ┃   ┃   ┣━ if is_placed(element) and contains(element, event.x, event.y):
10444    ┃   ┃   ┃   ┃   ┃   ┣━ return hasattr(element, "x") and hasattr(element, "y") \
10445    ┃   ┃   ┃   ┃   ┃   ┣━ and hasattr(element, "width") and hasattr(element, "height")
10446    ┃   ┃   ┃   ┃   ┃   ┣━ return hasattr(element, "x") and hasattr(element, "y") \
10447    ┃   ┃   ┃   ┃   ┃   ┣━ and hasattr(element, "width") and hasattr(element, "height")
10448    ┃   ┃   ┃   ┃   ┃   ┣━ return hasattr(element, "x") and hasattr(element, "y") \
10449    ┃   ┃   ┃   ┃   ┃   ┗━ return hasattr(element, "x") and hasattr(element, "y") \
10450    ┃   ┃   ┃   ┃   ┣━ if is_placed(element) and contains(element, event.x, event.y):
10451    ┃   ┃   ┃   ┃   ┃   ┣━ return element.x <= x and element.y <= y and element.x + element.width > x \
10452    ┃   ┃   ┃   ┃   ┃   ┗━ return element.x <= x and element.y <= y and element.x + element.width > x \
10453    ┃   ┃   ┃   ┃   ┣━ if is_placed(element) and contains(element, event.x, event.y):
10454    ┃   ┃   ┃   ┃   ┣━ return
10455    ┃   ┃   ┃   ┃   ┗━ return
10456    ┃   ┃   ┃   ┣━ fire(child, event, level + 1)
10457    ┃   ┃   ┃   ┣━ for child in element.children:
10458    ┃   ┃   ┃   ┣━ fire(child, event, level + 1)
10459    ┃   ┃   ┃   ┃   ┣━ indent = "  " * level
10460    ┃   ┃   ┃   ┃   ┣━ if hasattr(event, "x") and hasattr(event, "y"):
10461    ┃   ┃   ┃   ┃   ┣━ if is_placed(element) and contains(element, event.x, event.y):
10462    ┃   ┃   ┃   ┃   ┃   ┣━ return hasattr(element, "x") and hasattr(element, "y") \
10463    ┃   ┃   ┃   ┃   ┃   ┣━ and hasattr(element, "width") and hasattr(element, "height")
10464    ┃   ┃   ┃   ┃   ┃   ┣━ return hasattr(element, "x") and hasattr(element, "y") \
10465    ┃   ┃   ┃   ┃   ┃   ┣━ and hasattr(element, "width") and hasattr(element, "height")
10466    ┃   ┃   ┃   ┃   ┃   ┣━ return hasattr(element, "x") and hasattr(element, "y") \
10467    ┃   ┃   ┃   ┃   ┃   ┗━ return hasattr(element, "x") and hasattr(element, "y") \
10468    ┃   ┃   ┃   ┃   ┣━ if is_placed(element) and contains(element, event.x, event.y):
10469    ┃   ┃   ┃   ┃   ┃   ┣━ return element.x <= x and element.y <= y and element.x + element.width > x \
10470    ┃   ┃   ┃   ┃   ┃   ┣━ and element.y + element.height > y
10471    ┃   ┃   ┃   ┃   ┃   ┣━ return element.x <= x and element.y <= y and element.x + element.width > x \
10472    ┃   ┃   ┃   ┃   ┃   ┗━ return element.x <= x and element.y <= y and element.x + element.width > x \
10473    ┃   ┃   ┃   ┃   ┣━ if is_placed(element) and contains(element, event.x, event.y):
10474    ┃   ┃   ┃   ┃   ┣━ if hasattr(element, event.type):
10475    ┃   ┃   ┃   ┃   ┣━ log(indent + "calling handler fn")
10476    ┃   ┃   ┃   ┃   ┃   ┣━ logfile.write(text + "\n")
10477    ┃   ┃   ┃   ┃   ┃   ┣━ logfile.flush()
10478    ┃   ┃   ┃   ┃   ┃   ┗━ logfile.flush()
10479    ┃   ┃   ┃   ┃   ┣━ log(indent + "calling handler fn")
10480    ┃   ┃   ┃   ┃   ┣━ handler_fn = getattr(element, event.type)
10481    ┃   ┃   ┃   ┃   ┣━ handler_fn(event)
10482    ┃   ┃   ┃   ┃   ┃   ┣━ remove_child(d, f)
10483    ┃   ┃   ┃   ┃   ┃   ┃   ┗━ assert child in parent.children
10484    ┃   ┣━ except Exception as e:
10485    ┃   ┣━ clean_up()
10486    ┃   ┃   ┣━ restore(original_settings)
10487    ┃   ┃   ┃   ┣━ termios.tcsetattr(sys.stdin.fileno(), termios.TCSADRAIN, settings)
10488    ┃   ┃   ┃   ┣━ write('\x1B[0m')
10489    ┃   ┃   ┃   ┃   ┣━ print(value, end = '')
10490    ┃   ┃   ┃   ┃   ┣━ sys.stdout.flush()
10491    ┃   ┃   ┃   ┃   ┗━ sys.stdout.flush()
10492    ┃   ┃   ┃   ┣━ write('\x1B[0m')
10493    ┃   ┃   ┃   ┣━ print("\n")
10494    ┃   ┃   ┃   ┗━ print("\n")
10495    ┃   ┃   ┣━ restore(original_settings)
10496    ┃   ┃   ┣━ mouse_off()
10497    ┃   ┃   ┃   ┣━ write('\x1B[?1000l')
10498    ┃   ┃   ┃   ┃   ┣━ print(value, end = '')
10499    ┃   ┃   ┃   ┃   ┣━ sys.stdout.flush()
10500    ┃   ┃   ┃   ┃   ┗━ sys.stdout.flush()
10501    ┃   ┃   ┃   ┣━ write('\x1B[?1000l')
10502    ┃   ┃   ┃   ┗━ write('\x1B[?1000l')
10503    ┃   ┃   ┣━ mouse_off()
10504    ┃   ┃   ┣━ cursor_on()
10505    ┃   ┃   ┃   ┣━ write('\x1B[?25h')
10506    ┃   ┃   ┃   ┃   ┣━ print(value, end = '')
10507    ┃   ┃   ┃   ┃   ┣━ sys.stdout.flush()
10508    ┃   ┃   ┃   ┃   ┗━ sys.stdout.flush()
10509    ┃   ┃   ┃   ┣━ write('\x1B[?25h')
10510    ┃   ┃   ┃   ┗━ write('\x1B[?25h')
10511    ┃   ┃   ┣━ cursor_on()
10512    ┃   ┃   ┗━ cursor_on()
10513    ┃   ┣━ clean_up()
10514    ┃   ┣━ raise e
10515    ┃   ┗━ 
10516   IncrementalDecoder.__init__(self, errors)
10517    ┣━ self.errors = errors
10518    ┗━ self.errors = errors
10519   IncrementalDecoder.__init__(self, errors)
10520   self.buffer = b""
10521   self.buffer = b""
10522   return (self.buffer, 0)
10523   return (self.buffer, 0)
10524   data = self.buffer + input
10525   (result, consumed) = self._buffer_decode(data, self.errors, final)
10526   self.buffer = data[consumed:]
10527   return result
10528   return result
10529   return (self.buffer, 0)
10530   return (self.buffer, 0)
10531   data = self.buffer + input
10532   (result, consumed) = self._buffer_decode(data, self.errors, final)
10533   self.buffer = data[consumed:]
10534   return result
10535   return result
10536   IncrementalDecoder.__init__(self, errors)
10537    ┣━ self.errors = errors
10538    ┗━ self.errors = errors
10539   IncrementalDecoder.__init__(self, errors)
10540   self.buffer = b""
10541   self.buffer = b""
10542   return (self.buffer, 0)
10543   return (self.buffer, 0)
10544   data = self.buffer + input
10545   (result, consumed) = self._buffer_decode(data, self.errors, final)
10546   self.buffer = data[consumed:]
10547   return result
10548   return result
10549   IncrementalDecoder.__init__(self, errors)
10550    ┣━ self.errors = errors
10551    ┗━ self.errors = errors
10552   IncrementalDecoder.__init__(self, errors)
10553   self.buffer = b""
10554   self.buffer = b""
10555   return (self.buffer, 0)
10556   return (self.buffer, 0)
10557   data = self.buffer + input
10558   (result, consumed) = self._buffer_decode(data, self.errors, final)
10559   self.buffer = data[consumed:]
10560   return result
10561   return result
10562   return (self.buffer, 0)
10563   return (self.buffer, 0)
10564   data = self.buffer + input
10565   (result, consumed) = self._buffer_decode(data, self.errors, final)
10566   self.buffer = data[consumed:]
10567   return result
10568   return result
10569   IncrementalDecoder.__init__(self, errors)
10570    ┣━ self.errors = errors
10571    ┗━ self.errors = errors
10572   IncrementalDecoder.__init__(self, errors)
10573   self.buffer = b""
10574   self.buffer = b""
10575   return (self.buffer, 0)
10576   return (self.buffer, 0)
10577   data = self.buffer + input
10578   (result, consumed) = self._buffer_decode(data, self.errors, final)
10579   self.buffer = data[consumed:]
10580   return result
10581   return result
10582   return (self.buffer, 0)
10583   return (self.buffer, 0)
10584   data = self.buffer + input
10585   (result, consumed) = self._buffer_decode(data, self.errors, final)
10586   self.buffer = data[consumed:]
10587   return result
10588   return result
10589   IncrementalDecoder.__init__(self, errors)
10590    ┣━ self.errors = errors
10591    ┗━ self.errors = errors
10592   IncrementalDecoder.__init__(self, errors)
10593   self.buffer = b""
10594   self.buffer = b""
10595   return (self.buffer, 0)
10596   return (self.buffer, 0)
10597   data = self.buffer + input
10598   (result, consumed) = self._buffer_decode(data, self.errors, final)
10599   self.buffer = data[consumed:]
10600   return result
10601   return result
10602   return (self.buffer, 0)
10603   return (self.buffer, 0)
10604   data = self.buffer + input
10605   (result, consumed) = self._buffer_decode(data, self.errors, final)
10606   self.buffer = data[consumed:]
10607   return result
10608   return result
10609   IncrementalDecoder.__init__(self, errors)
10610    ┣━ self.errors = errors
10611    ┗━ self.errors = errors
10612   IncrementalDecoder.__init__(self, errors)
10613   self.buffer = b""
10614   self.buffer = b""
10615   return (self.buffer, 0)
10616   return (self.buffer, 0)
10617   data = self.buffer + input
10618   (result, consumed) = self._buffer_decode(data, self.errors, final)
10619   self.buffer = data[consumed:]
10620   return result
10621   return result
10622   return (self.buffer, 0)
10623   return (self.buffer, 0)
10624   data = self.buffer + input
10625   (result, consumed) = self._buffer_decode(data, self.errors, final)
10626   self.buffer = data[consumed:]
10627   return result
10628   return result
10629   IncrementalDecoder.__init__(self, errors)
10630    ┣━ self.errors = errors
10631    ┗━ self.errors = errors
10632   IncrementalDecoder.__init__(self, errors)
10633   self.buffer = b""
10634   self.buffer = b""
10635   return (self.buffer, 0)
10636   return (self.buffer, 0)
10637   data = self.buffer + input
10638   (result, consumed) = self._buffer_decode(data, self.errors, final)
10639   self.buffer = data[consumed:]
10640   return result
10641   return result
10642   return (self.buffer, 0)
10643   return (self.buffer, 0)
10644   data = self.buffer + input
10645   (result, consumed) = self._buffer_decode(data, self.errors, final)
10646   self.buffer = data[consumed:]
10647   return result
10648   return result
10649   IncrementalDecoder.__init__(self, errors)
10650    ┣━ self.errors = errors
10651    ┗━ self.errors = errors
10652   IncrementalDecoder.__init__(self, errors)
10653   self.buffer = b""
10654   self.buffer = b""
10655   return (self.buffer, 0)
10656   return (self.buffer, 0)
10657   data = self.buffer + input
10658   (result, consumed) = self._buffer_decode(data, self.errors, final)
10659   self.buffer = data[consumed:]
10660   return result
10661   return result
10662   IncrementalDecoder.__init__(self, errors)
10663    ┣━ self.errors = errors
10664    ┗━ self.errors = errors
10665   IncrementalDecoder.__init__(self, errors)
10666   self.buffer = b""
10667   self.buffer = b""
10668   return (self.buffer, 0)
10669   return (self.buffer, 0)
10670   data = self.buffer + input
10671   (result, consumed) = self._buffer_decode(data, self.errors, final)
10672   self.buffer = data[consumed:]
10673   return result
10674   return result
10675   return (self.buffer, 0)
10676   return (self.buffer, 0)
10677   data = self.buffer + input
10678   (result, consumed) = self._buffer_decode(data, self.errors, final)
10679   self.buffer = data[consumed:]
10680   return result
10681   return result
